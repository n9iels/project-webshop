var LoginModel=function(){function e(e,t,n){$.ajax({url:"http://84.84.245.29:243/user/login",type:"post",dataType:"json",data:JSON.stringify({email:e,password:t}),success:function(e){document.cookie="access_token="+e.access_token,n(e)},error:function(e,t,n){$("#error_message").show()}})}return{login:e}},PageModel=function(){function e(e){$.ajax({url:"http://84.84.245.29:243/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+t("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("error.html")}})}function t(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var o=t[n].split("=");if(o[0]==e)return o[1]}}return{getPage:e}},ProductsModel=function(){function e(e){$.ajax({url:"http://84.84.245.29:243/products",type:"get",dataType:"json",success:function(t){e(t)},error:function(e,t,n){$("#component").load("error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){$.ajax({url:"http://84.84.245.29:243/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer}),success:function(e){t(e),console.log(e)},error:function(e,t,n){$("#error_message").show()}})}return{register:e}},LoginController=function(e,t){function n(e){e.preventDefault();var t={};$.each($(this).serializeArray(),function(e,n){t[n.name]=n.value}),r.login(t.email,t.password,function(e){$("#inloggen_text").hide(),$("#uitloggen_text").show(),new PageController(new PageViewHelper,new PageModel).main()})}function o(){i.setView(),i.setActionListener(n)}var r=t,i=e;return{main:o}},PageController=function(e,t){function n(e){r.getPage(function(e){i.setView(e)})}function o(){i.setActionListener(n)}var r=t,i=e;return{main:o}},ProductsController=function(e,t){function n(){r.getPage(function(e){i.setView(e)})}function o(){i.setActionListener(n)}var r=t,i=e;return{main:o}},RegisterController=function(e,t){function n(){event.preventDefault();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag;var t=!1,n=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];return $.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,o){""==e[o]&&($("#"+o).addClass("invalid"),t=!0)}),t?(window.scrollTo(0,0),$("#register_error_message").show(),!1):(console.log("function not aborted"),void r.setView("views/register/after_register.html"))}function o(){r.setView("views/register/register.html"),r.setActionListener(n)}var r=e;return{main:o}},LoginViewHelper=function(){function e(){$("#component").load("views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},PageViewHelper=function(){function e(e){$("#component").load("views/page/page.html",function(){"customer"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een customer bent"),"admin"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een administrator bent")})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},RegisterViewHelper=function(){function e(e){$("#component").load(e)}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}},ProductsViewHelper=function(){function e(e){$("#component").load("views/products/products.html",function(){$.each(e,function(e,t){var n=$("<div>").append($("#product__list__item").clone());$(n).find(".product__title").html(t.ean_number),$(n).find(".product__price").html(t.price),$(n).find(".product__image img").attr("src",t.image),e%4==0&&0==e?$("#product__list").append("<div class='row'>"+n.html()):e%4==0?$("#product__list").append("</div><div class='row'>"+n.html()):$("#product__list div.row").last().append(n.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
