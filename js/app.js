var LoginModel=function(){function t(t){$.ajax({url:"http://84.84.245.29:243/login",type:"post",dataType:"json",success:function(n){t(n)},error:function(t,n,e){$("#component").html("post naar API doet t niet :-(")}})}return{getPage:t}},ProductsModel=function(){function t(t){$.ajax({url:"http://84.84.245.29:243/products",type:"get",dataType:"json",success:function(n){t(n)},error:function(t,n,e){$("#component").html("Producten konden niet opgehaald worden :-(")}})}return{getPage:t}},LoginController=function(t,n){function e(){i.getPage(function(t){r.setView(t)})}function o(){r.setView(),r.setActionListener(e)}var i=n,r=t;return{main:o}},ProductsController=function(t,n){function e(){i.getPage(function(t){r.setView(t)})}function o(){r.setActionListener(e)}var i=n,r=t;return{main:o}},LoginViewHelper=function(){function t(t){$("#component").load("views/login/login.html")}function n(t){$(document).ready(t)}return{setView:t,setActionListener:n}},ProductsViewHelper=function(){function t(t){$("#component").load("views/products/products_view.html",function(){$.each(t,function(t,n){var e=$("<div>").append($("#product__list__item").clone());$(e).find(".product__title").html(n.ean_number),$(e).find(".product__price").html(n.price),t%4==0&&0==t?$("#product__list").append("<div class='row'>"+e.html()):t%4==0?$("#product__list").append("</div><div class='row'>"+e.html()):$("#product__list div.row").last().append(e.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function n(t){$(document).ready(t)}return{setView:t,setActionListener:n}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luX21vZGVsLmpzIiwicHJvZHVjdHNfbW9kZWwuanMiLCJsb2dpbl9jb250cm9sbGVyLmpzIiwicHJvZHVjdHNfY29udHJvbGxlci5qcyIsImxvZ2luL2xvZ2luX3ZpZXcuanMiLCJwcm9kdWN0cy9wcm9kdWN0c192aWV3LmpzIl0sIm5hbWVzIjpbIkxvZ2luTW9kZWwiLCJnZXRQYWdlIiwiY2FsbGJhY2siLCIkIiwiYWpheCIsInVybCIsInR5cGUiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJkYXRhIiwiZXJyb3IiLCJ4aHIiLCJzdGF0dXMiLCJodG1sIiwiUHJvZHVjdHNNb2RlbCIsIkxvZ2luQ29udHJvbGxlciIsInZpZXdIZWxwZXIiLCJtb2RlbCIsImFjdGlvblBlcmZvcm1lZCIsIk1vZGVsIiwiVmlld0hlbHBlciIsInNldFZpZXciLCJtYWluIiwic2V0QWN0aW9uTGlzdGVuZXIiLCJQcm9kdWN0c0NvbnRyb2xsZXIiLCJMb2dpblZpZXdIZWxwZXIiLCJ2aWV3RGF0YSIsImxvYWQiLCJhY3Rpb24iLCJkb2N1bWVudCIsInJlYWR5IiwiUHJvZHVjdHNWaWV3SGVscGVyIiwiZWFjaCIsImtleSIsInZhbHVlIiwicHJvZHVjdCIsImFwcGVuZCIsImNsb25lIiwiZmluZCIsImVhbl9udW1iZXIiLCJwcmljZSIsImxhc3QiLCJhcHBlbmRUbyIsImZpcnN0IiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxZQUFBLFdBRUEsUUFBQUMsR0FBQUMsR0FFQUMsRUFBQUMsTUFDQUMsSUFBQSxnQ0FDQUMsS0FBQSxPQUNBQyxTQUFBLE9BQ0FDLFFBQUEsU0FBQUMsR0FDQVAsRUFBQU8sSUFFQUMsTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBUCxFQUFBLGNBQUFVLEtBQUEsb0NBTUEsT0FDQVosUUFBQUEsSUNuQkFhLGNBQUEsV0FFQSxRQUFBYixHQUFBQyxHQUVBQyxFQUFBQyxNQUNBQyxJQUFBLG1DQUNBQyxLQUFBLE1BQ0FDLFNBQUEsT0FDQUMsUUFBQSxTQUFBQyxHQUNBUCxFQUFBTyxJQUVBQyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBQ0FQLEVBQUEsY0FBQVUsS0FBQSxpREFNQSxPQUNBWixRQUFBQSxJQ25CQWMsZ0JBQUEsU0FBQUMsRUFBQUMsR0FNQSxRQUFBQyxLQUdBQyxFQUFBbEIsUUFBQSxTQUFBUSxHQUFBVyxFQUFBQyxRQUFBWixLQUlBLFFBQUFhLEtBR0FGLEVBQUFDLFVBT0FELEVBQUFHLGtCQUFBTCxHQXJCQSxHQUFBQyxHQUFBRixFQUNBRyxFQUFBSixDQXdCQSxRQUNBTSxLQUFBQSxJQzVCQUUsbUJBQUEsU0FBQVIsRUFBQUMsR0FNQSxRQUFBQyxLQUVBQyxFQUFBbEIsUUFBQSxTQUFBUSxHQUFBVyxFQUFBQyxRQUFBWixLQUlBLFFBQUFhLEtBRUFGLEVBQUFHLGtCQUFBTCxHQVpBLEdBQUFDLEdBQUFGLEVBQ0FHLEVBQUFKLENBZUEsUUFDQU0sS0FBQUEsSUNuQkFHLGdCQUFBLFdBR0EsUUFBQUosR0FBQUssR0FFQXZCLEVBQUEsY0FBQXdCLEtBQUEsMEJBSUEsUUFBQUosR0FBQUssR0FFQXpCLEVBQUEwQixVQUFBQyxNQUFBRixHQU1BLE9BQ0FQLFFBQUFBLEVBQ0FFLGtCQUFBQSxJQ25CQVEsbUJBQUEsV0FHQSxRQUFBVixHQUFBSyxHQUVBdkIsRUFBQSxjQUFBd0IsS0FBQSxvQ0FBQSxXQUNBeEIsRUFBQTZCLEtBQUFOLEVBQUEsU0FBQU8sRUFBQUMsR0FFQSxHQUFBQyxHQUFBaEMsRUFBQSxTQUFBaUMsT0FBQWpDLEVBQUEsd0JBQUFrQyxRQUdBbEMsR0FBQWdDLEdBQUFHLEtBQUEsbUJBQUF6QixLQUFBcUIsRUFBQUssWUFDQXBDLEVBQUFnQyxHQUFBRyxLQUFBLG1CQUFBekIsS0FBQXFCLEVBQUFNLE9BR0FQLEVBQUEsR0FBQSxHQUFBLEdBQUFBLEVBRUE5QixFQUFBLGtCQUFBaUMsT0FBQSxvQkFBQUQsRUFBQXRCLFFBRUFvQixFQUFBLEdBQUEsRUFFQTlCLEVBQUEsa0JBQUFpQyxPQUFBLDBCQUFBRCxFQUFBdEIsUUFJQVYsRUFBQSwwQkFBQXNDLE9BQUFMLE9BQUFELEVBQUF0QixVQUtBVixFQUFBLFVBQUF1QyxTQUFBLGtCQUdBdkMsRUFBQSx3QkFBQXdDLFFBQUFDLFdBS0EsUUFBQXJCLEdBQUFLLEdBRUF6QixFQUFBMEIsVUFBQUMsTUFBQUYsR0FNQSxPQUNBUCxRQUFBQSxFQUNBRSxrQkFBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIExvZ2luTW9kZWwgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIGZ1bmN0aW9uIGdldFBhZ2UoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly84NC44NC4yNDUuMjk6MjQzL2xvZ2luXCIsIC8vPyBodHRwOi8vODQuODQuMjQ1LjI5OjI0MyA9IEFQSS1sb2NhdGllP1xyXG4gICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikuaHRtbChcInBvc3QgbmFhciBBUEkgZG9ldCB0IG5pZXQgOi0oXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0UGFnZTogZ2V0UGFnZVxyXG4gICAgfVxyXG59OyIsInZhciBQcm9kdWN0c01vZGVsID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICBmdW5jdGlvbiBnZXRQYWdlKGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwOi8vODQuODQuMjQ1LjI5OjI0My9wcm9kdWN0c1wiLCAvLz8gaHR0cDovLzg0Ljg0LjI0NS4yOToyNDMgPSBBUEktbG9jYXRpZT9cclxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikuaHRtbChcIlByb2R1Y3RlbiBrb25kZW4gbmlldCBvcGdlaGFhbGQgd29yZGVuIDotKFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldFBhZ2U6IGdldFBhZ2VcclxuICAgIH1cclxufTsiLCJ2YXIgTG9naW5Db250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcbiAgICBcclxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcclxuICAgIGZ1bmN0aW9uIGFjdGlvblBlcmZvcm1lZCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy9oaWVyIG1vZXQgbG9naW5fbW9kZWwgdG9jaCBlbWFpbCBlbiBwYXNzd29yZCBkaWUgdXNlciBpbnZvZXJ0IG5hYXIgQVBJIHZlcnN0dXJlbi4gaXB2IFxyXG4gICAgICAgIE1vZGVsLmdldFBhZ2UoZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHNldCB2aWV3IHRvIGxvZ2luIGZvcm1cclxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoKTtcclxuXHJcbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiBlbWFpbCBhbmQgcGFzc3dvcmQ7IGNsaWNrcyAnbG9naW4nXHJcbiAgICAgICAgLy8gZW1haWwgYW5kIHBhc3N3b3JkIGFyZSBzZW5kIHRvIEFQSTsgQVBJIHZhbGlkYXRlcyB0aGVtLCBzZW5kcyBvbmUgb2YgZm9sbG93aW5nIG1lc3NhZ2VzOlxyXG4gICAgICAgIC8vIDEgZW1haWwgYWxyZWFkeSBoYXMgYW4gYWNjb3VudFxyXG4gICAgICAgIC8vIDIgcGFzc3dvcmQgaW52YWxpZCAoZS5nLiBlbXB0eSlcclxuICAgICAgICAvLyAzIFNVQ0NFU1M6IG5ldyBhY2NvdW50IG1hZGUgICAgICAgIFxyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIFByb2R1Y3RzQ29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxyXG57XHJcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgXHJcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldFBhZ2UoZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAgeyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIExvZ2luVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxyXG4gICAge1xyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJ3ZpZXdzL2xvZ2luL2xvZ2luLmh0bWwnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeGVjdXRlIHRoZSBldmVudCB3aGVuICdzb21ldGhpbmcnIGhhcHBlbnMgKHdoZW4gYSBidXR0b24gaXMgY2xpY2tlZCBmb3IgZXhhbXBsZSlcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pOyAvLyBpZiAnZG9jdW1lbnQgcmVhZHknIHBlcmZvcm0gXCJhY3Rpb25cIlxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcclxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXJcclxuICAgIH1cclxufTsiLCJ2YXIgUHJvZHVjdHNWaWV3SGVscGVyID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcclxuICAgIGZ1bmN0aW9uIHNldFZpZXcodmlld0RhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCgndmlld3MvcHJvZHVjdHMvcHJvZHVjdHNfdmlldy5odG1sJywgZnVuY3Rpb24gKCkgeyAvLyB3YWFyIGlkID0gJ2NvbXBvbmVudCcgZG9lIC5sb2FkLi4uLi4uXHJcbiAgICAgICAgICAgICQuZWFjaCh2aWV3RGF0YSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgcHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSAkKCc8ZGl2PicpLmFwcGVuZCgkKCcjcHJvZHVjdF9fbGlzdF9faXRlbScpLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJvZHVjdCBpbmZvXHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS5lYW5fbnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICQocHJvZHVjdCkuZmluZChcIi5wcm9kdWN0X19wcmljZVwiKS5odG1sKHZhbHVlLnByaWNlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW4gd2hhdCB3ZSBoYXZlIHRvIGRvIHdpdGggdGhlIHJvd3NcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgJSA0ID09IDAgJiYga2V5ID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0XCIpLmFwcGVuZChcIjxkaXYgY2xhc3M9J3Jvdyc+XCIgKyBwcm9kdWN0Lmh0bWwoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgJSA0ID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0XCIpLmFwcGVuZChcIjwvZGl2PjxkaXYgY2xhc3M9J3Jvdyc+XCIgKyBwcm9kdWN0Lmh0bWwoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0IGRpdi5yb3dcIikubGFzdCgpLmFwcGVuZChwcm9kdWN0Lmh0bWwoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIGxhc3Qgcm93XHJcbiAgICAgICAgICAgICQoXCI8L2Rpdj5cIikuYXBwZW5kVG8oXCIjcHJvZHVjdF9fbGlzdFwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgbGlzdCBpdGVtLCBiZWNhdXNlIHRoaXMgaXRlbSBpcyBhbHdheXMgZW1wdHlcclxuICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0X19pdGVtXCIpLmZpcnN0KCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXhlY3V0ZSB0aGUgZXZlbnQgd2hlbiAnc29tZXRoaW5nJyBoYXBwZW5zICh3aGVuIGEgYnV0dG9uIGlzIGNsaWNrZWQgZm9yIGV4YW1wbGUpXHJcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTsgLy8gaWYgJ2RvY3VtZW50IHJlYWR5JyBwZXJmb3JtIFwiYWN0aW9uXCJcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXHJcbiAgICB9XHJcbn07Il19
