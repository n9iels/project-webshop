var LoginModel=function(){function t(t,n,o){$.ajax({url:"http://84.84.245.29:243/user/login",type:"post",dataType:"json",data:JSON.stringify({email:t,password:n}),success:function(t){o(t),console.log(t)},error:function(t,n,o){$("#error_message").show()}})}return{login:t}},ProductsModel=function(){function t(t){$.ajax({url:"http://84.84.245.29:243/products",type:"get",dataType:"json",success:function(n){t(n)},error:function(t,n,o){$("#component").load("error.html")}})}return{getPage:t}},LoginController=function(t,n){function o(){var t=$("#e-mailadres").val(),n=$("#wachtwoord").val();i.login(t,n,function(t){console.log("should show uitloggenbutton now"),$("#inloggen_text").hide(),$("#uitloggen_text").show()})}function e(){r.setView(),r.setActionListener(o)}var i=n,r=t;return{main:e}},ProductsController=function(t,n){function o(){i.getPage(function(t){r.setView(t)})}function e(){r.setActionListener(o)}var i=n,r=t;return{main:e}},LoginViewHelper=function(){function t(){$("#component").load("views/login/login.html")}function n(t){$("#component").on("click","#loginbutton",t)}return{setView:t,setActionListener:n}},ProductsViewHelper=function(){function t(t){$("#component").load("views/products/products.html",function(){$.each(t,function(t,n){var o=$("<div>").append($("#product__list__item").clone());$(o).find(".product__title").html(n.ean_number),$(o).find(".product__price").html(n.price),t%4==0&&0==t?$("#product__list").append("<div class='row'>"+o.html()):t%4==0?$("#product__list").append("</div><div class='row'>"+o.html()):$("#product__list div.row").last().append(o.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function n(t){$(document).ready(t)}return{setView:t,setActionListener:n}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
