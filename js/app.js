var LoginModel=function(){function t(t){$.ajax({url:"http://84.84.245.29:243/login",type:"post",dataType:"json",success:function(n){t(n)},error:function(t,n,e){$("#component").html("post naar API doet t niet :-(")}})}return{getPage:t}},ProductsModel=function(){function t(t){$.ajax({url:"http://84.84.245.29:243/products",type:"get",dataType:"json",success:function(n){t(n)},error:function(t,n,e){$("#component").load("error.html")}})}return{getPage:t}},LoginController=function(t,n){function e(){i.getPage(function(t){r.setView(t)})}function o(){r.setView(),r.setActionListener(e)}var i=n,r=t;return{main:o}},ProductsController=function(t,n){function e(){i.getPage(function(t){r.setView(t)})}function o(){r.setActionListener(e)}var i=n,r=t;return{main:o}},LoginViewHelper=function(){function t(t){$("#component").load("views/login/login.html")}function n(t){$(document).ready(t)}return{setView:t,setActionListener:n}},ProductsViewHelper=function(){function t(t){$("#component").load("views/products/products_view.html",function(){$.each(t,function(t,n){var e=$("<div>").append($("#product__list__item").clone());$(e).find(".product__title").html(n.ean_number),$(e).find(".product__price").html(n.price),t%4==0&&0==t?$("#product__list").append("<div class='row'>"+e.html()):t%4==0?$("#product__list").append("</div><div class='row'>"+e.html()):$("#product__list div.row").last().append(e.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function n(t){$(document).ready(t)}return{setView:t,setActionListener:n}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
