function PlatformLogo(e){switch(e=e.toUpperCase()){case"PS1":return"<img src='/resources/images/icons/ps1.png' />";case"PS4":return"<img src='/resources/images/icons/ps4.png' />";case"PC":return"<img src='/resources/images/icons/windows.png' />";case"XBOX":return"<img src='/resources/images/icons/xbox.png' />";case"NES":return"<img src='/resources/images/icons/nes.png' />";case"N64":return"<img src='/resources/images/icons/n64.png' />";case"NINTENDO SWITCH":return"<img src='/resources/images/icons/switch.png' />";default:return e;case"NINTENDO":return"<img src='/resources/images/publishers/nintendo.png' />";case"UBISOFT":return"<img src='/resources/images/publishers/ubisoft.png' />";case"ELECTRONIC ARTS":return"<img src='/resources/images/publishers/ea.png' />"}}function BeschikbaarheidKleur(e){return e<=0?"<img src='/resources/images/availability/buttonred.png' />":e>=1?"<img src='/resources/images/availability/buttongreen.png' />":e}function CartHelper(){this.removeProduct=function(e){},this.addProduct=function(e){}}function CookieHelper(){this.getCookie=function(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var i=t[n].split("=");if(i[0].trim()==e)return i[1]}},this.createCookie=function(e,t){document.cookie=e+"="+t+";"},this.deleteCookie=function(e){document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"}}function showLoadScreen(){$("#component").html('<div class="spinner"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div> </div>')}function onLoadPage(){UserHelper.isAdmin()?($(".visible-admin").css("display","inline-block"),$(".visible-customer").css("display","inline-block"),$("#inloggen_text").hide()):UserHelper.isCustomer()?($(".visible-customer").css("display","inline-block"),$("#inloggen_text").hide()):($(".visible-admin").hide(),$(".visible-customer").hide(),$("#inloggen_text").css("display","inline-block"))}function UserHelper(){this.isLogedIn=function(){var e=CookieHelper.getCookie("access_token");return void 0!=e&&""!=e},this.isCustomer=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("customer"==e||"admin"==e)return!0}return!1},this.isAdmin=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("admin"==e)return!0}return!1},this.decodeToken=function(){var e=CookieHelper.getCookie("access_token");if(void 0!=e&&""!=e){var t=e.split(".")[1];return JSON.parse(atob(t))}}}function WishlistHelper(){this.addItem=function(e){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan Wishlist.")},error:function(e,t,n){alert("Product is al in Wishlist.")}})}}$(document).on("click","span.like",function(e){$(this).toggleClass("like--active")}),$(document).on("click","span.single_like",function(e){$(this).toggleClass("single_like--active")});var Router=function(){function e(e,o){if(0!=t(e)){var r=n(e);switch(r[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(r[1])).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;case"logout":new LogoutController(new LogoutViewHelper,new LogoutModel).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"resetpassword":new ResetPasswordController(new ResetPasswordViewHelper,new ResetPasswordModel).main();break;case"wishlist":new WishlistController(new WishlistViewHelper,new WishlistModel).main();break;case"admin":new AdminController(new AdminViewHelper,new AdminModel).main();break;case"admin_user":new AdminUserController(new AdminUserViewHelper,new AdminUserModel(r[1])).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=o&&""!=e&&"string"==typeof e&&(i({},"A-Z Games",e),showLoadScreen(),window.scrollTo(0,0))}}function t(e){return e.indexOf("http")==-1&&e.indexOf("https")==-1&&e.indexOf("www")==-1||(window.location=e,!1)}function n(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function i(e,t,n){window.history.pushState(e,t,n)}return baseUrl="project-webshop/",{route:e}};$(document).ready(function(){function e(e){$(e).toggleClass("sidebar--open"),$(".overlay").toggleClass("overlay--visible"),$("body").toggleClass("sidebar--open")}$(".sidebar-toggle").click(function(t){t.preventDefault();var n=$(this).data("sidebar");e($("#"+n))}),$(".sidebar__close").click(function(t){e($(this).parent().parent())}),$(".overlay").click(function(t){e($(".sidebar"))})});var Router=new Router,CookieHelper=new CookieHelper,UserHelper=new UserHelper,WishlistHelper=new WishlistHelper;$.fn.serializeObject=function(){var e={},t=this.serializeArray();return $.each(t,function(){void 0!==e[this.name]?(e[this.name].push||(e[this.name]=[e[this.name]]),""!=this.value&&e[this.name].push(this.value)):""!=this.value&&(e[this.name]=this.value||"")}),e};var AdminModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/admin/users",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},AdminUserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e[0])},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e,t){e.date_of_birth=new Date(Date.UTC(e.jaar,e.maand,e.dag)),delete e.jaar,delete e.maand,delete e.dag,$.ajax({url:"http://localhost:8081/admin/users/"+e.user_id,type:"PATCH",dataType:"json",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function i(e,t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t()},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:t,saveUserInfo:n,deleteUser:i}},CartModel=function(){function e(e){var t=CookieHelper.getCookie("cart");void 0!=t&&e(JSON.parse(t))}function t(e,t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",contentType:"json",success:function(e){cart={ean_number:e[0].ean_number,title:e[0].title,price:e[0].price,image:e[0].image},t(cart);var n=CookieHelper.getCookie("cart");void 0==n?CookieHelper.createCookie("cart",JSON.stringify([cart])):(n=JSON.parse(n),n.push(cart),CookieHelper.createCookie("cart",JSON.stringify(n)))},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e){for(cart=JSON.parse(CookieHelper.getCookie("cart")),i=0;i<cart.length;i++)if(cart[i].ean_number==e){cart.splice(i,1);break}CookieHelper.createCookie("cart",JSON.stringify(cart))}return{getCart:e,addProduct:t,removeProduct:n}},LoginModel=function(){function e(e,t,n){$.ajax({url:"https://api.az-games.nl/user/login",type:"GET",dataType:"json",headers:{Authorization:"Basic "+btoa(e+":"+t)},success:function(e){CookieHelper.createCookie("access_token",e.access_token),CookieHelper.createCookie("user_id",e.user_id),onLoadPage(),n(e)},error:function(e,t,n){$("#error_message").show()}})}return{login:e}},LogoutModel=function(){function e(e){function t(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var i=t[n].split("=");if(i[0].trim()==e)return i[1]}}$.ajax({url:"https://api.az-games.nl/user/logout",type:"post",dataType:"json",data:JSON.stringify({user_id:t("user_id")}),success:function(t){CookieHelper.deleteCookie("access_token"),CookieHelper.deleteCookie("user_id"),onLoadPage(),e(t)},error:function(e,t,n){$("#error_message").show()}})}return{logout:e}},PageModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},ProductsModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/products?"+e,type:"get",dataType:"json",success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,insertion:e.tussenvoegsel,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer,postal_code:e.postcode,number:e.huisnummer,street_name:e.straatnaam,city:e.plaats}),success:function(e){t(e)},error:function(e,t,n){$("#regi_api_error_message").show()}})}return{register:e}},ResetPasswordModel=function(){function e(e,t){console.log(e),$.ajax({url:"https://api.az-games.nl/user/resetpassword",type:"post",dataType:"json",data:JSON.stringify({email:e.e_mailadres,secret_question_answer:e.security_answer,secret_question:e.security_question,new_password:e.wachtwoord,repeat_password:e.wachtwoord2}),success:function(e){t(e)},error:function(e,t,n){$("#reset_password_api_error_message").show()}})}return{resetpassword:e}},ProductModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{GetProductInfo:t}},UserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/users/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,n){$("#component").load("/error.html")}})}return{GetUserInfo:t}},WishlistModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/wishlist",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function t(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id"),type:"post",dataType:"json",data:JSON.stringify({wishlist_id:e.wishlist_id}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e,t){$.ajax({url:"http://localhost:8081/wishlist/"+CookieHelper.getCookie("user_id")+"/"+String(e),type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getWishlist:e,addToWishlist:t,deleteFromWishlist:n}},AdminController=function(e,t){function n(){s.setActionListener(i)}function i(){r.getPage(o)}function o(e){s.setView(e)}var r=t,s=e;return{main:n}},AdminUserController=function(e,t){function n(){c.setActionListener(i),e.setSaveListener(r),e.setDeleteListener(s)}function i(){a.getPage(o)}function o(e){c.setView(e)}function r(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();a.saveUserInfo(t,function(e){alert("Gebruiker succesvol geüpdate.")})}function s(e){a.deleteUser(e,function(){alert("Gebruiker succesvol gedelete."),Router.route("/admin")})}var a=t,c=e;return{main:n}},CartController=function(e,t){function n(){s.getCart(function(e){a.setView(e)})}function i(e){s.addProduct(e,function(e){a.addItem(e)})}function o(e){s.removeProduct(e,function(e){})}function r(){a.setActionListener(n),a.setAddProductListener(i),a.setRemoveListener(o)}var s=t,a=e;return{main:r}},DeleteController=function(e,t){},ErrorController=function(e){function t(){n.setView()}var n=e;return{main:t}},LoginController=function(e,t){function n(e){e.preventDefault(),e.stopImmediatePropagation();var t={};$.each($(this).serializeArray(),function(e,n){t[n.name]=n.value}),o.login(t.email,t.password,function(e){$("#inloggen_text").hide(),$("#uitloggen_text").show(),new PageController(new PageViewHelper,new PageModel).main()})}function i(){r.setView(),r.setActionListener(n)}var o=t,r=e;return{main:i}},LogoutController=function(e,t){function n(e){o.logout(function(e){$("#inloggen_text").show(),$("#uitloggen_text").hide(),r.setView()})}function i(){r.setActionListener(n)}var o=t,r=e;return{main:i}},PageController=function(e,t){function n(e){o.getPage(function(e){r.setView(e)})}function i(){r.setActionListener(n)}var o=t,r=e;return{main:i}},ProductsController=function(e,t){function n(){r.getPage("",function(e){s.setView(e)})}function i(e){e.preventDefault();var t=$(this).serialize();r.getPage(t,function(e){s.loadProducts(e)})}function o(){s.setActionListener(n),s.setFilterListener(i)}var r=t,s=e;return{main:o}},RegisterController=function(e,t){function n(){console.log("in actionPerformed"),event.preventDefault(),$("#regi_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag,console.log(e);var t=!1,n=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];$.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,i){""==e[i]&&($("#"+i).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#register_error_message").show());var i=!1;return e.wachtwoord!=e.wachtwoord2&&(i=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!i&&(console.log("continued"),void o.register(e,function(e){r.setView("/views/register/after_register.html")}))}function i(){r.setView("/views/register/register.html"),r.setActionListener(n)}var o=t,r=e;return{main:i}},ResetPasswordController=function(e,t){function n(){console.log("in actionPerformed"),event.preventDefault(),$("#reset_password_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value});var t=!1,n=["wachtwoord","wachtwoord2","e_mailadres","security_answer"];$.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,i){""==e[i]&&($("#"+i).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#reset_error_message").show());var i=!1;return e.wachtwoord!=e.wachtwoord2&&(i=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!i&&(console.log("continued"),void o.resetpassword(e,function(e){r.setView("views/resetpassword/after_reset.html")}))}function i(){r.setView("views/resetpassword/resetpassword.html"),r.setActionListener(n)}var o=t,r=e;return{main:i}},ProductController=function(e,t){function n(t){e.setView(t)}function i(){t.GetProductInfo(n)}return{main:i,showView:n}},WishlistController=function(e,t){function n(){s.getWishlist(i)}function i(e){a.setView(e)}function o(){a.setActionListener(n),a.setDeleteListener(r)}function r(e,t){s.deleteFromWishlist(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:o}},AdminViewHelper=function(){function e(e){$(document).ready(e)}function t(e){document.title="Admin - AZ Games",$("#component").load("/views/admin/admin.html",function(){$.each(e,function(e,t){var n=$("#single_user").clone();$(n).find(".user__firstname").html(t.first_name),$(n).find(".user__firstname").attr("href","/admin_user/"+t.user_id),$(n).find(".user__insertion").html(t.insertion),$(n).find(".user__lastname").html(t.surname),$(n).find(".user__email").html(t.email),$(n).find(".user__phonenumber").html(t.phone_number),$("#users_body").append(n)}),$("#single_user").first().remove()})}return{setActionListener:e,setView:t}},AdminUserViewHelper=function(){function e(e){$(document).ready(e)}function t(e){$("#component").load("/views/adminuser/adminuser.html",function(){$("#delete_btn").attr("data-id",e.user_id),$("#first_name").val(e.first_name),$("#insertion").val(e.insertion),$("#surname").val(e.surname),$("#user_type").val(e.user_type),$("#email").val(e.email),$("#password").attr("placeholder","Vul hier iets in om het wachtwoord te veranderen"),$("#gender").val(e.gender),$("#date_of_birth").val(e.date_of_birth),$("#phone_number").val(e.phone_number),$("#is_active").val(e.is_active),$("#user_id").val(e.user_id);var t=new Date,n=new Date(e.date_of_birth);for(i=1;i<32;i++)i==n.getDate()?$("#dag").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<t.getFullYear()+1;i++)i==n.getFullYear()?$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"'>"+i+"</option>");$("#maand").val(n.getMonth())})}function n(e){$(document).on("submit","#userform",e)}function o(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault(),e($(this).data("id"))})}return{setActionListener:e,setView:t,setSaveListener:n,setDeleteListener:o}},CartViewHelper=function(){function e(e){""!=e&&e.forEach(function(e,t){n(e)})}function t(e){e=parseFloat(e)+parseFloat($(".cart__total .price").html().substr(1)),$(".cart__total .price").html("€"+parseFloat(e).toFixed(2))}function n(e){var n=$("<div>").html($(".sidebar__content__tmp").html());n.find(".cart__item__title").html(e.title),n.find(".cart__item__price").html("€"+e.price),n.find(".cart__item__image img").attr("src",e.image),n.find(".cart__item").attr("data-id",e.ean_number),$(".cart").append(n);var i=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(i)+1),t(e.price)}function i(e){$(document).ready(e)}function o(e){$("body").on("click",".addtocart",function(t){t.preventDefault();var n=$(this).data("id");e(n),$(this).closest("#to_shop_cart").find("#shop_cart").fadeTo(0,100).delay(1e3).fadeTo(600,0)})}function r(e){$("body").on("click",".cart__item__remove",function(n){var i=$(this).parent(),o=$(this).parent().data("id");$(i).addClass("cart__item--removed"),$(i).on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd",function(){$(this).remove()});var r=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(r)-1),e(o),t(-$(i).find(".cart__item__price").html().substr(1))})}return{setView:e,addItem:n,updateTotalPrice:t,setActionListener:i,setAddProductListener:o,setRemoveListener:r}},ErrorViewHelper=function(){function e(){document.title="Oeps - AZ Games",$("#component").load("/views/error/error.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},LoginViewHelper=function(){function e(){document.title="Inloggen - AZ Games",$("#component").load("/views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},LogoutViewHelper=function(){function e(){document.title="Uitloggen - AZ Games",$("#component").load("/views/logout/logout.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},PageViewHelper=function(){function e(e){document.title="Welkom - AZ Games",$("#component").load("/views/page/page.html",function(){"customer"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een customer</h1>"),"admin"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een administrator</h1>")})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},RegisterViewHelper=function(){function e(e){document.title="Registreren - AZ Games",$("#component").load(e,function(){var e=new Date;for(i=1;i<32;i++)$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<e.getFullYear()+1;i++)2e3!=i?$("#jaar").append("<option value='"+i+"'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>")})}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}},ProductsViewHelper=function(){function e(e){document.title="Producten - AZ Games",$("#component").html('<div class="col-12"><div class="col-3" id="filters"></div><div class="col-9" id="products"></div></div>'),$("#filters").load("/views/products/filters.html"),t(e)}function t(e){$("#products").load("/views/products/products.html",function(){$.each(e,function(e,t){var i=$("<div>").append($("#product__list__item").clone());$(i).find(".product__title").html(t.title),$(i).find(".product__subtitle").append(t.genre+" | PEGI "+t.pegi_age+" | "+PlatformLogo(t.platform)),$(i).find(".product__description").html(n(t.description)),$(i).find(".product__price").append("€ "+t.price),$(i).find("#buttons__info, .product__image a, .product__title").attr("href","product/"+t.ean_number),$(i).find(".product__image img").attr("src",t.image),$(i).find(".addtocart").attr("data-id",t.ean_number),$("#product__list").append(i)}),$("#product__list__item").first().remove()})}function n(e){var t=50,n=e.split(" ");if(n.length>t){var o="";for(i=0;i<t;i++)o+=n[i]+" ";return o+"..."}return e}function o(e){$(document).ready(e)}function r(e){$("#component").off().on("change","input[type=checkbox]",function(e){$("#product_filter").submit()}),$("#component").on("change keyup","input[name=price-max], input[name=price-min]",function(e){null==$("#pricemin").val()?$("#pricemin").val(0):$("#product_filter").submit()}),$("#component").on("submit","#product_filter",e)}return{setView:e,loadProducts:t,setActionListener:o,setFilterListener:r}},ResetPasswordViewHelper=function(){function e(e){document.title="Inloggen - AZ Games",$("#component").load(e)}function t(e){$("#component").on("submit","#resetform",e)}return{setView:e,setActionListener:t}},ProductViewHelper=function(){function e(e){document.title=e.title+" - AZ Games",$("#component").load("/views/single_product/single_product.html",function(){$(".singleproduct__image img").attr("src",e.image),$(".singleproduct__title").html(e.title),$(".singleproduct__price").html("€ "+e.price),$(".singleproduct__ean").append(e.ean_number),$(".singleproduct__platform").append(PlatformLogo(e.platform)),$(".singleproduct__publisher").append(PlatformLogo(e.publisher)),$(".singleproduct__pegi").append(e.pegi_age),$(".singleproduct__genre").append(e.genre),$(".singleproduct__descr").html(e.description),$(".addtocart").attr("data-id",e.ean_number),UserHelper.isLogedIn()?$(".addToWishlistButton").attr("onclick","WishlistHelper.addItem("+e.ean_number+");"):$(".addToWishlistButton").hide();var t=new Date(e.release_date),n=["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"];$(".singleproduct__releasedate").append(t.getDay()+" "+n[t.getMonth()]+" "+t.getFullYear())})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},WishlistViewHelper=function(){function e(e){document.title="Wishlist - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="wishlist"></div></div>'),t(e)}function t(e){$("#wishlist").load("/views/wishlist/wishlist.html",function(){var t=0,n=0;$.each(e,function(e,i){var o=$("<div>").append($("#wish__list__item").clone());t+=1,$(o).find(".wish__list__id").append(t),$(o).find(".wish__list__image img").attr("src",i.image),$(o).find(".wish__list__title").html(i.title),$(o).find(".wish__list__price").append("€ "+i.price),$(o).find(".wish__list__platform").append(PlatformLogo(i.platform)),$(o).find(".wish__list__availability").append(BeschikbaarheidKleur(i.stock)),$(o).find(".wish__list__likebutton").append(),$(o).find("#delete_btn").attr("data-id",i.ean_number),$(o).find("#cart_btn").attr("data-id",i.ean_number),$("#wish__list").append(o),n++}),0==n&&$("#wishlist_error_message").show(),$("#wish__list__item").first().remove()})}function n(e){$(document).ready(e)}function i(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var n=$(this).data("id"),i=$(this).closest(".row");e(n,i)})}function o(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadWishlist:t,setActionListener:n,setDeleteListener:i,hideItem:o}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
