var Router=function(){function e(e,r){if(0!=t(e)){var i=n(e);switch(i[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(i[1])).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;case"logout":new LogoutController(new LogoutViewHelper,new LogoutModel).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=r&&(""==e&&(e="index.html"),o({},"A-Z Games",e))}}function t(e){return e.indexOf("http")==-1&&e.indexOf("https")==-1&&e.indexOf("www")==-1||(window.location=e,!1)}function n(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function o(e,t,n){window.history.pushState(e,t,n)}return baseUrl="project-webshop/",{route:e}},LoginModel=function(){function e(e,t,n){$.ajax({url:"http:///84.84.245.29:243/user/login",type:"post",dataType:"json",data:JSON.stringify({email:e,password:t}),success:function(e){document.cookie="access_token="+e.access_token,document.cookie="user_id="+e.user_id,n(e)},error:function(e,t,n){$("#error_message").show()}})}return{login:e}},LogoutModel=function(){function e(e){function t(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var o=t[n].split("=");if(o[0].trim()==e)return o[1]}}$.ajax({url:"http://84.84.245.29:243/user/logout",type:"post",dataType:"json",data:JSON.stringify({user_id:t("user_id")}),success:function(t){document.cookie="access_token=",document.cookie="user_id=",e(t)},error:function(e,t,n){$("#error_message").show()}})}return{logout:e}},PageModel=function(){function e(e){$.ajax({url:"http://84.84.245.29:243/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+t("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("error.html")}})}function t(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var o=t[n].split("=");if(o[0]==e)return o[1]}}return{getPage:e}},ProductsModel=function(){function e(e,t){$.ajax({url:"http://84.84.245.29:243/products?"+e,type:"get",dataType:"json",success:function(e){t(e)},error:function(e,t,n){$("#component").load("views/error/error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){$.ajax({url:"http://84.84.245.29:243/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer}),success:function(e){t(e),console.log(e)},error:function(e,t,n){$("#regi_api_error_message").show()}})}return{register:e}},ErrorController=function(e){function t(){n.setView()}var n=e;return{main:t}},LoginController=function(e,t){function n(e){e.preventDefault();var t={};$.each($(this).serializeArray(),function(e,n){t[n.name]=n.value}),r.login(t.email,t.password,function(e){$("#inloggen_text").hide(),$("#uitloggen_text").show(),new PageController(new PageViewHelper,new PageModel).main()})}function o(){i.setView(),i.setActionListener(n)}var r=t,i=e;return{main:o}},LogoutController=function(e,t){function n(e){r.logout(function(e){$("#inloggen_text").show(),$("#uitloggen_text").hide(),i.setView()})}function o(){i.setActionListener(n)}var r=t,i=e;return{main:o}},PageController=function(e,t){function n(e){r.getPage(function(e){i.setView(e)})}function o(){i.setActionListener(n)}var r=t,i=e;return{main:o}},ProductsController=function(e,t){function n(){i.getPage("",function(e){s.setView(e)})}function o(e){e.preventDefault();var t=$(this).serialize();i.getPage(t,function(e){s.loadProducts(e)})}function r(){s.setActionListener(n),s.setFilterListener(o)}var i=t,s=e;return{main:r}},RegisterController=function(e,t){function n(){console.log("in actionPerformed"),event.preventDefault(),$("#regi_api_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag;var t=!1,n=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];return $.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,o){""==e[o]&&($("#"+o).addClass("invalid"),t=!0)}),t?(window.scrollTo(0,0),$("#register_error_message").show(),!1):(console.log("function not aborted"),console.log(e),void r.register(e,function(e){i.setView("views/register/after_register.html")}))}function o(){i.setView("views/register/register.html"),i.setActionListener(n)}var r=t,i=e;return{main:o}},ErrorViewHelper=function(){function e(){$("#component").load("views/error/error.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},LogoutViewHelper=function(){function e(){$("#component").load("views/logout/logout.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},LoginViewHelper=function(){function e(){$("#component").load("views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},PageViewHelper=function(){function e(e){$("#component").load("views/page/page.html",function(){"customer"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een customer bent"),"admin"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een administrator bent")})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},ProductsViewHelper=function(){function e(e){$("#component").html('<div class="col-12"><div class="col-3" id="filters"></div><div class="col-9" id="products"></div></div>'),$("#filters").load("views/products/filters.html"),t(e)}function t(e){$("#products").load("views/products/products.html",function(){$.each(e,function(e,t){var n=$("<div>").append($("#product__list__item").clone());$(n).find(".product__title").html(t.title),$(n).find(".product__price").html(t.price),$(n).find(".product__image img").attr("src",t.image),e%4==0&&0==e?$("#product__list").append("<div class='row'>"+n.html()):e%4==0?$("#product__list").append("</div><div class='row'>"+n.html()):$("#product__list div.row").last().append(n.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function n(e){$(document).ready(e)}function o(e){$("#component").on("click","input[type=checkbox]",function(e){$("#product_filter").submit()}),$("#component").on("submit","#product_filter",e)}return{setView:e,loadProducts:t,setActionListener:n,setFilterListener:o}},RegisterViewHelper=function(){function e(e){$("#component").load(e)}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
