function PlatformLogo(e){switch(e=e.toUpperCase()){case"PS1":return"<img src='/resources/images/icons/ps1.png' />";case"PS4":return"<img src='/resources/images/icons/ps4.png' />";case"PC":return"<img src='/resources/images/icons/windows.png' />";case"XBOX":return"<img src='/resources/images/icons/xbox.png' />";case"NES":return"<img src='/resources/images/icons/nes.png' />";case"N64":return"<img src='/resources/images/icons/n64.png' />";case"NINTENDO SWITCH":return"<img src='/resources/images/icons/switch.png' />";default:return e;case"NINTENDO":return"<img src='/resources/images/publishers/nintendo.png' />";case"UBISOFT":return"<img src='/resources/images/publishers/ubisoft.png' />";case"ELECTRONIC ARTS":return"<img src='/resources/images/publishers/ea.png' />"}}function BeschikbaarheidKleur(e){return e<=0?"<img src='/resources/images/availability/buttonred.png' />":e>=1?"<img src='/resources/images/availability/buttongreen.png' />":e}function getOffset(e){return e=e.getBoundingClientRect(),{left:e.left+window.scrollX,top:e.top+window.scrollY}}function CookieHelper(){this.getCookie=function(e){for(var t=document.cookie.split(";"),i=0;i<t.length;i++){var n=t[i].split("=");if(n[0].trim()==e)return n[1]}},this.createCookie=function(e,t){var i=new Date;i.setTime(i.getTime()+864e5);var n="expires="+i.toUTCString();document.cookie=e+"="+t+";"+n+";path=/"},this.deleteCookie=function(e){document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"}}function FavoriteListHelper(){this.addItem=function(e){$.ajax({url:"https://localhost:8081/favoritelist/"+CookieHelper.getCookie("user_id")+"/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product (van (im)order uit (im)order history) succesvol toegevoegd aan uw favorieten lijst.")},error:function(e,t,i){alert("Product (van (im)order uit (im)order history) is al in favorieten lijst.")}})}}function showLoadScreen(){$("#component").html('<div class="spinner"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div> </div>')}function onLoadPage(){$(".mmenu").empty(),$(".nav").clone().appendTo(".mmenu"),UserHelper.isAdmin()?($(".visible-admin").css("display","block"),$(".visible-customer").css("display","block"),$(".inloggen_text").hide()):UserHelper.isCustomer()?($(".visible-customer").css("display","block"),$(".inloggen_text").hide()):($(".visible-admin").hide(),$(".visible-customer").hide(),$("#inloggen_text").css("display","block"))}function UserHelper(){this.isLogedIn=function(){var e=CookieHelper.getCookie("access_token");return void 0!=e&&""!=e},this.isCustomer=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("customer"==e||"admin"==e)return!0}return!1},this.isAdmin=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("admin"==e)return!0}return!1},this.decodeToken=function(){var e=CookieHelper.getCookie("access_token");if(void 0!=e&&""!=e){var t=e.split(".")[1];return JSON.parse(atob(t))}},this.getUserInfo=function(e){$.ajax({url:"https://api.az-games.nl/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){Router.route("/login")}})}}function WishlistHelper(){this.addItem=function(e){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan Wishlist.")},error:function(e,t,i){alert("Product is al in Wishlist.")}})}}$(document).on("click","span.like",function(e){$(this).toggleClass("like--active")}),$(document).on("click","span.single_like",function(e){$(this).toggleClass("single_like--active")}),$(document).on("click","a.order__navigate",function(e){if(e.preventDefault(),0==$(this).hasClass("disabled")){var t=$(this).data("step");$("ul.order-steps li").removeClass("active"),$("ul.order-steps li."+t).addClass("active"),$(".order__step").removeClass("order__step--active"),$("#"+t).addClass("order__step--active")}}),$(document).on("change","select#shipping_method",function(e){var t=$(this).val();""!=t?$(this).parents(".order__step").find(".btn--next").removeClass("disabled"):$(this).parents(".order__step").find(".btn--next").addClass("disabled"),$(".shipping__fields").hide(),$("."+t+"_fields").show()}),$(document).on("change","select#payment_method",function(e){var t=$(this).val();""!=t?($(this).parents(".order__step").find(".btn--next").removeClass("disabled"),$(this).parents(".order__step").find(".btn--next").attr("disabled",!1)):($(this).parents(".order__step").find(".btn--next").addClass("disabled"),$(this).parents(".order__step").find(".btn--next").attr("disabled",!0))});var Router=function(){function e(e,r){if(0!=t(e)&&""!=e){var o=i(e);switch(o[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(o[1])).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;case"logout":new LogoutController(new LogoutViewHelper,new LogoutModel).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"resetpassword":new ResetPasswordController(new ResetPasswordViewHelper,new ResetPasswordModel).main();break;case"wishlist":new WishlistController(new WishlistViewHelper,new WishlistModel).main();break;case"admin":new AdminController(new AdminViewHelper,new AdminModel).main();break;case"admin_user":new AdminUserController(new AdminUserViewHelper,new AdminUserModel(o[1])).main();break;case"favoritelist":new FavoriteListController(new FavoriteListViewHelper,new FavoriteListModel).main();break;case"checkout":new CheckoutController(new CheckoutViewHelper,new CheckoutModel).main();break;case"orders":new OrdersController(new OrdersViewHelper,new OrdersModel).main();break;case"order":new OrderController(new OrderViewHelper,new OrderModel(o[1])).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=r&&""!=e&&"string"==typeof e&&(n({},"A-Z Games",e),$(".sidebar").removeClass("sidebar--open"),$(".overlay").removeClass("overlay--visible"),$("body").removeClass("sidebar--open"),showLoadScreen(),window.scrollTo(0,0))}}function t(e){return e.indexOf("http")==-1&&e.indexOf("www")==-1&&e.indexOf("mailto")==-1||(window.location=e,!1)}function i(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function n(e,t,i){window.history.pushState(e,t,i)}return baseUrl="project-webshop/",{route:e}};$(document).ready(function(){function e(e,t){t?$(e).removeClass("sidebar--open"):$(e).toggleClass("sidebar--open"),$(".overlay").toggleClass("overlay--visible"),$("body").toggleClass("sidebar--open")}$(".sidebar-toggle").click(function(t){t.preventDefault();var i=$(this).data("sidebar");e($("#"+i))}),$(".sidebar__close").click(function(t){e($(this).parent().parent())}),$(".overlay").click(function(t){e($(".sidebar"),!0)})}),$(document).on("mouseenter",".hasTooltip",function(e){var t=$(this).data("tooltip"),i=getOffset(this),n=$("<div class='tooltip'>"+t+"</div>");$("body").append(n),i.top=i.top+$(this).outerHeight(),i.left=i.left+$(this).outerWidth()/2-$(".tooltip").outerWidth()/2,n.css("left",i.left),n.css("top",i.top)}),$(document).on("mouseleave",".hasTooltip",function(e){$("body").find(".tooltip").remove()});var Router=new Router,CookieHelper=new CookieHelper,UserHelper=new UserHelper,WishlistHelper=new WishlistHelper;$.fn.serializeObject=function(){var e={},t=this.serializeArray();return $.each(t,function(){void 0!==e[this.name]?(e[this.name].push||(e[this.name]=[e[this.name]]),""!=this.value&&e[this.name].push(this.value)):""!=this.value&&(e[this.name]=this.value||"")}),e};var AdminUserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function i(e,t){e.date_of_birth=new Date(Date.UTC(e.jaar,e.maand,e.dag)),delete e.jaar,delete e.maand,delete e.dag,$.ajax({url:"https://api.az-games.nl/admin/users/"+e.user_id,type:"PATCH",dataType:"json",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function n(e,t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t()},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:t,saveUserInfo:i,deleteUser:n}},AdminModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/admin/users",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:e}},CartModel=function(){function e(e){var t=CookieHelper.getCookie("cart");void 0!=t&&e(JSON.parse(t))}function t(e,t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",contentType:"json",success:function(e){cart={ean_number:e[0].ean_number,title:e[0].title,price:e[0].price,image:e[0].image},t(cart);var i=CookieHelper.getCookie("cart");void 0==i?CookieHelper.createCookie("cart",JSON.stringify([cart])):(i=JSON.parse(i),i.push(cart),CookieHelper.createCookie("cart",JSON.stringify(i)))},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function n(e){for(cart=JSON.parse(CookieHelper.getCookie("cart")),i=0;i<cart.length;i++)if(cart[i].ean_number==e){cart.splice(i,1);break}CookieHelper.createCookie("cart",JSON.stringify(cart))}return{getCart:e,addProduct:t,removeProduct:n}},CheckoutModel=function(){function e(e){var t=CookieHelper.getCookie("cart");e(void 0!=t&&""!=t?JSON.parse(t):[])}function t(e,t){e.status="paid",e.btw_percentage=21,e.order_date=new Date,e.delivery_costs=3.95,e.cart=JSON.parse(CookieHelper.getCookie("cart")),$.ajax({url:"https://api.az-games.nl/orders",type:"post",dataType:"json",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){CookieHelper.deleteCookie("cart"),t()},error:function(e,t,i){console.log("someting went wrong")}})}return{getOrderInformation:e,saveOrder:t}},FavoriteListModel=function(){return{getFavoritelist:getFavoritelist,addToFavoritelist:addToFavoritelist,deleteFromFavoritelist:deleteFromFavoritelist}},LoginModel=function(){function e(e,t,i){$.ajax({url:"https://api.az-games.nl/user/login",type:"GET",dataType:"json",headers:{Authorization:"Basic "+btoa(e+":"+t)},success:function(e){CookieHelper.createCookie("access_token",e.access_token),CookieHelper.createCookie("user_id",e.user_id),onLoadPage(),i(e)},error:function(e,t,i){$("#error_message").show()}})}return{login:e}},LogoutModel=function(){function e(e){function t(e){for(var t=document.cookie.split(";"),i=0;i<t.length;i++){var n=t[i].split("=");if(n[0].trim()==e)return n[1]}}$.ajax({url:"https://api.az-games.nl/user/logout",type:"post",dataType:"json",data:JSON.stringify({user_id:t("user_id")}),success:function(t){CookieHelper.deleteCookie("access_token"),CookieHelper.deleteCookie("user_id"),onLoadPage(),e(t)},error:function(e,t,i){$("#error_message").show()}})}return{logout:e}},OrdersModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/orders",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getOrders:e}},OrderModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/orders/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getOrder:t}},ProductsModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/products?"+e,type:"get",dataType:"json",success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){e.date_of_birth=new Date(Date.UTC(e.jaar,e.maand,e.dag)),delete e.jaar,delete e.maand,delete e.dag,$.ajax({url:"https://api.az-games.nl/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,insertion:e.tussenvoegsel,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer,postal_code:e.postcode,number:e.huisnummer,street_name:e.straatnaam,city:e.plaats}),success:function(e){t(e)},error:function(e,t,i){$("#regi_api_error_message").show()}})}return{register:e}},ResetPasswordModel=function(){function e(e,t){console.log(e),$.ajax({url:"https://api.az-games.nl/user/resetpassword",type:"post",dataType:"json",data:JSON.stringify({email:e.e_mailadres,secret_question_answer:e.security_answer,secret_question:e.security_question,new_password:e.wachtwoord,repeat_password:e.wachtwoord2}),success:function(e){t(e)},error:function(e,t,i){$("#reset_password_api_error_message").show()}})}return{resetpassword:e}},ProductModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{GetProductInfo:t}},UserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/users/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/error.html")}})}return{GetUserInfo:t}},WishlistModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/wishlist",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function t(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id"),type:"post",dataType:"json",data:JSON.stringify({wishlist_id:e.wishlist_id}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function i(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+String(e),type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getWishlist:e,addToWishlist:t,deleteFromWishlist:i}},AdminUserController=function(e,t){function i(){c.setActionListener(n),e.setSaveListener(o),e.setDeleteListener(s)}function n(){a.getPage(r)}function r(e){c.setView(e)}function o(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();a.saveUserInfo(t,function(e){alert("Gebruiker succesvol geüpdate.")})}function s(e){a.deleteUser(e,function(){alert("Gebruiker succesvol gedelete."),Router.route("/admin")})}var a=t,c=e;return{main:i}},AdminController=function(e,t){function i(){s.setActionListener(n)}function n(){o.getPage(r)}function r(e){s.setView(e)}var o=t,s=e;return{main:i}},CartController=function(e,t){function i(){s.getCart(function(e){a.setView(e)})}function n(e){s.addProduct(e,function(e){a.addItem(e)})}function r(e){s.removeProduct(e,function(e){})}function o(){a.setActionListener(i),a.setAddProductListener(n),a.setRemoveListener(r)}var s=t,a=e;return{main:o}},CheckoutController=function(e,t){function i(e){o.getOrderInformation(function(e){s.setView(e)})}function n(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();o.saveOrder(t,function(){s.finishOrder(),s.clearCart()})}function r(){0==UserHelper.isLogedIn()?Router.route("/login"):(s.setActionListener(i),s.setOrderListener(n))}var o=t,s=e;return{main:r}},DeleteController=function(e,t){},ErrorController=function(e){function t(){i.setView()}var i=e;return{main:t}},FavoriteListController=function(e,t){function i(){s.getFavoritelist(n)}function n(e){a.setView(e)}function r(){a.setActionListener(i),a.setDeleteListener(o)}function o(e,t){s.deleteFromFavoritelist(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:r}},LoginController=function(e,t){function i(e){e.preventDefault(),e.stopImmediatePropagation();var t={};$.each($(this).serializeArray(),function(e,i){t[i.name]=i.value}),r.login(t.email,t.password,function(e){$(".inloggen_text").hide(),$(".uitloggen_text").show(),Router.route("products")})}function n(){o.setView(),o.setActionListener(i)}var r=t,o=e;return{main:n}},LogoutController=function(e,t){function i(e){r.logout(function(e){$(".inloggen_text").show(),$(".uitloggen_text").hide(),o.setView()})}function n(){o.setActionListener(i)}var r=t,o=e;return{main:n}},OrdersController=function(e,t){function i(t){r.getOrders(function(t){e.setView(t)})}function n(){o.setActionListener(i)}var r=t,o=e;return{main:n}},OrderController=function(e,t){function i(t){r.getOrder(function(t){e.setView(t)})}function n(){o.setActionListener(i)}var r=t,o=e;return{main:n}},ProductsController=function(e,t){function i(){o.getPage("",function(e){s.setView(e)})}function n(e){e.preventDefault();var t=$(this).serialize();o.getPage(t,function(e){s.loadProducts(e)})}function r(){s.setActionListener(i),s.setFilterListener(n)}var o=t,s=e;return{main:r}},RegisterController=function(e,t){function i(){event.preventDefault(),$("#regi_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,i){e[i.name]=i.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag;var t=!1,i=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];$.each(i,function(e,t){$("#"+t).removeClass("invalid")}),$.each(i,function(i,n){""==e[n]&&($("#"+n).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#register_error_message").show());var n=!1;return e.wachtwoord!=e.wachtwoord2&&(n=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!n&&void r.register(e,function(e){o.setView("/views/register/after_register.html")})}function n(){o.setView("/views/register/register.html"),o.setActionListener(i)}var r=t,o=e;return{main:n}},ResetPasswordController=function(e,t){function i(){console.log("in actionPerformed"),event.preventDefault(),$("#reset_password_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,i){e[i.name]=i.value});var t=!1,i=["wachtwoord","wachtwoord2","e_mailadres","security_answer"];$.each(i,function(e,t){$("#"+t).removeClass("invalid")}),$.each(i,function(i,n){""==e[n]&&($("#"+n).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#reset_error_message").show());var n=!1;return e.wachtwoord!=e.wachtwoord2&&(n=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!n&&(console.log("continued"),void r.resetpassword(e,function(e){o.setView("views/resetpassword/after_reset.html")}))}function n(){o.setView("views/resetpassword/resetpassword.html"),o.setActionListener(i)}var r=t,o=e;return{main:n}},ProductController=function(e,t){function i(t){e.setView(t)}function n(){t.GetProductInfo(i)}return{main:n,showView:i}},WishlistController=function(e,t){function i(){s.getWishlist(n)}function n(e){a.setView(e)}function r(){a.setActionListener(i),a.setDeleteListener(o)}function o(e,t){s.deleteFromWishlist(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:r}},AdminViewHelper=function(){function e(e){$(document).ready(e)}function t(e){document.title="Admin - AZ Games",$("#component").load("/views/admin/admin.html",function(){$.each(e,function(e,t){var i=$("#single_user").clone();$(i).find(".user__firstname").html(t.first_name),$(i).find(".user__firstname").attr("href","/admin_user/"+t.user_id),$(i).find(".user__insertion").html(t.insertion),$(i).find(".user__lastname").html(t.surname),$(i).find(".user__email").html(t.email),$(i).find(".user__phonenumber").html(t.phone_number),$("#users_body").append(i)}),$("#single_user").first().remove()})}return{setActionListener:e,setView:t}},AdminUserViewHelper=function(){function e(e){$(document).ready(e)}function t(e){$("#component").load("/views/adminuser/adminuser.html",function(){$("#delete_btn").attr("data-id",e.user_id),$("#first_name").val(e.first_name),$("#insertion").val(e.insertion),$("#surname").val(e.surname),$("#user_type").val(e.user_type),$("#email").val(e.email),$("#password").attr("placeholder","Vul hier iets in om het wachtwoord te veranderen"),$("#gender").val(e.gender),$("#date_of_birth").val(e.date_of_birth),$("#phone_number").val(e.phone_number),$("#is_active").val(e.is_active),$("#user_id").val(e.user_id);var t=new Date,n=new Date(e.date_of_birth);for(i=1;i<32;i++)i==n.getDate()?$("#dag").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<t.getFullYear()+1;i++)i==n.getFullYear()?$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"'>"+i+"</option>");$("#maand").val(n.getMonth())})}function n(e){$(document).on("submit","#userform",e)}function r(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault(),e($(this).data("id"))})}return{setActionListener:e,setView:t,setSaveListener:n,setDeleteListener:r}},CartViewHelper=function(){function e(e){""!=e&&e.forEach(function(e,t){i(e)})}function t(e){e=parseFloat(e)+parseFloat($(".cart__total .price").html().substr(1)),$(".cart__total .price").html("€"+parseFloat(e).toFixed(2))}function i(e){var i=$("<div>").html($(".sidebar__content__tmp").html());i.find(".cart__item__title").html(e.title),i.find(".cart__item__price").html("€"+e.price.toFixed(2)),i.find(".cart__item__image img").attr("src",e.image),i.find(".cart__item").attr("data-id",e.ean_number),$(".cart").append(i);var n=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(n)+1),t(e.price)}function n(e){$(document).ready(e)}function r(e){$("body").on("click",".addtocart",function(t){t.preventDefault();var i=$(this).data("id");e(i),$(this).closest("#to_shop_cart").find("#shop_cart").fadeTo(0,100).delay(1e3).fadeTo(600,0)})}function o(e){$("body").on("click",".cart__item__remove",function(i){var n=$(this).parent(),r=$(this).parent().data("id");$(n).addClass("cart__item--removed"),$(n).on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd",function(){$(this).remove()});var o=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(o)-1),e(r),t(-$(n).find(".cart__item__price").html().substr(1))})}return{setView:e,addItem:i,updateTotalPrice:t,setActionListener:n,setAddProductListener:r,setRemoveListener:o}},ErrorViewHelper=function(){function e(){document.title="Oeps - AZ Games",$("#component").load("/views/error/error.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},FavoriteListViewHelper=function(){function e(e){document.title="Favoritelist - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="favoritelist"></div></div>'),t(e)}function t(e){$("#favoritelist").load("/views/favoritelist/favoritelist.html",function(){var t=0,i=0;$.each(e,function(e,n){var r=$("<div>").append($("#favorite__list__item").clone());t+=1,$(r).find(".favorite__list__id").append(t),$(r).find(".favorite__list__image img").attr("src",n.image),$(r).find(".favorite__list__title").html(n.title),$(r).find(".favorite__list__price").append("€ "+n.price),$(r).find(".favorite__list__platform").append(PlatformLogo(n.platform)),$(r).find(".favorite__list__availability").append(BeschikbaarheidKleur(n.stock)),$(r).find(".favorite__list__likebutton").append(),$(r).find("#delete_btn").attr("data-id",n.ean_number),$(r).find("#cart_btn").attr("data-id",n.ean_number),$("#favorite__list").append(r),i++}),0==i&&$("#favoritelist_error_message").show(),$("#favorite__list__item").first().remove()})}function i(e){$(document).ready(e)}function n(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var i=$(this).data("id"),n=$(this).closest(".row");e(i,n)})}function r(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadFavoritelist:t,setActionListener:i,setDeleteListener:n,hideItem:r}},CheckoutViewHelper=function(){function e(e){document.title="Bestellen - AZ Games",$("#component").load("/views/checkout/checkout.html",function(){void 0!=e&&""!=e?($.each(e,function(e,t){var i=$("#product").clone();$(i).find(".product__title").html(t.title),$(i).find(".product__image img").attr("src",t.image),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$("#product__list").append(i),$("#product__list").append("<hr />")}),$("#order_info .order__navigate").first().removeClass("disabled")):$("#product__list").html("<div class='message message--info'>Je winkelwagen is nog leeg, stop er producten in om deze te kunnen bestellen.</div>"),$("#product").first().remove(),$("#total").appendTo("#product__list"),$(".total__price").html($(".cart__total .price").html());var t=new Date;t.setDate(t.getDate()+1),$(".delivery_date").html(t.getDate()+" "+t.toLocaleString("nl-NL",{month:"long"})),$(".delivery__calendar__month").html(t.toLocaleString("nl-NL",{month:"short"}).toUpperCase()),$(".delivery__calendar__day").html(t.getDate()),UserHelper.getUserInfo(function(e){$(".adres__name").html(e.first_name+" "+e.insertion+" "+e.surname),$(".adres__street").html(e.address.street+" "+e.address.house_number),$(".adres__postalcode").html(e.address.postal_code+" "+e.address.city.toUpperCase())})})}function t(){$("ul.order-steps li").removeClass("active"),$("ul.order-steps li a").addClass("disabled"),$("ul.order-steps li.confirmation").addClass("active"),$(".order__step").removeClass("order__step--active"),$("#confirmation").addClass("order__step--active")}function i(){$(".cart").empty(),$(".cart_button .count").html("0"),$(".cart__total .price").html("€00.00")}function n(e){$(document).ready(e)}function r(e){$(document).on("submit","#orderform",e)}return{setView:e,setActionListener:n,setOrderListener:r,finishOrder:t,clearCart:i}},LoginViewHelper=function(){function e(){document.title="Inloggen - AZ Games",$("#component").load("/views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},LogoutViewHelper=function(){function e(){document.title="Uitloggen - AZ Games",$("#component").load("/views/logout/logout.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},OrderViewHelper=function(){function e(e){document.title="Bestelgeschiedenis - AZ Games",$("#component").load("/views/order/order.html",function(){var t=new Date(e.order_date);switch(e.shipping_method){case"deliver":e.shipping_method="Bezorgen (via PostNL)";break;case"pickup":e.shipping_method="Ophalen"}$(".order__date").html(t.getDate()+" "+t.toLocaleString("nl-NL",{month:"long"})+" "+t.getFullYear()),$(".order__paymentmethod").html(e.payment_method),$(".order__shippping").html(e.shipping_method),$.each(e.products,function(e,t){var i=$("#product").clone();$(i).find(".product__title").html(t.title),$(i).find(".product__image img").attr("src",t.image),$(i).find(".product__amount").html("<b>Aantal:</b> "+t.amount),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$("#product__list").append(i),$("#product__list").append("<hr />")}),$("#product").first().remove(),$("#total").appendTo("#product__list"),$(".total__price").html("€ "+e.total_order_price)})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},OrdersViewHelper=function(){function e(e){document.title="Bestelgeschiedenis - AZ Games",$("#component").load("/views/orders/orders.html",function(){$.each(e,function(e,t){var i=$("#single_order").clone(),n=new Date(t.order_date);switch(t.shipping_method){case"deliver":t.shipping_method="Bezorgen (via PostNL)";break;case"pickup":t.shipping_method="Ophalen"}$(i).find(".order__number").html(t.order_number),$(i).find(".order__date").html(n.getDate()+" "+n.toLocaleString("nl-NL",{month:"long"})+" "+n.getFullYear()),$(i).find(".order__price").html("€ "+t.total_order_price),$(i).find(".order__paymentmethod").html(t.payment_method),$(i).find(".order__shippping").html(t.shipping_method),$(i).find(".order__link a").attr("href","/order/"+t.order_number),$("#orders_body").append(i)}),$("#single_order").first().remove()})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},ProductsViewHelper=function(){function e(e){document.title="Producten - AZ Games",$("#component").html('<div class="col-12"><div class="col-3" id="filters"></div><div class="col-9" id="products"></div></div>'),$("#filters").load("/views/products/filters.html"),t(e)}function t(e){$("#products").load("/views/products/products.html",function(){$.each(e,function(e,t){var i=$("<div>").append($("#product__list__item").clone());$(i).find(".product__title").html(t.title),$(i).find(".product__subtitle").append(t.genre+" | PEGI "+t.pegi_age+" | "+PlatformLogo(t.platform)),$(i).find(".product__description").html(n(t.description)),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$(i).find("#buttons__info, .product__image a, .product__title").attr("href","product/"+t.ean_number),$(i).find(".product__image img").attr("src",t.image),$(i).find(".addtocart").attr("data-id",t.ean_number),$("#product__list").append(i)}),$("#product__list__item").first().remove()})}function n(e){var t=50,n=e.split(" ");if(n.length>t){var r="";for(i=0;i<t;i++)r+=n[i]+" ";return r+"..."}return e}function r(e){$(document).ready(e)}function o(e){$("#component").off().on("change","input[type=checkbox]",function(e){$("#product_filter").submit()}),$("#component").on("change keyup","input[name=price-max], input[name=price-min]",function(e){null==$("#pricemin").val()?$("#pricemin").val(0):$("#product_filter").submit()}),$("#component").on("submit","#product_filter",e)}return{setView:e,loadProducts:t,setActionListener:r,setFilterListener:o}},RegisterViewHelper=function(){function e(e){document.title="Registreren - AZ Games",$("#component").load(e,function(){var e=new Date;for(i=1;i<32;i++)$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<e.getFullYear()+1;i++)2e3!=i?$("#jaar").append("<option value='"+i+"'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>")})}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}},ProductViewHelper=function(){function e(e){document.title=e.title+" - AZ Games",$("#component").load("/views/single_product/single_product.html",function(){$(".singleproduct__image img").attr("src",e.image),$(".singleproduct__title").html(e.title),$(".singleproduct__price").html("€ "+e.price.toFixed(2)),$(".singleproduct__ean").append(e.ean_number),$(".singleproduct__platform").append(PlatformLogo(e.platform)),$(".singleproduct__publisher").append(PlatformLogo(e.publisher)),$(".singleproduct__pegi").append(e.pegi_age),
$(".singleproduct__genre").append(e.genre),$(".singleproduct__descr").html(e.description),$(".addtocart").attr("data-id",e.ean_number),UserHelper.isLogedIn()?$(".addToWishlistButton").attr("onclick","WishlistHelper.addItem("+e.ean_number+");"):$(".addToWishlistButton").hide();var t=new Date(e.release_date),i=["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"];$(".singleproduct__releasedate").append(t.getDay()+" "+i[t.getMonth()]+" "+t.getFullYear())})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},WishlistViewHelper=function(){function e(e){document.title="Wishlist - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="wishlist"></div></div>'),t(e)}function t(e){$("#wishlist").load("/views/wishlist/wishlist.html",function(){var t=0,i=0;$.each(e,function(e,n){var r=$("<div>").append($("#wish__list__item").clone());t+=1,$(r).find(".wish__list__id").append(t),$(r).find(".wish__list__image img").attr("src",n.image),$(r).find(".wish__list__title").html(n.title),$(r).find(".wish__list__price").append("€ "+n.price),$(r).find(".wish__list__platform").append(PlatformLogo(n.platform)),$(r).find(".wish__list__availability").append(BeschikbaarheidKleur(n.stock)),$(r).find(".wish__list__likebutton").append(),$(r).find("#delete_btn").attr("data-id",n.ean_number),$(r).find("#cart_btn").attr("data-id",n.ean_number),$("#wish__list").append(r),i++}),0==i&&$("#wishlist_error_message").show(),$("#wish__list__item").first().remove()})}function i(e){$(document).ready(e)}function n(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var i=$(this).data("id"),n=$(this).closest(".row");e(i,n)})}function r(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadWishlist:t,setActionListener:i,setDeleteListener:n,hideItem:r}},ResetPasswordViewHelper=function(){function e(e){document.title="Inloggen - AZ Games",$("#component").load(e)}function t(e){$("#component").on("submit","#resetform",e)}return{setView:e,setActionListener:t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbm9ydG9vbHMuanMiLCJ0b29sdGlwLmpzIiwiaGVscGVycy9jb29raWUuanMiLCJoZWxwZXJzL2Zhdm9yaXRlbGlzdC5qcyIsImhlbHBlcnMvZ2xvYmFsLmpzIiwiaGVscGVycy91c2VyLmpzIiwiaGVscGVycy93aXNobGlzdC5qcyIsIm9yZGVyLmpzIiwicm91dGVyLmpzIiwic2lkZWJhci5qcyIsImhlbHBlcnMvc2VyaWFsaXplb2JqZWN0LmpzIiwiYWRtaW51c2VyX21vZGVsLmpzIiwiYWRtaW5fbW9kZWwuanMiLCJjYXJ0X21vZGVsLmpzIiwiY2hlY2tvdXRfbW9kZWwuanMiLCJmYXZvcml0ZWxpc3RfbW9kZWwuanMiLCJsb2dpbl9tb2RlbC5qcyIsImxvZ291dF9tb2RlbC5qcyIsIm9yZGVyc19tb2RlbC5qcyIsIm9yZGVyX21vZGVsLmpzIiwicHJvZHVjdHNfbW9kZWwuanMiLCJyZWdpc3Rlcl9tb2RlbC5qcyIsInJlc2V0cGFzc3dvcmRfbW9kZWwuanMiLCJzaW5nbGVfcHJvZHVjdF9tb2RlbC5qcyIsInVzZXJfbW9kZWwuanMiLCJ3aXNobGlzdF9tb2RlbC5qcyIsImFkbWludXNlcl9jb250cm9sbGVyLmpzIiwiYWRtaW5fY29udHJvbGxlci5qcyIsImNhcnRfY29udHJvbGxlci5qcyIsImNoZWNrb3V0X2NvbnRyb2xsZXIuanMiLCJkZWxldGVfY29udHJvbGxlci5qcyIsImVycm9yX2NvbnRyb2xsZXIuanMiLCJmYXZvcml0ZWxpc3RfY29udHJvbGxlci5qcyIsImxvZ2luX2NvbnRyb2xsZXIuanMiLCJsb2dvdXRfY29udHJvbGxlci5qcyIsIm9yZGVyc19jb250cm9sbGVyLmpzIiwib3JkZXJfY29udHJvbGxlci5qcyIsInByb2R1Y3RzX2NvbnRyb2xsZXIuanMiLCJyZWdpc3Rlcl9jb250cm9sbGVyLmpzIiwicmVzZXRwYXNzd29yZF9jb250cm9sbGVyLmpzIiwic2luZ2xlX3Byb2R1Y3RfY29udHJvbGxlci5qcyIsIndpc2hsaXN0X2NvbnRyb2xsZXIuanMiLCJhZG1pbi9hZG1pbl92aWV3LmpzIiwiYWRtaW51c2VyL2FkbWludXNlcl92aWV3LmpzIiwiY2FydC9jYXJ0X3ZpZXcuanMiLCJlcnJvci9lcnJvcl92aWV3LmpzIiwiZmF2b3JpdGVsaXN0L2Zhdm9yaXRlbGlzdF92aWV3LmpzIiwiY2hlY2tvdXQvY2hlY2tvdXRfdmlldy5qcyIsImxvZ2luL2xvZ2luX3ZpZXcuanMiLCJsb2dvdXQvbG9nb3V0X3ZpZXcuanMiLCJvcmRlci9vcmRlcl92aWV3LmpzIiwib3JkZXJzL29yZGVyc192aWV3LmpzIiwicHJvZHVjdHMvcHJvZHVjdHNfdmlldy5qcyIsInJlZ2lzdGVyL3JlZ2lzdGVyX3ZpZXcuanMiLCJzaW5nbGVfcHJvZHVjdC9zaW5nbGVfcHJvZHVjdF92aWV3LmpzIiwid2lzaGxpc3Qvd2lzaGxpc3Rfdmlldy5qcyIsInJlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZF92aWV3LmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtTG9nbyIsInBsYXRmb3JtbmFhbSIsInRvVXBwZXJDYXNlIiwiQmVzY2hpa2JhYXJoZWlkS2xldXIiLCJzdG9ja3ZhbHVlIiwiZ2V0T2Zmc2V0IiwiZWwiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0Iiwid2luZG93Iiwic2Nyb2xsWCIsInRvcCIsInNjcm9sbFkiLCJDb29raWVIZWxwZXIiLCJ0aGlzIiwiZ2V0Q29va2llIiwibmFtZSIsImNvb2tpZXMiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwiaSIsImxlbmd0aCIsInRyaW0iLCJjcmVhdGVDb29raWUiLCJ2YWx1ZSIsImQiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJkZWxldGVDb29raWUiLCJGYXZvcml0ZUxpc3RIZWxwZXIiLCJhZGRJdGVtIiwiZWFuX251bWJlciIsIiQiLCJhamF4IiwidXJsIiwidHlwZSIsImRhdGFUeXBlIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInN1Y2Nlc3MiLCJ0b2dnbGVDbGFzcyIsImFsZXJ0IiwiZXJyb3IiLCJ4aHIiLCJzdGF0dXMiLCJzaG93TG9hZFNjcmVlbiIsImh0bWwiLCJvbkxvYWRQYWdlIiwiZW1wdHkiLCJjbG9uZSIsImFwcGVuZFRvIiwiVXNlckhlbHBlciIsImlzQWRtaW4iLCJjc3MiLCJoaWRlIiwiaXNDdXN0b21lciIsImlzTG9nZWRJbiIsImFjY2Vzc1Rva2VuIiwidW5kZWZpbmVkIiwidXNlcnR5cGUiLCJkZWNvZGVUb2tlbiIsInBheWxvYWQiLCJwYXJzZSIsImF0b2IiLCJnZXRVc2VySW5mbyIsImNhbGxiYWNrIiwiUm91dGVyIiwicm91dGUiLCJXaXNobGlzdEhlbHBlciIsIm9uIiwiZXZlbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJoYXNDbGFzcyIsInN0ZXAiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwidmFsIiwicGFyZW50cyIsImZpbmQiLCJzaG93IiwiYXR0ciIsImhpc3RvcnkiLCJpc0ludGVybmFsIiwicGFydGljbGVzIiwiZ2V0UGFydGljbGVzIiwiUHJvZHVjdHNDb250cm9sbGVyIiwiUHJvZHVjdHNWaWV3SGVscGVyIiwiUHJvZHVjdHNNb2RlbCIsIm1haW4iLCJQcm9kdWN0Q29udHJvbGxlciIsIlByb2R1Y3RWaWV3SGVscGVyIiwiUHJvZHVjdE1vZGVsIiwiUmVnaXN0ZXJDb250cm9sbGVyIiwiUmVnaXN0ZXJWaWV3SGVscGVyIiwiUmVnaXN0ZXJNb2RlbCIsIkxvZ2luQ29udHJvbGxlciIsIkxvZ2luVmlld0hlbHBlciIsIkxvZ2luTW9kZWwiLCJMb2dvdXRDb250cm9sbGVyIiwiTG9nb3V0Vmlld0hlbHBlciIsIkxvZ291dE1vZGVsIiwiUmVzZXRQYXNzd29yZENvbnRyb2xsZXIiLCJSZXNldFBhc3N3b3JkVmlld0hlbHBlciIsIlJlc2V0UGFzc3dvcmRNb2RlbCIsIldpc2hsaXN0Q29udHJvbGxlciIsIldpc2hsaXN0Vmlld0hlbHBlciIsIldpc2hsaXN0TW9kZWwiLCJBZG1pbkNvbnRyb2xsZXIiLCJBZG1pblZpZXdIZWxwZXIiLCJBZG1pbk1vZGVsIiwiQWRtaW5Vc2VyQ29udHJvbGxlciIsIkFkbWluVXNlclZpZXdIZWxwZXIiLCJBZG1pblVzZXJNb2RlbCIsIkZhdm9yaXRlTGlzdENvbnRyb2xsZXIiLCJGYXZvcml0ZUxpc3RWaWV3SGVscGVyIiwiRmF2b3JpdGVMaXN0TW9kZWwiLCJDaGVja291dENvbnRyb2xsZXIiLCJDaGVja291dFZpZXdIZWxwZXIiLCJDaGVja291dE1vZGVsIiwiT3JkZXJzQ29udHJvbGxlciIsIk9yZGVyc1ZpZXdIZWxwZXIiLCJPcmRlcnNNb2RlbCIsIk9yZGVyQ29udHJvbGxlciIsIk9yZGVyVmlld0hlbHBlciIsIk9yZGVyTW9kZWwiLCJFcnJvckNvbnRyb2xsZXIiLCJFcnJvclZpZXdIZWxwZXIiLCJ3cml0ZUhpc3RvcnkiLCJzY3JvbGxUbyIsImluZGV4T2YiLCJsb2NhdGlvbiIsInN1YnN0cmluZyIsImJhc2VVcmwiLCJvYmplY3QiLCJ0aXRsZSIsInB1c2hTdGF0ZSIsInJlYWR5IiwidG9nZ2xlU2lkZWJhciIsInNpZGViYXIiLCJmb3JjZUNsb3NlIiwiY2xpY2siLCJwYXJlbnQiLCJjb250ZW50IiwicG9zaXRpb24iLCJ0b29sdGlwIiwiYXBwZW5kIiwib3V0ZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwicmVtb3ZlIiwiZm4iLCJzZXJpYWxpemVPYmplY3QiLCJvIiwiYSIsInNlcmlhbGl6ZUFycmF5IiwiZWFjaCIsInB1c2giLCJpZCIsImdldFBhZ2UiLCJsb2FkIiwic2F2ZVVzZXJJbmZvIiwiZGF0ZV9vZl9iaXJ0aCIsIlVUQyIsImphYXIiLCJtYWFuZCIsImRhZyIsInVzZXJfaWQiLCJjb250ZW50VHlwZSIsImRlbGV0ZVVzZXIiLCJDYXJ0TW9kZWwiLCJnZXRDYXJ0IiwiY2FydCIsImFkZFByb2R1Y3QiLCJwcmljZSIsImltYWdlIiwiY3VycmVudENhcnQiLCJyZW1vdmVQcm9kdWN0Iiwic3BsaWNlIiwiZ2V0T3JkZXJJbmZvcm1hdGlvbiIsInNhdmVPcmRlciIsIm9yZGVyRGF0YSIsImJ0d19wZXJjZW50YWdlIiwib3JkZXJfZGF0ZSIsImRlbGl2ZXJ5X2Nvc3RzIiwiY29uc29sZSIsImxvZyIsImdldEZhdm9yaXRlbGlzdCIsImFkZFRvRmF2b3JpdGVsaXN0IiwiZGVsZXRlRnJvbUZhdm9yaXRlbGlzdCIsImxvZ2luIiwiZW1haWwiLCJwYXNzd29yZCIsImJ0b2EiLCJhY2Nlc3NfdG9rZW4iLCJsb2dvdXQiLCJnZXRPcmRlcnMiLCJvcmRlcl9pZCIsImdldE9yZGVyIiwiZmlsdGVyIiwicmVnaXN0ZXIiLCJmb3JtRGF0YSIsImVfbWFpbCIsImVfbWFpbGFkcmVzIiwid2FjaHR3b29yZCIsImZpcnN0X25hbWUiLCJ2b29ybmFhbSIsImluc2VydGlvbiIsInR1c3NlbnZvZWdzZWwiLCJzdXJuYW1lIiwiYWNodGVybmFhbSIsImdlbmRlciIsImJpcnRoX2RhdGUiLCJwaG9uZV9udW1iZXIiLCJtb2JpZWxfbnVtbWVyIiwic2VjcmV0X3F1ZXN0aW9uIiwic2VjdXJpdHlfcXVlc3Rpb24iLCJzZWNyZXRfcXVlc3Rpb25fYW5zd2VyIiwic2VjdXJpdHlfYW5zd2VyIiwicG9zdGFsX2NvZGUiLCJwb3N0Y29kZSIsIm51bWJlciIsImh1aXNudW1tZXIiLCJzdHJlZXRfbmFtZSIsInN0cmFhdG5hYW0iLCJjaXR5IiwicGxhYXRzIiwicmVzZXRwYXNzd29yZCIsIm5ld19wYXNzd29yZCIsInJlcGVhdF9wYXNzd29yZCIsIndhY2h0d29vcmQyIiwiZWFuIiwiR2V0UHJvZHVjdEluZm8iLCJVc2VyTW9kZWwiLCJ1c2VyaWQiLCJHZXRVc2VySW5mbyIsImdldFdpc2hsaXN0IiwiYWRkVG9XaXNobGlzdCIsInZpZXdEYXRhIiwid2lzaGxpc3RfaWQiLCJkZWxldGVGcm9tV2lzaGxpc3QiLCJTdHJpbmciLCJ2aWV3SGVscGVyIiwibW9kZWwiLCJWaWV3SGVscGVyIiwic2V0QWN0aW9uTGlzdGVuZXIiLCJzZXRTYXZlTGlzdGVuZXIiLCJzZXREZWxldGVMaXN0ZW5lciIsIk1vZGVsIiwic2V0VmlldyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIkNhcnRDb250cm9sbGVyIiwic2V0QWRkUHJvZHVjdExpc3RlbmVyIiwic2V0UmVtb3ZlTGlzdGVuZXIiLCJhY3Rpb25QZXJmb3JtZWQiLCJvcmRlciIsImZpbmlzaE9yZGVyIiwiY2xlYXJDYXJ0Iiwic2V0T3JkZXJMaXN0ZW5lciIsIkRlbGV0ZUNvbnRyb2xsZXIiLCJkaXZfdG9faGlkZSIsImhpZGVJdGVtIiwiZmllbGQiLCJmaWx0ZXJQcm9kdWN0cyIsImZpbHRlcnMiLCJzZXJpYWxpemUiLCJsb2FkUHJvZHVjdHMiLCJzZXRGaWx0ZXJMaXN0ZW5lciIsIm1hbmRhdG9yeUZpZWxkTWlzc2VzIiwibWFuZGF0b3J5RmllbGRzIiwibWFuRmllbGQiLCJwYXNzd29yZHNOb3RJZGVudGljYWwiLCJzaG93VmlldyIsImFjdGlvbiIsImtleSIsInVzZXIiLCJmaXJzdCIsInVzZXJfdHlwZSIsImlzX2FjdGl2ZSIsInRvZGF5IiwiZGF0ZU9mQmlydGgiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsIm9mZiIsIkNhcnRWaWV3SGVscGVyIiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRleCIsInVwZGF0ZVRvdGFsUHJpY2UiLCJuZXdQcmljZSIsInBhcnNlRmxvYXQiLCJzdWJzdHIiLCJ0b0ZpeGVkIiwiY2FydEl0ZW0iLCJhbW91bnQiLCJwYXJzZUludCIsImFkZFRvQ2FydCIsInByb2R1Y3RfaWQiLCJjbG9zZXN0IiwiZmFkZVRvIiwiZGVsYXkiLCJjYXJ0aXRlbSIsImV2ZW50SGFuZGxlciIsImxvYWRGYXZvcml0ZWxpc3QiLCJjdXJyZW50IiwiY291bnQiLCJmYXZvcml0ZV9fbGlzdF9faXRlbSIsInBsYXRmb3JtIiwic3RvY2siLCJzbGlkZVVwIiwicHJvZHVjdCIsInNldERhdGUiLCJ0b0xvY2FsZVN0cmluZyIsIm1vbnRoIiwiYWRkcmVzcyIsInN0cmVldCIsImhvdXNlX251bWJlciIsImRhdGUiLCJzaGlwcGluZ19tZXRob2QiLCJwYXltZW50X21ldGhvZCIsInByb2R1Y3RzIiwidG90YWxfb3JkZXJfcHJpY2UiLCJvcmRlcnMiLCJvcmRlcl9udW1iZXIiLCJnZW5yZSIsInBlZ2lfYWdlIiwiQ3V0U3RyaW5nIiwiZGVzY3JpcHRpb24iLCJ0ZXh0IiwiU2hvd0Ftb3VudCIsIldvcmRzQXJyYXkiLCJTaG9ydFN0cmluZyIsInN1Ym1pdCIsInZpZXdUb1Nob3ciLCJwdWJsaXNoZXIiLCJyZWxlYXNlX2RhdGUiLCJtb250aHMiLCJnZXREYXkiLCJsb2FkV2lzaGxpc3QiLCJ3aXNoX19saXN0X19pdGVtIl0sIm1hcHBpbmdzIjoiQUFDQSxRQUFBQSxjQUFBQyxHQUdBLE9BREFBLEVBQUFBLEVBQUFDLGVBSUEsSUFBQSxNQUNBLE1BQUEsK0NBQ0EsS0FBQSxNQUNBLE1BQUEsK0NBQ0EsS0FBQSxLQUNBLE1BQUEsbURBQ0EsS0FBQSxPQUNBLE1BQUEsZ0RBQ0EsS0FBQSxNQUNBLE1BQUEsK0NBQ0EsS0FBQSxNQUNBLE1BQUEsK0NBQ0EsS0FBQSxrQkFDQSxNQUFBLGtEQUNBLFNBQ0EsTUFBQUQsRUFHQSxLQUFBLFdBQ0EsTUFBQSx5REFDQSxLQUFBLFVBQ0EsTUFBQSx3REFDQSxLQUFBLGtCQUNBLE1BQUEscURBSUEsUUFBQUUsc0JBQUFDLEdBRUEsTUFBQUEsSUFBQSxFQUNBLDZEQUNBQSxHQUFBLEVBQ0EsK0RBRUFBLEVDbEJBLFFBQUFDLFdBQUFDLEdBSUEsTUFGQUEsR0FBQUEsRUFBQUMseUJBR0FDLEtBQUFGLEVBQUFFLEtBQUFDLE9BQUFDLFFBQ0FDLElBQUFMLEVBQUFLLElBQUFGLE9BQUFHLFNDMUJBLFFBQUFDLGdCQVNBQyxLQUFBQyxVQUFBLFNBQUFDLEdBSUEsSUFBQSxHQUZBQyxHQUFBQyxTQUFBQyxPQUFBQyxNQUFBLEtBRUFDLEVBQUEsRUFBQUEsRUFBQUosRUFBQUssT0FBQUQsSUFDQSxDQUNBLEdBQUFGLEdBQUFGLEVBQUFJLEdBQUFELE1BQUEs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QUEsZUFBQXFILE9BQUFpTSxHQUNBbEMsTUFHQSxHQUFBQSxHQUNBcFIsRUFBQSwyQkFBQW1ELE9BSUFuRCxFQUFBLHFCQUFBc1AsUUFBQTlILFdBR0EsUUFBQStGLEdBQUE0QixHQUVBblAsRUFBQWxCLFVBQUE4SCxNQUFBdUksR0FHQSxRQUFBMUIsR0FBQTBCLEdBRUFuUCxFQUFBLGNBQUE4UCxNQUFBdE4sR0FBQSxRQUFBLGNBQUEsU0FBQUUsR0FFQUEsRUFBQUMsZ0JBQ0EsSUFBQThKLEdBQUF6TSxFQUFBdEIsTUFBQTJCLEtBQUEsTUFDQWlPLEVBQUF0TyxFQUFBdEIsTUFBQW1TLFFBQUEsT0FDQTFCLEdBQUExQyxFQUFBNkIsS0FHQSxRQUFBQyxHQUFBRCxHQUVBQSxFQUFBd0MsT0FBQSxJQUFBLEdBQUFVLFFBQUEsS0FHQSxPQUNBN0QsUUFBQUEsRUFDQTBGLGFBQUFBLEVBQ0E5RixrQkFBQUEsRUFDQUUsa0JBQUFBLEVBQ0FjLFNBQUFBLElDekVBN0osd0JBQUEsV0FHQSxRQUFBaUosR0FBQXFGLEdBRUFsVSxTQUFBNEgsTUFBQSxzQkFFQTFHLEVBQUEsY0FBQWtJLEtBQUE4SyxHQUlBLFFBQUF6RixHQUFBMEQsR0FHQWpSLEVBQUEsY0FBQXdDLEdBQUEsU0FBQSxhQUFBeU8sR0FJQSxPQUNBdEQsUUFBQUEsRUFDQUosa0JBQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vUGxhdGZvcm0gTG9nbydzXHJcbmZ1bmN0aW9uIFBsYXRmb3JtTG9nbyhwbGF0Zm9ybW5hYW0pXHJcbntcclxuICAgIHBsYXRmb3JtbmFhbSA9IHBsYXRmb3JtbmFhbS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgc3dpdGNoIChwbGF0Zm9ybW5hYW0pXHJcbiAgICB7XHJcbiAgICAgICAgLy9wbGF0Zm9ybXNcclxuICAgICAgICBjYXNlIFwiUFMxXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9pY29ucy9wczEucG5nJyAvPlwiO1xyXG4gICAgICAgIGNhc2UgXCJQUzRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL3BzNC5wbmcnIC8+XCI7XHJcbiAgICAgICAgY2FzZSBcIlBDXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9pY29ucy93aW5kb3dzLnBuZycgLz5cIjtcclxuICAgICAgICBjYXNlIFwiWEJPWFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvaWNvbnMveGJveC5wbmcnIC8+XCI7XHJcbiAgICAgICAgY2FzZSBcIk5FU1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvaWNvbnMvbmVzLnBuZycgLz5cIjtcclxuICAgICAgICBjYXNlIFwiTjY0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9pY29ucy9uNjQucG5nJyAvPlwiO1xyXG4gICAgICAgIGNhc2UgXCJOSU5URU5ETyBTV0lUQ0hcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL3N3aXRjaC5wbmcnIC8+XCI7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHBsYXRmb3JtbmFhbTtcclxuXHJcbiAgICAgICAgLy9wdWJsaXNoZXJzXHJcbiAgICAgICAgY2FzZSBcIk5JTlRFTkRPXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9wdWJsaXNoZXJzL25pbnRlbmRvLnBuZycgLz5cIjtcclxuICAgICAgICBjYXNlIFwiVUJJU09GVFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvcHVibGlzaGVycy91Ymlzb2Z0LnBuZycgLz5cIjtcclxuICAgICAgICBjYXNlIFwiRUxFQ1RST05JQyBBUlRTXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9wdWJsaXNoZXJzL2VhLnBuZycgLz5cIjtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gQmVzY2hpa2JhYXJoZWlkS2xldXIoc3RvY2t2YWx1ZSl7XHJcbiAgICBcclxuICAgICAgICBpZiAoc3RvY2t2YWx1ZTw9MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvYXZhaWxhYmlsaXR5L2J1dHRvbnJlZC5wbmcnIC8+XCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdG9ja3ZhbHVlPj0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9hdmFpbGFiaWxpdHkvYnV0dG9uZ3JlZW4ucG5nJyAvPlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9ja3ZhbHVlXHJcbiAgICAgICAgfVxyXG59XHJcblxyXG4vLyBWYW4gV2lzaGxpc3QgcGFnaW5hXHJcbiQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCJzcGFuLmxpa2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwibGlrZS0tYWN0aXZlXCIpO1xyXG59KTtcclxuXHJcbi8vIFZhbiBTaW5nbGUgUHJvZHVjdCBwYWdpbmFcclxuJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcInNwYW4uc2luZ2xlX2xpa2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwic2luZ2xlX2xpa2UtLWFjdGl2ZVwiKTtcclxufSk7IiwiJChkb2N1bWVudCkub24oXCJtb3VzZWVudGVyXCIsIFwiLmhhc1Rvb2x0aXBcIiwgZnVuY3Rpb24oZXZlbnQpXHJcbntcclxuICAgIC8vIEdldCBjb250ZW50IGFuZCBwb3NpdGlvblxyXG4gICAgdmFyIGNvbnRlbnQgID0gJCh0aGlzKS5kYXRhKFwidG9vbHRpcFwiKTtcclxuICAgIHZhciBwb3NpdGlvbiA9IGdldE9mZnNldCh0aGlzKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdG9vbHRpcFxyXG4gICAgdmFyIHRvb2x0aXAgPSAkKFwiPGRpdiBjbGFzcz0ndG9vbHRpcCc+XCIgKyBjb250ZW50ICsgXCI8L2Rpdj5cIik7XHJcbiAgICAkKFwiYm9keVwiKS5hcHBlbmQodG9vbHRpcCk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIG5ldyBwb3NpdGlvbnNcclxuICAgIHBvc2l0aW9uLnRvcCAgPSBwb3NpdGlvbi50b3AgKyAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XHJcbiAgICBwb3NpdGlvbi5sZWZ0ID0gcG9zaXRpb24ubGVmdCArICgkKHRoaXMpLm91dGVyV2lkdGgoKSAvIDIpIC0gKCQoXCIudG9vbHRpcFwiKS5vdXRlcldpZHRoKCkgLyAyKTtcclxuXHJcbiAgICAvLyBDaGFuZ2UgcG9zaXRpb24gb2YgdG9vbHRpcFxyXG4gICAgdG9vbHRpcC5jc3MoXCJsZWZ0XCIsIHBvc2l0aW9uLmxlZnQpO1xyXG4gICAgdG9vbHRpcC5jc3MoXCJ0b3BcIiwgcG9zaXRpb24udG9wKTtcclxufSk7XHJcblxyXG4kKGRvY3VtZW50KS5vbihcIm1vdXNlbGVhdmVcIiwgXCIuaGFzVG9vbHRpcFwiLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgJChcImJvZHlcIikuZmluZChcIi50b29sdGlwXCIpLnJlbW92ZSgpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGdldE9mZnNldChlbClcclxue1xyXG4gICAgZWwgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsZWZ0OiBlbC5sZWZ0ICsgd2luZG93LnNjcm9sbFgsXHJcbiAgICAgICAgdG9wOiBlbC50b3AgKyB3aW5kb3cuc2Nyb2xsWVxyXG4gIH1cclxufSIsIi8qKlxyXG4gKiBIZWxwZXIgZm9yIGZpbmRpbmcsIGNyZWF0aW5nIGFuZCBkZWxldGluZyBjb29raWVzXHJcbiAqL1xyXG5mdW5jdGlvbiBDb29raWVIZWxwZXIoKVxyXG57XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgYSBjb29raWVcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgIE5hbWUgb2YgdGhlIGNvb2tpZVxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0Q29va2llID0gZnVuY3Rpb24obmFtZSlcclxuICAgIHtcclxuICAgICAgICB2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgY29va2llID0gY29va2llc1tpXS5zcGxpdChcIj1cIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29va2llWzBdLnRyaW0oKSA9PSBuYW1lKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29va2llWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgY29va2llXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICAgTmFtZSBvZiB0aGUgY29va2llXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgIFZhbHVlIG9mIHRoZSBjb29raWVcclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5jcmVhdGVDb29raWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSlcclxuICAgIHtcclxuICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7IFxyXG4gICAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArICgxKjI0KjYwKjYwKjEwMDApKTsgXHJcbiAgICAgICAgdmFyIGV4cGlyZXMgPSBcImV4cGlyZXM9XCIrIGQudG9VVENTdHJpbmcoKTsgXHJcblxyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWx1ZSArICc7JyArIGV4cGlyZXMgKyAnO3BhdGg9Lyc7IFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGEgY29va2llIGFuZCBpdCdzIHZhbHVlXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICBOYW1lIG9mIHRoZSBjb29raWVcclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5kZWxldGVDb29raWUgPSBmdW5jdGlvbihuYW1lKVxyXG4gICAge1xyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVDsnO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBIZWxwZXIgZm9yIGNhcnQgYWN0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gRmF2b3JpdGVMaXN0SGVscGVyKClcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIGEgY29va2llXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAgUHJvZGN1dCBJRCB0byByZW1vdmUgZm9tIHRoZSBjYXJcclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmFkZEl0ZW0gPSBmdW5jdGlvbihlYW5fbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2xvY2FsaG9zdDo4MDgxL2Zhdm9yaXRlbGlzdC9cIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJ1c2VyX2lkXCIpICsgXCIvXCIgKyBlYW5fbnVtYmVyLCAvLyBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2Zhdm9yaXRlbGlzdC9cIlxyXG4gICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe30pLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCZWFyZXIgXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwibGlrZS0tYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJQcm9kdWN0ICh2YW4gKGltKW9yZGVyIHVpdCAoaW0pb3JkZXIgaGlzdG9yeSkgc3VjY2Vzdm9sIHRvZWdldm9lZ2QgYWFuIHV3IGZhdm9yaWV0ZW4gbGlqc3QuXCIpOyAvLyBpbSBzdGFhdCB2b29yIGltYWdpbmFyeS9kZW5rYmVlbGRpZ1xyXG4gICAgICAgICAgICAgICAgLy8gQ29tbWVudCB0byBzZWxmID0gKE9SREVSICsgT1JERVIgSElTVE9SWSB2ZXJoYWFsIE5pZWxzKSArIChGQVZPUklFVEVOIExJSlNUIHZlcmhhYWwgSGFiYm8pIFNBTUVOVk9FR0VOIFNUUkFLUyBPUiBFTFNFLi4uISEhIVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIlByb2R1Y3QgKHZhbiAoaW0pb3JkZXIgdWl0IChpbSlvcmRlciBoaXN0b3J5KSBpcyBhbCBpbiBmYXZvcmlldGVuIGxpanN0LlwiKTtcclxuICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgdG8gc2VsZiA9IChPUkRFUiArIE9SREVSIEhJU1RPUlkgdmVyaGFhbCBOaWVscykgKyAoRkFWT1JJRVRFTiBMSUpTVCB2ZXJoYWFsIEhhYmJvKSBTQU1FTlZPRUdFTiBTVFJBS1MgT1IgRUxTRS4uLiEhISFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwidmFyIFJvdXRlciAgICAgICA9IG5ldyBSb3V0ZXIoKTtcclxudmFyIENvb2tpZUhlbHBlciA9IG5ldyBDb29raWVIZWxwZXIoKTtcclxudmFyIFVzZXJIZWxwZXIgICAgID0gbmV3IFVzZXJIZWxwZXIoKTtcclxudmFyIFdpc2hsaXN0SGVscGVyID0gbmV3IFdpc2hsaXN0SGVscGVyKCk7XHJcblxyXG5mdW5jdGlvbiBzaG93TG9hZFNjcmVlbigpXHJcbntcclxuICAgICQoXCIjY29tcG9uZW50XCIpLmh0bWwoJzxkaXYgY2xhc3M9XCJzcGlubmVyXCI+PGRpdiBjbGFzcz1cImJvdW5jZTFcIj48L2Rpdj48ZGl2IGNsYXNzPVwiYm91bmNlMlwiPjwvZGl2PjxkaXYgY2xhc3M9XCJib3VuY2UzXCI+PC9kaXY+IDwvZGl2PicpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gb25Mb2FkUGFnZSgpXHJcbntcclxuICAgICQoXCIubW1lbnVcIikuZW1wdHkoKTtcclxuICAgICQoXCIubmF2XCIpLmNsb25lKCkuYXBwZW5kVG8oXCIubW1lbnVcIik7XHJcblxyXG4gICAgaWYgKFVzZXJIZWxwZXIuaXNBZG1pbigpKVxyXG4gICAge1xyXG4gICAgICAgICQoXCIudmlzaWJsZS1hZG1pblwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgJChcIi52aXNpYmxlLWN1c3RvbWVyXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICAkKFwiLmlubG9nZ2VuX3RleHRcIikuaGlkZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoVXNlckhlbHBlci5pc0N1c3RvbWVyKCkpXHJcbiAgICB7XHJcbiAgICAgICAgJChcIi52aXNpYmxlLWN1c3RvbWVyXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICAkKFwiLmlubG9nZ2VuX3RleHRcIikuaGlkZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgICQoXCIudmlzaWJsZS1hZG1pblwiKS5oaWRlKCk7XHJcbiAgICAgICAgJChcIi52aXNpYmxlLWN1c3RvbWVyXCIpLmhpZGUoKTtcclxuICAgICAgICAkKFwiI2lubG9nZ2VuX3RleHRcIikuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG4gICAgfVxyXG59IiwiLyoqXHJcbiAqIEhlbHBlciBmb3IgdXNlciByZWxhdGVkIHN0dWZmXHJcbiAqL1xyXG5mdW5jdGlvbiBVc2VySGVscGVyKClcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBhIGd1ZXN0IChub3QgbG9nZ2VkIGluKVxyXG4gICAgICovXHJcbiAgICB0aGlzLmlzTG9nZWRJbiA9IGZ1bmN0aW9uKClcclxuICAgIHtcclxuICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbiAhPSB1bmRlZmluZWQgJiYgYWNjZXNzVG9rZW4gIT0gXCJcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBpcyBhIGN1c3RvbWVyXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaXNDdXN0b21lciA9IGZ1bmN0aW9uKClcclxuICAgIHtcclxuICAgICAgICBpZiAoVXNlckhlbHBlci5pc0xvZ2VkSW4oKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciB1c2VydHlwZSA9IHRoaXMuZGVjb2RlVG9rZW4oKS51c2VydHlwZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1c2VydHlwZSA9PSBcImN1c3RvbWVyXCIgfHwgdXNlcnR5cGUgPT0gXCJhZG1pblwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBpcyBhZG1pblxyXG4gICAgICovXHJcbiAgICB0aGlzLmlzQWRtaW4gPSBmdW5jdGlvbigpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKFVzZXJIZWxwZXIuaXNMb2dlZEluKCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgdXNlcnR5cGUgPSB0aGlzLmRlY29kZVRva2VuKCkudXNlcnR5cGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodXNlcnR5cGUgPT0gXCJhZG1pblwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlIHRoZSBKV1QgdG9rZW5cclxuICAgICAqL1xyXG4gICAgdGhpcy5kZWNvZGVUb2tlbiA9IGZ1bmN0aW9uKClcclxuICAgIHtcclxuICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpO1xyXG5cclxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4gIT0gdW5kZWZpbmVkICYmIGFjY2Vzc1Rva2VuICAhPSBcIlwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBhY2Nlc3NUb2tlbi5zcGxpdChcIi5cIilbMV07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhdG9iKHBheWxvYWQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGluZm9ybWF0aW9uIG9mIHRoZSBjdXJyZW50IHVzZXJcclxuICAgICAqL1xyXG4gICAgdGhpcy5nZXRVc2VySW5mbyA9IGZ1bmN0aW9uKGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC91c2VyXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgUm91dGVyLnJvdXRlKFwiL2xvZ2luXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG59IiwiLyoqXHJcbiAqIEhlbHBlciBmb3IgY2FydCBhY3Rpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBXaXNobGlzdEhlbHBlcigpXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiBhIGNvb2tpZVxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgIFByb2RjdXQgSUQgdG8gcmVtb3ZlIGZvbSB0aGUgY2FyXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgdGhpcy5hZGRJdGVtID0gZnVuY3Rpb24oZWFuX251bWJlcilcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvd2lzaGxpc3QvXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwidXNlcl9pZFwiKSArIFwiL1wiICsgZWFuX251bWJlcixcclxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHt9KSxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImxpa2UtLWFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiUHJvZHVjdCBzdWNjZXN2b2wgdG9lZ2V2b2VnZCBhYW4gV2lzaGxpc3QuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIlByb2R1Y3QgaXMgYWwgaW4gV2lzaGxpc3QuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCIkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiYS5vcmRlcl9fbmF2aWdhdGVcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcyhcImRpc2FibGVkXCIpID09IGZhbHNlKVxyXG4gICAge1xyXG4gICAgICAgIC8vIEdldCB0aGUgb3JkZXIgc3RlcFxyXG4gICAgICAgIHZhciBzdGVwID0gICQodGhpcykuZGF0YShcInN0ZXBcIik7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgbmV3IG9yZGVyIHN0ZXAgYXMgYWN0aXZlXHJcbiAgICAgICAgJChcInVsLm9yZGVyLXN0ZXBzIGxpXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICQoXCJ1bC5vcmRlci1zdGVwcyBsaS5cIiArIHN0ZXApLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAkKFwiLm9yZGVyX19zdGVwXCIpLnJlbW92ZUNsYXNzKFwib3JkZXJfX3N0ZXAtLWFjdGl2ZVwiKTtcclxuICAgICAgICAkKFwiI1wiICsgc3RlcCkuYWRkQ2xhc3MoXCJvcmRlcl9fc3RlcC0tYWN0aXZlXCIpO1xyXG4gICAgfVxyXG59KVxyXG5cclxuJChkb2N1bWVudCkub24oXCJjaGFuZ2VcIiwgXCJzZWxlY3Qjc2hpcHBpbmdfbWV0aG9kXCIsIGZ1bmN0aW9uIChlKVxyXG57XHJcbiAgICB2YXIgdmFsID0gJCh0aGlzKS52YWwoKTtcclxuXHJcbiAgICBpZiAodmFsICE9IFwiXCIpXHJcbiAgICB7XHJcbiAgICAgICAgJCh0aGlzKS5wYXJlbnRzKFwiLm9yZGVyX19zdGVwXCIpLmZpbmQoXCIuYnRuLS1uZXh0XCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgJCh0aGlzKS5wYXJlbnRzKFwiLm9yZGVyX19zdGVwXCIpLmZpbmQoXCIuYnRuLS1uZXh0XCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgJChcIi5zaGlwcGluZ19fZmllbGRzXCIpLmhpZGUoKTtcclxuICAgICQoXCIuXCIgKyB2YWwgKyBcIl9maWVsZHNcIikuc2hvdygpO1xyXG59KVxyXG5cclxuJChkb2N1bWVudCkub24oXCJjaGFuZ2VcIiwgXCJzZWxlY3QjcGF5bWVudF9tZXRob2RcIiwgZnVuY3Rpb24gKGUpXHJcbntcclxuICAgIHZhciB2YWwgPSAkKHRoaXMpLnZhbCgpO1xyXG5cclxuICAgIGlmICh2YWwgIT0gXCJcIilcclxuICAgIHtcclxuICAgICAgICAkKHRoaXMpLnBhcmVudHMoXCIub3JkZXJfX3N0ZXBcIikuZmluZChcIi5idG4tLW5leHRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAkKHRoaXMpLnBhcmVudHMoXCIub3JkZXJfX3N0ZXBcIikuZmluZChcIi5idG4tLW5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICAkKHRoaXMpLnBhcmVudHMoXCIub3JkZXJfX3N0ZXBcIikuZmluZChcIi5idG4tLW5leHRcIikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAkKHRoaXMpLnBhcmVudHMoXCIub3JkZXJfX3N0ZXBcIikuZmluZChcIi5idG4tLW5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59KTsiLCJ2YXIgUm91dGVyID0gZnVuY3Rpb24gKClcclxue1xyXG4gICAgYmFzZVVybCA9IFwicHJvamVjdC13ZWJzaG9wL1wiO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdXRlKHVybCwgaGlzdG9yeSlcclxuICAgIHtcclxuICAgICAgICBpZiAoaXNJbnRlcm5hbCh1cmwpID09IGZhbHNlIHx8IHVybCA9PSBcIlwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBhcnRpY2xlcyA9IGdldFBhcnRpY2xlcyh1cmwpO1xyXG5cclxuICAgICAgICBzd2l0Y2gocGFydGljbGVzWzBdKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FzZSBcIlwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiaW5kZXguaHRtbFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwicHJvZHVjdHNcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBQcm9kdWN0c0NvbnRyb2xsZXIobmV3IFByb2R1Y3RzVmlld0hlbHBlcigpLCBuZXcgUHJvZHVjdHNNb2RlbCgpKS5tYWluKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInByb2R1Y3RcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBQcm9kdWN0Q29udHJvbGxlcihuZXcgUHJvZHVjdFZpZXdIZWxwZXIoKSwgbmV3IFByb2R1Y3RNb2RlbChwYXJ0aWNsZXNbMV0pKS5tYWluKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInJlZ2lzdGVyXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgUmVnaXN0ZXJDb250cm9sbGVyKG5ldyBSZWdpc3RlclZpZXdIZWxwZXIoKSwgbmV3IFJlZ2lzdGVyTW9kZWwoKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJsb2dpblwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IExvZ2luQ29udHJvbGxlcihuZXcgTG9naW5WaWV3SGVscGVyKCksIG5ldyBMb2dpbk1vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibG9nb3V0XCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgTG9nb3V0Q29udHJvbGxlcihuZXcgTG9nb3V0Vmlld0hlbHBlcigpLCBuZXcgTG9nb3V0TW9kZWwoKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyZWdpc3RlclwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IFJlZ2lzdGVyQ29udHJvbGxlcihuZXcgUmVnaXN0ZXJWaWV3SGVscGVyKCksIG5ldyBSZWdpc3Rlck1vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicmVzZXRwYXNzd29yZFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IFJlc2V0UGFzc3dvcmRDb250cm9sbGVyKG5ldyBSZXNldFBhc3N3b3JkVmlld0hlbHBlcigpLCBuZXcgUmVzZXRQYXNzd29yZE1vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwid2lzaGxpc3RcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBXaXNobGlzdENvbnRyb2xsZXIobmV3IFdpc2hsaXN0Vmlld0hlbHBlcigpLCBuZXcgV2lzaGxpc3RNb2RlbCgpKS5tYWluKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImFkbWluXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQWRtaW5Db250cm9sbGVyKG5ldyBBZG1pblZpZXdIZWxwZXIoKSwgbmV3IEFkbWluTW9kZWwoKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhZG1pbl91c2VyXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQWRtaW5Vc2VyQ29udHJvbGxlcihuZXcgQWRtaW5Vc2VyVmlld0hlbHBlcigpLCBuZXcgQWRtaW5Vc2VyTW9kZWwocGFydGljbGVzWzFdKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmYXZvcml0ZWxpc3RcIjogXHJcbiAgICAgICAgICAgICAgICBuZXcgRmF2b3JpdGVMaXN0Q29udHJvbGxlcihuZXcgRmF2b3JpdGVMaXN0Vmlld0hlbHBlcigpLCBuZXcgRmF2b3JpdGVMaXN0TW9kZWwoKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja291dFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IENoZWNrb3V0Q29udHJvbGxlcihuZXcgQ2hlY2tvdXRWaWV3SGVscGVyKCksIG5ldyBDaGVja291dE1vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwib3JkZXJzXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgT3JkZXJzQ29udHJvbGxlcihuZXcgT3JkZXJzVmlld0hlbHBlciwgbmV3IE9yZGVyc01vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwib3JkZXJcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBPcmRlckNvbnRyb2xsZXIobmV3IE9yZGVyVmlld0hlbHBlciwgbmV3IE9yZGVyTW9kZWwocGFydGljbGVzWzFdKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBuZXcgRXJyb3JDb250cm9sbGVyKG5ldyBFcnJvclZpZXdIZWxwZXIoKSkubWFpbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaGlzdG9yeSAhPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh1cmwgIT0gXCJcIiAmJiB0eXBlb2YgdXJsID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd3JpdGVIaXN0b3J5KHt9LCBcIkEtWiBHYW1lc1wiLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIExvYWQgc2NyZWVuIGFuZCBjbG9zZSBjYXJ0XHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpZGViYXJcIikucmVtb3ZlQ2xhc3MoXCJzaWRlYmFyLS1vcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5vdmVybGF5XCIpLnJlbW92ZUNsYXNzKFwib3ZlcmxheS0tdmlzaWJsZVwiKTtcclxuICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwic2lkZWJhci0tb3BlblwiKTtcclxuICAgICAgICAgICAgICAgIHNob3dMb2FkU2NyZWVuKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0b3Agb2YgcGFnZVxyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzSW50ZXJuYWwodXJsKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh1cmwuaW5kZXhPZihcImh0dHBcIikgIT0gLTEgfHwgdXJsLmluZGV4T2YoXCJ3d3dcIikgIT0gLTEgfHwgdXJsLmluZGV4T2YoXCJtYWlsdG9cIikgIT0gLTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRQYXJ0aWNsZXModXJsKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgL1xyXG4gICAgICAgIGlmICh1cmwuaW5kZXhPZihcIi9cIikgPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGJhc2UgdXJsIHNldCwgcmVtb3ZlIHRoZSBiYXNlIHVybFxyXG4gICAgICAgIGlmICh0aGlzLmJhc2VVcmwgIT0gbnVsbCAmJiB1cmwuaW5kZXhPZih0aGlzLmJhc2VVcmwpICE9IC0xKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZih0aGlzLmJhc2VVcmwpICsgdGhpcy5iYXNlVXJsLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdXJsLnNwbGl0KC9cXC8oLispPy8pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gd3JpdGVIaXN0b3J5KG9iamVjdCwgdGl0bGUsIHVybClcclxuICAgIHtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUob2JqZWN0LCB0aXRsZSwgdXJsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJvdXRlOiByb3V0ZVxyXG4gICAgfVxyXG59IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKVxyXG57XHJcbiAgICAkKFwiLnNpZGViYXItdG9nZ2xlXCIpLmNsaWNrKGZ1bmN0aW9uIChlKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBjbGljayBhY3Rpb25cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIElkIG9mIHRoZSBzaWRlYmFyIHRvIHRvZ2dsZVxyXG4gICAgICAgIHZhciBzaWRlYmFyID0gJCh0aGlzKS5kYXRhKFwic2lkZWJhclwiKTtcclxuXHJcbiAgICAgICAgdG9nZ2xlU2lkZWJhcigkKFwiI1wiICsgc2lkZWJhcikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5zaWRlYmFyX19jbG9zZVwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRvZ2dsZVNpZGViYXIoJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKSk7XHJcbiAgICB9KVxyXG5cclxuICAgICQoXCIub3ZlcmxheVwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRvZ2dsZVNpZGViYXIoJChcIi5zaWRlYmFyXCIpLCB0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZGViYXIoc2lkZWJhciwgZm9yY2VDbG9zZSlcclxuICAgIHtcclxuICAgICAgICBpZiAoZm9yY2VDbG9zZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICQoc2lkZWJhcikucmVtb3ZlQ2xhc3MoXCJzaWRlYmFyLS1vcGVuXCIpOyAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAkKHNpZGViYXIpLnRvZ2dsZUNsYXNzKFwic2lkZWJhci0tb3BlblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoXCIub3ZlcmxheVwiKS50b2dnbGVDbGFzcyhcIm92ZXJsYXktLXZpc2libGVcIik7XHJcbiAgICAgICAgJChcImJvZHlcIikudG9nZ2xlQ2xhc3MoXCJzaWRlYmFyLS1vcGVuXCIpO1xyXG4gICAgfVxyXG59KTsiLCIkLmZuLnNlcmlhbGl6ZU9iamVjdCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgdmFyIG8gPSB7fTtcclxuICAgIHZhciBhID0gdGhpcy5zZXJpYWxpemVBcnJheSgpO1xyXG4gICAgJC5lYWNoKGEsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChvW3RoaXMubmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoIW9bdGhpcy5uYW1lXS5wdXNoKSB7XHJcbiAgICAgICAgICAgICAgICBvW3RoaXMubmFtZV0gPSBbb1t0aGlzLm5hbWVdXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSBcIlwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvW3RoaXMubmFtZV0ucHVzaCh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlICE9IFwiXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9bdGhpcy5uYW1lXSA9IHRoaXMudmFsdWUgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBvO1xyXG59OyIsInZhciBBZG1pblVzZXJNb2RlbCA9IGZ1bmN0aW9uKGlkKVxyXG57XHJcbiAgICBmdW5jdGlvbiBnZXRQYWdlKGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9hZG1pbi91c2Vycy9cIiArIGlkLCAvL1wiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvXHJcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFbMF0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVVzZXJJbmZvKGRhdGEsIGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgIC8vIE1vZGlmeSBkYXRhIGJlZm9yZSBzZW5kaW5nIChhbHNvIGNvbnZlcnQgdG8gVVRDKVxyXG4gICAgICAgIGRhdGEuZGF0ZV9vZl9iaXJ0aCA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGEuamFhciwgZGF0YS5tYWFuZCwgZGF0YS5kYWcpKTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHllYXIsIG1vbnRoIGFuZCBkYXlcclxuICAgICAgICBkZWxldGUgZGF0YS5qYWFyO1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhLm1hYW5kO1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhLmRhZztcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2FkbWluL3VzZXJzL1wiICsgZGF0YS51c2VyX2lkLCAvL1wiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvXHJcbiAgICAgICAgICAgIHR5cGU6IFwiUEFUQ0hcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVVc2VyKHVzZXJfaWQsIGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9hZG1pbi91c2Vycy9cIiArIHVzZXJfaWQsIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9cclxuICAgICAgICAgICAgdHlwZTogXCJERUxFVEVcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvdmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldFBhZ2U6IGdldFBhZ2UsXHJcbiAgICAgICAgc2F2ZVVzZXJJbmZvOiBzYXZlVXNlckluZm8sXHJcbiAgICAgICAgZGVsZXRlVXNlcjogZGVsZXRlVXNlclxyXG4gICAgfVxyXG59IiwidmFyIEFkbWluTW9kZWwgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIGZ1bmN0aW9uIGdldFBhZ2UoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2FkbWluL3VzZXJzXCIsIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9cclxuICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRQYWdlOiBnZXRQYWdlXHJcbiAgICB9XHJcblxyXG59OyIsInZhciBDYXJ0TW9kZWwgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBjYXJ0IGl0ZW1zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldENhcnQoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGNhcnQgPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiY2FydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGNhcnQgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShjYXJ0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgcHJvZHVjdCB0byB0aGUgY2FydCBjb29raWUgYW5kIGRhdGFiYXNlIGlmIHRoZSB1c2VyIGlzIHJlZ2lzdGVyZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWRkUHJvZHVjdChpZCwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL3Byb2R1Y3RzL1wiICsgaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhcnQgPSB7ZWFuX251bWJlcjpkYXRhWzBdLmVhbl9udW1iZXIsIHRpdGxlOmRhdGFbMF0udGl0bGUsIHByaWNlOmRhdGFbMF0ucHJpY2UsIGltYWdlOmRhdGFbMF0uaW1hZ2V9O1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY2FydCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSBjYXJ0IGluIGNvb2tpZXNcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2FydCA9IENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJjYXJ0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2FydCA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29va2llSGVscGVyLmNyZWF0ZUNvb2tpZShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoW2NhcnRdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENhcnQgPSBKU09OLnBhcnNlKGN1cnJlbnRDYXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FydC5wdXNoKGNhcnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBDb29raWVIZWxwZXIuY3JlYXRlQ29va2llKFwiY2FydFwiLCBKU09OLnN0cmluZ2lmeShjdXJyZW50Q2FydCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIGl0ZW0gZnJvbSB0aGUgY2FydFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2ludH0gaWQgUHJvZHVjdCBpZFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZW1vdmVQcm9kdWN0KGlkKVxyXG4gICAge1xyXG4gICAgICAgIGNhcnQgPSBKU09OLnBhcnNlKENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJjYXJ0XCIpKTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY2FydC5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChjYXJ0W2ldLmVhbl9udW1iZXIgPT0gaWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhcnQuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgQ29va2llSGVscGVyLmNyZWF0ZUNvb2tpZShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoY2FydCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldENhcnQ6IGdldENhcnQsXHJcbiAgICAgICAgYWRkUHJvZHVjdDogYWRkUHJvZHVjdCxcclxuICAgICAgICByZW1vdmVQcm9kdWN0OiByZW1vdmVQcm9kdWN0XHJcbiAgICB9XHJcbn07IiwidmFyIENoZWNrb3V0TW9kZWwgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIGZ1bmN0aW9uIGdldE9yZGVySW5mb3JtYXRpb24oY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGNhcnQgPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKCdjYXJ0Jyk7XHJcblxyXG4gICAgICAgIGlmIChjYXJ0ICE9IHVuZGVmaW5lZCAmJiBjYXJ0ICE9IFwiXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKGNhcnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soW10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlT3JkZXIob3JkZXJEYXRhLCBjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAvLyBBcHBlbmQgZGF0YSBmb3JtIG90aGVyIHNvdXJjZXNcclxuICAgICAgICBvcmRlckRhdGEuc3RhdHVzICAgICAgICAgPSBcInBhaWRcIjtcclxuICAgICAgICBvcmRlckRhdGEuYnR3X3BlcmNlbnRhZ2UgPSAyMTtcclxuICAgICAgICBvcmRlckRhdGEub3JkZXJfZGF0ZSAgICAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIG9yZGVyRGF0YS5kZWxpdmVyeV9jb3N0cyA9IDMuOTU7XHJcbiAgICAgICAgb3JkZXJEYXRhLmNhcnQgICAgICAgICAgID0gSlNPTi5wYXJzZShDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiY2FydFwiKSk7XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9vcmRlcnNcIixcclxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KG9yZGVyRGF0YSksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5kZWxldGVDb29raWUoXCJjYXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic29tZXRpbmcgd2VudCB3cm9uZ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRPcmRlckluZm9ybWF0aW9uOiBnZXRPcmRlckluZm9ybWF0aW9uLFxyXG4gICAgICAgIHNhdmVPcmRlcjogc2F2ZU9yZGVyXHJcbiAgICB9XHJcbn07IiwidmFyIEZhdm9yaXRlTGlzdE1vZGVsID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICBmdW5jdGlvbiBHZXRGYXZvcml0ZUxpc3QoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vbG9jYWxob3N0OjgwODEvZmF2b3JpdGVsaXN0XCIsIC8vIFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvZmF2b3JpdGVsaXN0XCJcclxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBBZGRUb0Zhdm9yaXRlTGlzdCh2aWV3RGF0YSwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vbG9jYWxob3N0OjgwODEvZmF2b3JpdGVsaXN0L1wiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcInVzZXJfaWRcIikgLyorIFwiL1wiICsgdmlld0RhdGEuZWFuX251bWJlciovLCAvLyBodHRwczovL2FwaS5hei1nYW1lcy5ubC9mYXZvcml0ZWxpc3QvXHJcbiAgICAgICAgICAgIHR5cGU6IFwicG9zdFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAvL3VzZXJfaWQgOiB2aWV3RGF0YS51c2VyX2lkLCBET1VCVCBJRiBORUNFU1NBUlkgOnAgXHJcbiAgICAgICAgICAgICAgICBlYW5fbnVtYmVyIDogdmlld0RhdGEuZWFuX251bWJlclxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvdmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIERlbGV0ZUZyb21GYXZvcml0ZUxpc3QoZWFuLCBjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MS9mYXZvcml0ZWxpc3QvXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwidXNlcl9pZFwiKSArIFwiL1wiICsgU3RyaW5nKGVhbiksIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9mYXZvcml0ZWxpc3QvXHJcbiAgICAgICAgICAgIHR5cGU6IFwiREVMRVRFXCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIC8vIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcclxuICAgICAgICAgICAgLy8gZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpOyAvL21vZXQgZGF0YSBwZXIgc2UgbWVlZ2V2ZW4gYWFuIGNhbGxiYWNrP1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0RmF2b3JpdGVsaXN0OiBnZXRGYXZvcml0ZWxpc3QsXHJcbiAgICAgICAgYWRkVG9GYXZvcml0ZWxpc3Q6IGFkZFRvRmF2b3JpdGVsaXN0LFxyXG4gICAgICAgIGRlbGV0ZUZyb21GYXZvcml0ZWxpc3Q6IGRlbGV0ZUZyb21GYXZvcml0ZWxpc3RcclxuICAgIH1cclxufTsiLCJ2YXIgTG9naW5Nb2RlbCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgZnVuY3Rpb24gbG9naW4oZW1haWwsIHBhc3N3b3JkLCBjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlci9sb2dpblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCYXNpYyBcIiArIGJ0b2EoZW1haWwgKyBcIjpcIiArIHBhc3N3b3JkKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcHV0IHRva2VuIGluIGNvb2tpZVxyXG4gICAgICAgICAgICAgICAgQ29va2llSGVscGVyLmNyZWF0ZUNvb2tpZShcImFjY2Vzc190b2tlblwiLCBkYXRhLmFjY2Vzc190b2tlbik7XHJcbiAgICAgICAgICAgICAgICBDb29raWVIZWxwZXIuY3JlYXRlQ29va2llKFwidXNlcl9pZFwiLCBkYXRhLnVzZXJfaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICdyZWxvYWQnIHBhZ2VcclxuICAgICAgICAgICAgICAgIG9uTG9hZFBhZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaG93ICdub3QgZ29vZCBlbWFpbCBvciBwYXNzd29yZCB0byB1c2VyJ1xyXG4gICAgICAgICAgICAgICAgJChcIiNlcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyQoXCIjY29tcG9uZW50XCIpLmh0bWwoXCJlcnJvciBmdW5jdGlvblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvZ2luOiBsb2dpblxyXG4gICAgfVxyXG59OyIsInZhciBMb2dvdXRNb2RlbCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgZnVuY3Rpb24gbG9nb3V0KGNhbGxiYWNrKVxyXG4gICAge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC91c2VyL2xvZ291dFwiLCAvLz8gaHR0cDovLzg0Ljg0LjI0NS4yOToyNDMgPSBBUEktbG9jYXRpZT9cclxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IGdldENvb2tpZShcInVzZXJfaWRcIilcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgQ29va2llSGVscGVyLmRlbGV0ZUNvb2tpZShcImFjY2Vzc190b2tlblwiKTtcclxuICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5kZWxldGVDb29raWUoXCJ1c2VyX2lkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICdyZWxvYWQnIHBhZ2VcclxuICAgICAgICAgICAgICAgIG9uTG9hZFBhZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNob3cgJ25vdCBnb29kIGVtYWlsIG9yIHBhc3N3b3JkIHRvIHVzZXInXHJcbiAgICAgICAgICAgICAgICAkKFwiI2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vJChcIiNjb21wb25lbnRcIikuaHRtbChcImVycm9yIGZ1bmN0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENvb2tpZShuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IGNvb2tpZXNbaV0uc3BsaXQoXCI9XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb29raWVbMF0udHJpbSgpID09IG5hbWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvb2tpZVsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsb2dvdXQ6IGxvZ291dFxyXG4gICAgfVxyXG59OyIsInZhciBPcmRlcnNNb2RlbCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIG9yZGVyc1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRPcmRlcnMoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL29yZGVyc1wiLFxyXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCZWFyZXIgXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvdmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldE9yZGVyczogZ2V0T3JkZXJzLFxyXG4gICAgfVxyXG59OyIsInZhciBPcmRlck1vZGVsID0gZnVuY3Rpb24ob3JkZXJfaWQpXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBvcmRlclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRPcmRlcihjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvb3JkZXJzL1wiICsgb3JkZXJfaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0T3JkZXI6IGdldE9yZGVyLFxyXG4gICAgfVxyXG59OyIsInZhciBQcm9kdWN0c01vZGVsID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICBmdW5jdGlvbiBnZXRQYWdlKGZpbHRlciwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL3Byb2R1Y3RzP1wiICsgZmlsdGVyLCAvLz8gaHR0cDovLzg0Ljg0LjI0NS4yOToyNDMgPSBBUEktbG9jYXRpZT9cclxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0UGFnZTogZ2V0UGFnZVxyXG4gICAgfVxyXG59OyIsInZhciBSZWdpc3Rlck1vZGVsID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICBmdW5jdGlvbiByZWdpc3Rlcihmb3JtRGF0YSwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgLy8gTW9kaWZ5IGRhdGEgYmVmb3JlIHNlbmRpbmcgKGFsc28gY29udmVydCB0byBVVEMpXHJcbiAgICAgICAgZm9ybURhdGEuZGF0ZV9vZl9iaXJ0aCA9IG5ldyBEYXRlKERhdGUuVVRDKGZvcm1EYXRhLmphYXIsIGZvcm1EYXRhLm1hYW5kLCBmb3JtRGF0YS5kYWcpKTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHllYXIsIG1vbnRoIGFuZCBkYXlcclxuICAgICAgICBkZWxldGUgZm9ybURhdGEuamFhcjtcclxuICAgICAgICBkZWxldGUgZm9ybURhdGEubWFhbmQ7XHJcbiAgICAgICAgZGVsZXRlIGZvcm1EYXRhLmRhZztcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL3VzZXIvcmVnaXN0ZXJcIixcclxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGVfbWFpbCA6IGZvcm1EYXRhLmVfbWFpbGFkcmVzLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQgOiBmb3JtRGF0YS53YWNodHdvb3JkLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RfbmFtZSA6IGZvcm1EYXRhLnZvb3JuYWFtLFxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uIDogZm9ybURhdGEudHVzc2Vudm9lZ3NlbCxcclxuICAgICAgICAgICAgICAgIHN1cm5hbWUgOiBmb3JtRGF0YS5hY2h0ZXJuYWFtLFxyXG4gICAgICAgICAgICAgICAgZ2VuZGVyIDogZm9ybURhdGEuZ2VuZGVyLFxyXG4gICAgICAgICAgICAgICAgZGF0ZV9vZl9iaXJ0aCA6IGZvcm1EYXRhLmJpcnRoX2RhdGUsXHJcbiAgICAgICAgICAgICAgICBwaG9uZV9udW1iZXIgOiBmb3JtRGF0YS5tb2JpZWxfbnVtbWVyLFxyXG4gICAgICAgICAgICAgICAgc2VjcmV0X3F1ZXN0aW9uIDogZm9ybURhdGEuc2VjdXJpdHlfcXVlc3Rpb24sXHJcbiAgICAgICAgICAgICAgICBzZWNyZXRfcXVlc3Rpb25fYW5zd2VyIDogZm9ybURhdGEuc2VjdXJpdHlfYW5zd2VyLFxyXG4gICAgICAgICAgICAgICAgcG9zdGFsX2NvZGUgOiBmb3JtRGF0YS5wb3N0Y29kZSxcclxuICAgICAgICAgICAgICAgIG51bWJlciA6IGZvcm1EYXRhLmh1aXNudW1tZXIsXHJcbiAgICAgICAgICAgICAgICBzdHJlZXRfbmFtZSA6IGZvcm1EYXRhLnN0cmFhdG5hYW0sXHJcbiAgICAgICAgICAgICAgICBjaXR5IDogZm9ybURhdGEucGxhYXRzXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3JlZ2lfYXBpX2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyXHJcbiAgICB9XHJcbn07IiwidmFyIFJlc2V0UGFzc3dvcmRNb2RlbCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgZnVuY3Rpb24gcmVzZXRwYXNzd29yZChmb3JtRGF0YSwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZm9ybURhdGEpO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC91c2VyL3Jlc2V0cGFzc3dvcmRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGVtYWlsIDogZm9ybURhdGEuZV9tYWlsYWRyZXMsXHJcbiAgICAgICAgICAgICAgICBzZWNyZXRfcXVlc3Rpb25fYW5zd2VyIDogZm9ybURhdGEuc2VjdXJpdHlfYW5zd2VyLFxyXG4gICAgICAgICAgICAgICAgc2VjcmV0X3F1ZXN0aW9uIDogZm9ybURhdGEuc2VjdXJpdHlfcXVlc3Rpb24sXHJcbiAgICAgICAgICAgICAgICBuZXdfcGFzc3dvcmQgOiBmb3JtRGF0YS53YWNodHdvb3JkLFxyXG4gICAgICAgICAgICAgICAgcmVwZWF0X3Bhc3N3b3JkIDogZm9ybURhdGEud2FjaHR3b29yZDJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vJChcIiNjb21wb25lbnRcIikubG9hZChcInZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3Jlc2V0X3Bhc3N3b3JkX2FwaV9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc2V0cGFzc3dvcmQ6IHJlc2V0cGFzc3dvcmRcclxuICAgIH1cclxufTsiLCJ2YXIgUHJvZHVjdE1vZGVsID0gZnVuY3Rpb24oZWFuKVxyXG57XHJcbiAgICBmdW5jdGlvbiBHZXRQcm9kdWN0SW5mbyhjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvcHJvZHVjdHMvXCIgKyBlYW4sXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YVswXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBHZXRQcm9kdWN0SW5mbzogR2V0UHJvZHVjdEluZm9cclxuICAgIH1cclxufTsiLCJ2YXIgVXNlck1vZGVsID0gZnVuY3Rpb24odXNlcmlkKVxyXG57XHJcbiAgICBmdW5jdGlvbiBHZXRVc2VySW5mbyhjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlcnMvXCIgKyB1c2VyaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YVswXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBHZXRVc2VySW5mbzogR2V0VXNlckluZm9cclxuICAgIH1cclxufTsiLCJ2YXIgV2lzaGxpc3RNb2RlbCA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgZnVuY3Rpb24gZ2V0V2lzaGxpc3QoY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL3dpc2hsaXN0XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkVG9XaXNobGlzdCh2aWV3RGF0YSwgY2FsbGJhY2spXHJcbiAgICB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL3dpc2hsaXN0L1wiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcInVzZXJfaWRcIikgLyorIFwiL1wiICsgdmlld0RhdGEuZWFuX251bWJlciovLFxyXG4gICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgd2lzaGxpc3RfaWQgOiB2aWV3RGF0YS53aXNobGlzdF9pZCxcclxuICAgICAgICAgICAgICAgIC8vZWFuX251bWJlciA6IHZpZXdEYXRhLmVhbl9udW1iZXJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVGcm9tV2lzaGxpc3QoZWFuLCBjYWxsYmFjaylcclxuICAgIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvd2lzaGxpc3QvXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwidXNlcl9pZFwiKSArIFwiL1wiICsgU3RyaW5nKGVhbiksIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9cclxuICAgICAgICAgICAgdHlwZTogXCJERUxFVEVcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgLy8gY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICAvLyBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7IC8vbW9ldCBkYXRhIHBlciBzZSBtZWVnZXZlbiBhYW4gY2FsbGJhY2s/XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRXaXNobGlzdDogZ2V0V2lzaGxpc3QsXHJcbiAgICAgICAgYWRkVG9XaXNobGlzdDogYWRkVG9XaXNobGlzdCxcclxuICAgICAgICBkZWxldGVGcm9tV2lzaGxpc3Q6IGRlbGV0ZUZyb21XaXNobGlzdFxyXG4gICAgfVxyXG59OyIsInZhciBBZG1pblVzZXJDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcbiAgICBcclxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihnZXRQYWdlKTtcclxuICAgICAgICB2aWV3SGVscGVyLnNldFNhdmVMaXN0ZW5lcihzYXZlVXNlckluZm8pO1xyXG4gICAgICAgIHZpZXdIZWxwZXIuc2V0RGVsZXRlTGlzdGVuZXIoZGVsZXRlVXNlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGFnZSgpXHJcbiAgICB7XHJcbiAgICAgICAgTW9kZWwuZ2V0UGFnZShzZXRWaWV3KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc2V0VmlldyhkYXRhKSBcclxuICAgIHtcclxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVVzZXJJbmZvKGV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciBmb3JtRGF0YSA9ICQodGhpcykuc2VyaWFsaXplT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIE1vZGVsLnNhdmVVc2VySW5mbyhmb3JtRGF0YSwgZnVuY3Rpb24oZm9ybURhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhbGVydChcIkdlYnJ1aWtlciBzdWNjZXN2b2wgZ2XDvHBkYXRlLlwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVVc2VyKHVzZXJfaWQpXHJcbiAgICB7XHJcbiAgICAgICAgTW9kZWwuZGVsZXRlVXNlcih1c2VyX2lkLCBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhbGVydChcIkdlYnJ1aWtlciBzdWNjZXN2b2wgZ2VkZWxldGUuXCIpO1xyXG4gICAgICAgICAgICBSb3V0ZXIucm91dGUoXCIvYWRtaW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBBZG1pbkNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuICAgIFxyXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHtcclxuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGdldFBhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFBhZ2UoKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldFBhZ2Uoc2V0Vmlldyk7IC8vXCJcIiwgZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldFZpZXcoZGF0YSkgXHJcbiAgICB7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIENhcnRDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBjYXJ0IGl0ZW1zIGFuZCBwYXNzIHRoZSBpdGVtcyB0byB0aGUgVmlld0hlbHBlclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRDYXJ0KClcclxuICAgIHtcclxuICAgICAgICBNb2RlbC5nZXRDYXJ0KGZ1bmN0aW9uIChkYXRhKSB7IFZpZXdIZWxwZXIuc2V0VmlldyhkYXRhKTsgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBpdGVtIHRvIHRoZSBjYXJ0IGFuZCBwYXNzIGl0IHRvIHRoZSB2aWV3SGVscGVyXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7aW50fSBpZCAgSXRlbSBpZFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhZGRQcm9kdWN0KGlkKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmFkZFByb2R1Y3QoaWQsIGZ1bmN0aW9uIChkYXRhKSB7IFZpZXdIZWxwZXIuYWRkSXRlbShkYXRhKTsgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSBwcm9kdWN0IGFuZCBjYWxsIHRoZSB2aWV3SGVscGVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVByb2R1Y3QoaWQpXHJcbiAgICB7XHJcbiAgICAgICAgTW9kZWwucmVtb3ZlUHJvZHVjdChpZCwgZnVuY3Rpb24gKGRhdGEpIHsgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGdldENhcnQpO1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWRkUHJvZHVjdExpc3RlbmVyKGFkZFByb2R1Y3QpO1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0UmVtb3ZlTGlzdGVuZXIocmVtb3ZlUHJvZHVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBDaGVja291dENvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuICAgIFxyXG4gICAgLy8gRnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBhIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKGV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldE9yZGVySW5mb3JtYXRpb24oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9yZGVyKGV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciBmb3JtRGF0YSA9ICQodGhpcykuc2VyaWFsaXplT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIE1vZGVsLnNhdmVPcmRlcihmb3JtRGF0YSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIFZpZXdIZWxwZXIuZmluaXNoT3JkZXIoKTtcclxuICAgICAgICAgICAgVmlld0hlbHBlci5jbGVhckNhcnQoKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKFVzZXJIZWxwZXIuaXNMb2dlZEluKCkgPT0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSb3V0ZXIucm91dGUoXCIvbG9naW5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgICAgICAgICAgVmlld0hlbHBlci5zZXRPcmRlckxpc3RlbmVyKG9yZGVyKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIERlbGV0ZUNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHtcclxuICAgICAgICBcclxuICAgIH1cclxufSIsInZhciBFcnJvckNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyKVxyXG57XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcblxyXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHtcclxuICAgICAgICAvLyBzZXQgdmlldyB0byBsb2dpbiBmb3JtXHJcbiAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBGYXZvcml0ZUxpc3RDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgdmFyIHZpZXdEYXRhID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RmF2b3JpdGVsaXN0KClcclxuICAgIHtcclxuICAgICAgICBNb2RlbC5nZXRGYXZvcml0ZWxpc3Qoc2V0Vmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0VmlldyhkYXRhKVxyXG4gICAge1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0VmlldyhkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHtcclxuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGdldEZhdm9yaXRlbGlzdCk7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXREZWxldGVMaXN0ZW5lcihkZWxldGVGcm9tRmF2b3JpdGVsaXN0KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVGcm9tRmF2b3JpdGVsaXN0KGVhbiwgZGl2X3RvX2hpZGUpXHJcbiAgICB7XHJcbiAgICAgICAgTW9kZWwuZGVsZXRlRnJvbUZhdm9yaXRlbGlzdChlYW4sIGZ1bmN0aW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFZpZXdIZWxwZXIuaGlkZUl0ZW0oZGl2X3RvX2hpZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBMb2dpbkNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuICAgIFxyXG4gICAgLy8gRnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBhIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKGV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIC8vIFByZXZlbnQgc2VuZGluZyB0aGUgZm9ybVxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIC8vIExvb3AgdHJvdWdoIHRoZSBmb3JtIGRhdGEgYW5kIGdldCBhbGwgZmllbGRzXHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0ge307XHJcbiAgICAgICAgJC5lYWNoKCQodGhpcykuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKGksIGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGZvcm1EYXRhW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGxldCBtb2RlbCBzZW5kIGVtYWlsIGFuZCBwYXNzd29yZCB0byBBUElcclxuICAgICAgICBNb2RlbC5sb2dpbihmb3JtRGF0YS5lbWFpbCwgZm9ybURhdGEucGFzc3dvcmQsIGZ1bmN0aW9uIG9uU3VjY2VzcyhkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIHNob3cgdWl0bG9nZ2VuIGJ1dHRvblxyXG4gICAgICAgICAgICAkKFwiLmlubG9nZ2VuX3RleHRcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKFwiLnVpdGxvZ2dlbl90ZXh0XCIpLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgIFJvdXRlci5yb3V0ZShcInByb2R1Y3RzXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gc2V0IHZpZXcgdG8gbG9naW4gZm9ybVxyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0VmlldygpO1xyXG5cclxuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIGVtYWlsIGFuZCBwYXNzd29yZDsgY2xpY2tzICdsb2dpbic6IFZJRVcgbm90aWNlcyB0aGlzIGFuZCByZWFjdHNcclxuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGFjdGlvblBlcmZvcm1lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBMb2dvdXRDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcbiAgICBcclxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcclxuICAgIGZ1bmN0aW9uIGFjdGlvblBlcmZvcm1lZChldmVudClcclxuICAgIHtcclxuICAgICAgICBNb2RlbC5sb2dvdXQoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgLy8gc2hvdyB1aXRsb2dnZW4gYnV0dG9uXHJcbiAgICAgICAgICAgICQoXCIuaW5sb2dnZW5fdGV4dFwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoXCIudWl0bG9nZ2VuX3RleHRcIikuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHZpZXcgdG8gbG9naW4gZm9ybVxyXG4gICAgICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHVzZXIgZmlsbHMgaW4gZW1haWwgYW5kIHBhc3N3b3JkOyBjbGlja3MgJ2xvZ2luJzogVklFVyBub3RpY2VzIHRoaXMgYW5kIHJlYWN0c1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIE9yZGVyc0NvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuICAgIFxyXG4gICAgLy8gRnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBhIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKGV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldE9yZGVycyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIHZpZXdIZWxwZXIuc2V0VmlldyhkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHVzZXIgZmlsbHMgaW4gZW1haWwgYW5kIHBhc3N3b3JkOyBjbGlja3MgJ2xvZ2luJzogVklFVyBub3RpY2VzIHRoaXMgYW5kIHJlYWN0c1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIE9yZGVyQ29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxyXG57XHJcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgXHJcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoZXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgTW9kZWwuZ2V0T3JkZXIoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICB2aWV3SGVscGVyLnNldFZpZXcoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXHJcbiAgICBmdW5jdGlvbiBtYWluKClcclxuICAgIHtcclxuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIGVtYWlsIGFuZCBwYXNzd29yZDsgY2xpY2tzICdsb2dpbic6IFZJRVcgbm90aWNlcyB0aGlzIGFuZCByZWFjdHNcclxuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGFjdGlvblBlcmZvcm1lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59O1xyXG4iLCJ2YXIgUHJvZHVjdHNDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XHJcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XHJcbiAgICBcclxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcclxuICAgIGZ1bmN0aW9uIGdldFBhZ2UoKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldFBhZ2UoXCJcIiwgZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaWx0ZXJQcm9kdWN0cyhldmVudClcclxuICAgIHtcclxuICAgICAgICAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIGZvcm0gKHBhZ2UgcmVsb2FkKVxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gJCh0aGlzKS5zZXJpYWxpemUoKTtcclxuICAgICAgICBNb2RlbC5nZXRQYWdlKGZpbHRlcnMsIGZ1bmN0aW9uIChkYXRhKSB7IFZpZXdIZWxwZXIubG9hZFByb2R1Y3RzKGRhdGEpOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAge1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoZ2V0UGFnZSk7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXRGaWx0ZXJMaXN0ZW5lcihmaWx0ZXJQcm9kdWN0cyk7XHJcbiAgICAgICAgLy8gbmV3IGFjdGlvbiB3YW5uZXIgZXIgb3AgZmlsdGVyIHdvcmR0IGdlZHJ1a3RcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluXHJcbiAgICB9XHJcbn07IiwidmFyIFJlZ2lzdGVyQ29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxyXG57XHJcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgXHJcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFByZXZlbnQgc2VuZGluZyB0aGUgZm9ybVxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IGVycm9yIG1lc3NhZ2VzXHJcbiAgICAgICAgJChcIiNyZWdpX2FwaV9lcnJvcl9tZXNzYWdlXCIpLmhpZGUoKTtcclxuICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgLy8gcHV0IGZvcm0gZmllbGRzIGluIGphdmFzY3JpcHQgT2JqZWN0XHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0ge307XHJcblxyXG4gICAgICAgICQuZWFjaCgkKHRoaXMpLnNlcmlhbGl6ZUFycmF5KCksIGZ1bmN0aW9uIChpLCBmaWVsZCkge1xyXG4gICAgICAgICAgICBmb3JtRGF0YVtmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBmaXggZGF0ZSBvZiBiaXJ0aCAoQVBJIGV4cGVjdHMgY2VydGFpbiBmb3JtYXQpXHJcbiAgICAgICAgZm9ybURhdGFbXCJiaXJ0aF9kYXRlXCJdID0gZm9ybURhdGEuamFhciArIFwiLVwiICsgZm9ybURhdGEubWFhbmQgKyBcIi1cIiArIGZvcm1EYXRhLmRhZztcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgd2hldGhlciBhbnkgbWFuZGF0b3J5IGZpZWxkIGlzIGxlZnQgZW1wdHkgYnkgdXNlciBhbmRcclxuICAgICAgICAvLyBpZiBzbywgYWJvcnQgZnVuY3Rpb25cclxuICAgICAgICB2YXIgbWFuZGF0b3J5RmllbGRNaXNzZXMgPSBmYWxzZTtcclxuICAgICAgICB2YXIgbWFuZGF0b3J5RmllbGRzID0gW1widm9vcm5hYW1cIiwgXCJhY2h0ZXJuYWFtXCIsIFwicG9zdGNvZGVcIiwgXCJodWlzbnVtbWVyXCIsIFwiZV9tYWlsYWRyZXNcIiwgXCJ3YWNodHdvb3JkXCIsIFwid2FjaHR3b29yZDJcIiwgXCJzZWN1cml0eV9hbnN3ZXJcIl07IC8vZHJvcGRvd25zIChsaWtlIGdlbmRlcikgYXJlIGFsd2F5cyBmaWxsZWQgaW4sIHNvIGRvbid0IHB1dCBpbiB0aGlzIGxpc3RcclxuXHJcbiAgICAgICAgLy8gKHJlc2V0IGFsbCBmaWVsZHMgdG8gJ3ZhbGlkJyBiZWNhdXNlIHVzZXIgbWF5IGhhdmUgZmlsbGVkIGluIGZpZWxkcyBzaW5jZVxyXG4gICAgICAgIC8vIHRoZSBwcmV2aW91cyB0aW1lIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZClcclxuICAgICAgICAkLmVhY2gobWFuZGF0b3J5RmllbGRzLCBmdW5jdGlvbiAoaSwgbWFuRmllbGQpIHtcclxuICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5yZW1vdmVDbGFzcyhcImludmFsaWRcIik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgJC5lYWNoKG1hbmRhdG9yeUZpZWxkcywgZnVuY3Rpb24gKGksIG1hbkZpZWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtRGF0YVttYW5GaWVsZF0gPT0gXCJcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5hZGRDbGFzcyhcImludmFsaWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgbWFuZGF0b3J5RmllbGRNaXNzZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaWYgYSBtYW5kYXRvcnkgZmllbGQgaXMgZW1wdHksIHNob3cgZXJyb3IgbWVzc2FnZSB0byB1c2VyIGFuZCBhYm9ydCBmdW5jdGlvblxyXG4gICAgICAgIGlmIChtYW5kYXRvcnlGaWVsZE1pc3NlcylcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgICAvLyBzY3JvbGwgdG8gdG9wIG9mIHBhZ2Ugc28gdGhhdCB1c2VycyBzZWUgbWVzc2FnZSBcInNvbWV0aGluZyBpcyBub3QgZmlsbGVkIGluXCJcclxuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgICAgICAvLyBzaG93IG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXHJcbiAgICAgICAgICAgICQoXCIjcmVnaXN0ZXJfZXJyb3JfbWVzc2FnZVwiKS5zaG93KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHBhc3N3b3Jkc05vdElkZW50aWNhbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoZm9ybURhdGEud2FjaHR3b29yZCAhPSBmb3JtRGF0YS53YWNodHdvb3JkMikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXNzd29yZHNOb3RJZGVudGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcclxuICAgICAgICAgICAgJChcIiN3YWNodHdvb3JkXCIpLmFkZENsYXNzKFwiaW52YWxpZFwiKTtcclxuICAgICAgICAgICAgJChcIiN3YWNodHdvb3JkMlwiKS5hZGRDbGFzcyhcImludmFsaWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhYm9ydCBmdW5jdGlvbiBpZiBtYW5kYXRvcnkgZmllbGQgbWlzc2VzIG9yIHBhc3N3b3JkcyBub3QgaWRlbnRpY2FsXHJcbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzIHx8IHBhc3N3b3Jkc05vdElkZW50aWNhbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxldCBtb2RlbCBzZW5kIHVzZXIgaW5mbyB0byBBUElcclxuICAgICAgICBNb2RlbC5yZWdpc3Rlcihmb3JtRGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KCcvdmlld3MvcmVnaXN0ZXIvYWZ0ZXJfcmVnaXN0ZXIuaHRtbCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gc2V0IHZpZXcgdG8gcmVnaXN0ZXIgZm9ybVxyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0VmlldygnL3ZpZXdzL3JlZ2lzdGVyL3JlZ2lzdGVyLmh0bWwnKTtcclxuXHJcbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiByZWdpc3RlciBpbmZvOyBjbGlja3MgJ3JlZ2lzdGVyJzogdmlldyBub3RpY2VzIHRoaXMgYW5kIHJlYWN0c1xyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuXHJcbiAgICAgICAgLy8gZW1haWwgYW5kIHBhc3N3b3JkIGFyZSBzZW5kIHRvIEFQSTsgQVBJIGNoZWNrcyBpZiBlbWFpbCBhbHJlYWR5IGV4aXN0cyAoYW5kIHdoZXRoZXIgcGFzc3dvcmQgaXMgY29ycmVjdD8pIFxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1haW46IG1haW5cclxuICAgIH1cclxufTsiLCJ2YXIgUmVzZXRQYXNzd29yZENvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcclxue1xyXG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcclxuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcclxuICAgIFxyXG4gICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcclxuICAgIGZ1bmN0aW9uIGFjdGlvblBlcmZvcm1lZCgpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJpbiBhY3Rpb25QZXJmb3JtZWRcIik7IC8vdGVzdFxyXG5cclxuICAgICAgICAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIGZvcm1cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyByZXNldCBlcnJvciBtZXNzYWdlc1xyXG4gICAgICAgICQoXCIjcmVzZXRfcGFzc3dvcmRfYXBpX2Vycm9yX21lc3NhZ2VcIikuaGlkZSgpO1xyXG4gICAgICAgICQoXCIjd3cyX2Vycm9yX21lc3NhZ2VcIikuaGlkZSgpO1xyXG5cclxuICAgICAgICAvLyBwdXQgZm9ybSBmaWVsZHMgaW4gamF2YXNjcmlwdCBPYmplY3RcclxuICAgICAgICB2YXIgZm9ybURhdGEgPSB7fTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCQodGhpcykuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKGksIGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGZvcm1EYXRhW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgYW55IG1hbmRhdG9yeSBmaWVsZCBpcyBsZWZ0IGVtcHR5IGJ5IHVzZXIgYW5kXHJcbiAgICAgICAgLy8gaWYgc28sIGFib3J0IGZ1bmN0aW9uXHJcbiAgICAgICAgdmFyIG1hbmRhdG9yeUZpZWxkTWlzc2VzID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG1hbmRhdG9yeUZpZWxkcyA9IFtcIndhY2h0d29vcmRcIiwgXCJ3YWNodHdvb3JkMlwiLCBcImVfbWFpbGFkcmVzXCIsXCJzZWN1cml0eV9hbnN3ZXJcIl07IC8vZHJvcGRvd25zIChsaWtlIHNlY3VyaXR5X3F1ZXN0aW9uX2Fuc3dlcikgYXJlIGFsd2F5cyBmaWxsZWQgaW4sIHNvIGRvbid0IHB1dCBpbiB0aGlzIGxpc3RcclxuXHJcbiAgICAgICAgLy8gKHJlc2V0IGFsbCBmaWVsZHMgdG8gJ3ZhbGlkJyBiZWNhdXNlIHVzZXIgbWF5IGhhdmUgZmlsbGVkIGluIGZpZWxkcyBzaW5jZVxyXG4gICAgICAgIC8vIHRoZSBwcmV2aW91cyB0aW1lIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZClcclxuICAgICAgICAkLmVhY2gobWFuZGF0b3J5RmllbGRzLCBmdW5jdGlvbiAoaSwgbWFuRmllbGQpIHtcclxuICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5yZW1vdmVDbGFzcyhcImludmFsaWRcIik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgJC5lYWNoKG1hbmRhdG9yeUZpZWxkcywgZnVuY3Rpb24gKGksIG1hbkZpZWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtRGF0YVttYW5GaWVsZF0gPT0gXCJcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5hZGRDbGFzcyhcImludmFsaWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgbWFuZGF0b3J5RmllbGRNaXNzZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaWYgYSBtYW5kYXRvcnkgZmllbGQgaXMgZW1wdHksIHNob3cgZXJyb3IgbWVzc2FnZSB0byB1c2VyIGFuZCBhYm9ydCBmdW5jdGlvblxyXG4gICAgICAgIGlmIChtYW5kYXRvcnlGaWVsZE1pc3NlcylcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgICAvLyBzY3JvbGwgdG8gdG9wIG9mIHBhZ2Ugc28gdGhhdCB1c2VycyBzZWUgbWVzc2FnZSBcInNvbWV0aGluZyBpcyBub3QgZmlsbGVkIGluXCJcclxuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgICAgICAvLyBzaG93IG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXHJcbiAgICAgICAgICAgICQoXCIjcmVzZXRfZXJyb3JfbWVzc2FnZVwiKS5zaG93KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHBhc3N3b3Jkc05vdElkZW50aWNhbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoZm9ybURhdGEud2FjaHR3b29yZCAhPSBmb3JtRGF0YS53YWNodHdvb3JkMikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXNzd29yZHNOb3RJZGVudGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcclxuICAgICAgICAgICAgJChcIiN3YWNodHdvb3JkXCIpLmFkZENsYXNzKFwiaW52YWxpZFwiKTtcclxuICAgICAgICAgICAgJChcIiN3YWNodHdvb3JkMlwiKS5hZGRDbGFzcyhcImludmFsaWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhYm9ydCBmdW5jdGlvbiBpZiBtYW5kYXRvcnkgZmllbGQgbWlzc2VzIG9yIHBhc3N3b3JkcyBub3QgaWRlbnRpY2FsXHJcbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzIHx8IHBhc3N3b3Jkc05vdElkZW50aWNhbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjb250aW51ZWRcIilcclxuICAgICAgICAvLyBsZXQgbW9kZWwgc2VuZCB1c2VyIGluZm8gdG8gQVBJXHJcbiAgICAgICAgTW9kZWwucmVzZXRwYXNzd29yZChmb3JtRGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KCd2aWV3cy9yZXNldHBhc3N3b3JkL2FmdGVyX3Jlc2V0Lmh0bWwnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcclxuICAgIGZ1bmN0aW9uIG1haW4oKVxyXG4gICAgeyAgICAgIFxyXG4gICAgICAgIC8vIHNldCB2aWV3IHRvIHJlc2V0IHBhc3N3b3JkIGZvcm1cclxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoJ3ZpZXdzL3Jlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZC5odG1sJyk7XHJcblxyXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgICAgICAvLyBuZXcgYWN0aW9uIHdhbm5lciBlciBvcCBmaWx0ZXIgd29yZHQgZ2VkcnVrdFxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1haW46IG1haW5cclxuICAgIH1cclxufTtcclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBQcm9kdWN0Q29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxyXG57XHJcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgXHJcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoZXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gUHJldmVudCBzZW5kaW5nIHRoZSBmb3JtXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBMb29wIHRyb3VnaCB0aGUgZm9ybSBkYXRhIGFuZCBnZXQgYWxsIGZpZWxkc1xyXG4gICAgICAgIHZhciBmb3JtRGF0YSA9IHt9O1xyXG4gICAgICAgICQuZWFjaCgkKHRoaXMpLnNlcmlhbGl6ZUFycmF5KCksIGZ1bmN0aW9uIChpLCBmaWVsZCkge1xyXG4gICAgICAgICAgICBmb3JtRGF0YVtmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBsZXQgbW9kZWwgc2VuZCBlbWFpbCBhbmQgcGFzc3dvcmQgdG8gQVBJXHJcbiAgICAgICAgTW9kZWwubG9naW4oZm9ybURhdGEuZW1haWwsIGZvcm1EYXRhLnBhc3N3b3JkLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBzaG93IHVpdGxvZ2dlbiBidXR0b25cclxuICAgICAgICAgICAgJChcIi5pbmxvZ2dlbl90ZXh0XCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgJChcIi51aXRsb2dnZW5fdGV4dFwiKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBXZWVyZ2VlZiBlZW4gYW5kZXJlIHBhZ2luYSBnZWJhc3NlZXJkIG9wICdhZG1pbicgb2YgJ3JlZ2lzdGVyZWQgdXNlcidcclxuICAgICAgICAgICAgbmV3IFBhZ2VDb250cm9sbGVyKG5ldyBQYWdlVmlld0hlbHBlcigpLCBuZXcgUGFnZU1vZGVsKCkpLm1haW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsZXQgdmlldyBzaG93IHZpZXcgd2l0aCBkYXRhIGZyb20gZGF0YWJhc2VcclxuICAgIGZ1bmN0aW9uIHNob3dWaWV3KGRhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgdmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gd2hhdCBoYXBwZW5zOlxyXG4gICAgICAgIC8vIDEpIHVzZXIgY2xpY2tzIG9uIGEgcHJvZHVjdCBcclxuICAgICAgICAvLyAyKSBtb2RlbCBnZXRzIGluZm8gb2YgdGhlIHByb2R1Y3RcclxuICAgICAgICAvLyAzKSBzeXN0ZW0gcHV0cyBpbmZvIGluIGh0bWxcclxuICAgICAgICAvLyA0KSB2aWV3IHNob3dzIGluZm9cclxuXHJcbiAgICAgICAgLy8gMikgbW9kZWwgZ2V0cyBpbmZvIG9mIHRoZSBwcm9kdWN0XHJcbiAgICAgICAgLy8gMykgc3lzdGVtIHB1dHMgaW5mbyBpbiBodG1sXHJcbiAgICAgICAgbW9kZWwuR2V0UHJvZHVjdEluZm8oc2hvd1ZpZXcpO1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8vIHNldCB2aWV3IHRvIGxvZ2luIGZvcm1cclxuICAgICAgICAvL1ZpZXdIZWxwZXIuc2V0VmlldygpO1xyXG5cclxuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIGVtYWlsIGFuZCBwYXNzd29yZDsgY2xpY2tzICdsb2dpbic6IFZJRVcgbm90aWNlcyB0aGlzIGFuZCByZWFjdHNcclxuICAgICAgICAvL1ZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluOiBtYWluLFxyXG4gICAgICAgIHNob3dWaWV3IDogc2hvd1ZpZXdcclxuICAgIH1cclxufTsiLCJ2YXIgV2lzaGxpc3RDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXHJcbntcclxuICAgIHZhciBNb2RlbCA9IG1vZGVsO1xyXG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xyXG4gICAgdmFyIHZpZXdEYXRhID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0V2lzaGxpc3QoKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmdldFdpc2hsaXN0KHNldFZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFZpZXcoZGF0YSlcclxuICAgIHtcclxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFpbigpXHJcbiAgICB7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihnZXRXaXNobGlzdCk7XHJcbiAgICAgICAgVmlld0hlbHBlci5zZXREZWxldGVMaXN0ZW5lcihkZWxldGVGcm9tV2lzaGxpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbGV0ZUZyb21XaXNobGlzdChlYW4sIGRpdl90b19oaWRlKVxyXG4gICAge1xyXG4gICAgICAgIE1vZGVsLmRlbGV0ZUZyb21XaXNobGlzdChlYW4sIGZ1bmN0aW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFZpZXdIZWxwZXIuaGlkZUl0ZW0oZGl2X3RvX2hpZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbjogbWFpblxyXG4gICAgfVxyXG59OyIsInZhciBBZG1pblZpZXdIZWxwZXIgPSBmdW5jdGlvbiAoKVxyXG57XHJcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTsgLy8gaWYgJ2RvY3VtZW50IHJlYWR5JyBwZXJmb3JtIFwiYWN0aW9uXCJcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcclxuICAgICBmdW5jdGlvbiBzZXRWaWV3KGRhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPVwiQWRtaW4gLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvYWRtaW4vYWRtaW4uaHRtbCcsIGZ1bmN0aW9uICgpIHsgLy8gd2FhciBpZCA9ICdjb21wb25lbnQnIGRvZSAubG9hZC4uLi4uLlxyXG4gICAgICAgICAgICAkLmVhY2goZGF0YSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgcHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgdmFyIHVzZXIgPSAkKCcjc2luZ2xlX3VzZXInKS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJvZHVjdCBpbmZvXHJcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fZmlyc3RuYW1lXCIpLmh0bWwodmFsdWUuZmlyc3RfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fZmlyc3RuYW1lXCIpLmF0dHIoJ2hyZWYnLCAnL2FkbWluX3VzZXIvJyArIHZhbHVlLnVzZXJfaWQpO1xyXG4gICAgICAgICAgICAgICAgJCh1c2VyKS5maW5kKFwiLnVzZXJfX2luc2VydGlvblwiKS5odG1sKHZhbHVlLmluc2VydGlvbik7XHJcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fbGFzdG5hbWVcIikuaHRtbCh2YWx1ZS5zdXJuYW1lKTtcclxuICAgICAgICAgICAgICAgICQodXNlcikuZmluZChcIi51c2VyX19lbWFpbFwiKS5odG1sKHZhbHVlLmVtYWlsKTtcclxuICAgICAgICAgICAgICAgICQodXNlcikuZmluZChcIi51c2VyX19waG9uZW51bWJlclwiKS5odG1sKHZhbHVlLnBob25lX251bWJlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgJChcIiN1c2Vyc19ib2R5XCIpLmFwcGVuZCh1c2VyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IGxpc3QgaXRlbSwgYmVjYXVzZSB0aGlzIGl0ZW0gaXMgYWx3YXlzIGVtcHR5XHJcbiAgICAgICAgICAgICQoXCIjc2luZ2xlX3VzZXJcIikuZmlyc3QoKS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lcixcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgfVxyXG59XHJcblxyXG4gICAgLy9kYXQgaGllcm9uZGVyIHphdCBhYXJkaWcgd2F0IHdlcmsgaW4uLi4gRG9uYWxkIHdpbCBub2cgZmYgaG91ZGVuXHJcblxyXG4gICAgLy8gZnVuY3Rpb24gc2hvd1VzZXJzKGRhdGEpXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgZG9jdW1lbnQudGl0bGUgPVwiQWRtaW4gLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgIC8vICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvYWRtaW4vYWRtaW4uaHRtbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIC8vICAgICAgICAgdmFyIHRhYmxlID0gJChcIjx0YWJsZSBpZD0ndXNlcnNfdGFibGUnPjwvdGFibGU+XCIpO1xyXG5cclxuICAgIC8vICAgICAgICAgLy8gdGFibGUgaGVhZGVyXHJcbiAgICAvLyAgICAgICAgIHZhciByb3cgPSAkKCc8dHI+PC90cj4nKTtcclxuICAgIC8vICAgICAgICAgcm93LmFwcGVuZCgnPHRkPlZvb3JuYWFtPC90ZD48dGQ+VHVzc2VudjwvdGQ+PHRkPkFjaHRlcm5hYW08L3RkPjx0ZD5HZWJydWlrZXJzbmFhbTwvdGQ+PHRkPmVtYWlsPC90ZD48dGQ+dHlwZTwvdGQ+Jyk7XHJcblxyXG4gICAgLy8gICAgICAgICAkLmVhY2goZGF0YSwgZnVuY3Rpb24obnVtYmVyciwgdXNlcikgXHJcbiAgICAvLyAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgIHZhciByb3cgPSAkKCc8dHI+PC90cj4nKTtcclxuICAgIC8vICAgICAgICAgICAgICQuZWFjaCh1c2VyLCBmdW5jdGlvbihrZXksIHZhbHVlKVxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCAkKFwiPHRkIGNsYXNzPSd0ZF91c2VyJz48L3RkPlwiKS5odG1sKFN0cmluZyh2YWx1ZSkpICk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZCggJChcIjx0ZCBjbGFzcz0ndGRfdXNlcic+PC90ZD5cIikgKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICB9KVxyXG4gICAgLy8gICAgICAgICAgICAgdGFibGUuYXBwZW5kKHJvdyk7XHJcbiAgICAvLyAgICAgICAgICAgICAvLyAvL2ZvciBhZGRpdGlvbmFsIHVzZXIgaW5mbyBpZiBjbGlja2VkXHJcbiAgICAvLyAgICAgICAgICAgICAvLyByb3cgPSAkKCc8ZGl2IGNsYXNzPVwidG9iZXRhYmxlXCI+PC9kaXY+Jyk7XHJcbiAgICAvLyAgICAgICAgICAgICAvLyB0YWJsZS5hcHBlbmQocm93KTtcclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgICQoJyN1c2VycycpLmFwcGVuZCh0YWJsZSk7XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gcHV0SW5mb0luSHRtbChjbGlja2VkLCBkYXRhKVxyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdpbiBwdXRJbmZvSW5IdG1sKCknKTtcclxuICAgIC8vICAgICAvLyBzaG93IGluZm8gb2YgdGhlIHJpZ2h0IHVzZXIgKGlmIG5vdCBhbHJlYWR5IHNob3dpbmcgaXQpXHJcbiAgICAvLyAgICAgLy8gaW5zZXJ0IHJvdyBhcyB0YWJsZSBoZWFkZXJcclxuICAgIC8vICAgICB2YXIgaGVhZGVycm93ID0gJCgnPHRyPjwvdHI+JykuYXBwZW5kKCc8dGQ+d3c8L3RkPjx0ZD5nZWJsb2trZWVyZDwvdGQ+PHRkPmlkPC90ZD48dGQ+Z2VuZGVyPC90ZD48dGQ+Z2Vib29ydGVkYXR1bTwvdGQ+PHRkPnZyYWFnPC90ZD48dGQ+YW50d29vcmQ8L3RkPicpO1xyXG5cclxuICAgIC8vICAgICAvLyBpbnNlcnQgcm93IHdpdGggdGUgdXNlcmluZm9cclxuICAgIC8vICAgICB2YXIgaW5mb3JvdyA9ICQoJzx0cj48L3RyPicpO1xyXG5cclxuICAgIC8vICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgLy8gICAgICQuZWFjaChkYXRhWzBdLCBmdW5jdGlvbihrZXksIHZhbHVlKVxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgaWYgKGNvdW50ID09IDEpIHsgLy8gZ2VibG9ra2VlcmRcclxuICAgIC8vICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAxKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdmFsdWUgPSAnbmVlJztcclxuICAgIC8vICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gMCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHZhbHVlID0gJ2phJ1xyXG4gICAgLy8gICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICB2YWx1ZSA9ICdkYiBmb3V0PydcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coY291bnQpO1xyXG4gICAgLy8gICAgICAgICB2YXIgdGQgPSAkKCc8dGQ+PC90ZD4nKS5hcHBlbmQodmFsdWUpO1xyXG5cclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ2tleSwgdmFsdWU6ICcgKyBrZXksIHZhbHVlKTtcclxuXHJcbiAgICAvLyAgICAgICAgIGluZm9yb3cuYXBwZW5kKHRkKTtcclxuXHJcbiAgICAvLyAgICAgICAgIGNvdW50ICs9IDE7XHJcbiAgICAvLyAgICAgfSlcclxuXHJcbiAgICAvLyAgICAgaW5mb3Jvdy5pbnNlcnRBZnRlciggJChjbGlja2VkKS5jbG9zZXN0KCd0cicpICk7XHJcbiAgICAvLyAgICAgaGVhZGVycm93Lmluc2VydEFmdGVyKCQoY2xpY2tlZCkuY2xvc2VzdCgndHInKSk7XHJcbiAgICAvLyB9XHJcblxyXG4iLCJ2YXIgQWRtaW5Vc2VyVmlld0hlbHBlciA9IGZ1bmN0aW9uICgpXHJcbntcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pOyAvLyBpZiAnZG9jdW1lbnQgcmVhZHknIHBlcmZvcm0gXCJhY3Rpb25cIlxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFZpZXcodmFsdWUpXHJcbiAgICB7XHJcbiAgICAgICAgLy9wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJy92aWV3cy9hZG1pbnVzZXIvYWRtaW51c2VyLmh0bWwnLCBmdW5jdGlvbiAoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgJChcIiNkZWxldGVfYnRuXCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLnVzZXJfaWQpICAgXHJcbiAgICAgICAgICAgICQoXCIjZmlyc3RfbmFtZVwiKS52YWwodmFsdWUuZmlyc3RfbmFtZSk7XHJcbiAgICAgICAgICAgICQoXCIjaW5zZXJ0aW9uXCIpLnZhbCh2YWx1ZS5pbnNlcnRpb24pO1xyXG4gICAgICAgICAgICAkKFwiI3N1cm5hbWVcIikudmFsKHZhbHVlLnN1cm5hbWUpO1xyXG4gICAgICAgICAgICAkKFwiI3VzZXJfdHlwZVwiKS52YWwodmFsdWUudXNlcl90eXBlKTtcclxuICAgICAgICAgICAgJChcIiNlbWFpbFwiKS52YWwodmFsdWUuZW1haWwpO1xyXG4gICAgICAgICAgICAkKFwiI3Bhc3N3b3JkXCIpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJ1Z1bCBoaWVyIGlldHMgaW4gb20gaGV0IHdhY2h0d29vcmQgdGUgdmVyYW5kZXJlbicpO1xyXG4gICAgICAgICAgICAkKFwiI2dlbmRlclwiKS52YWwodmFsdWUuZ2VuZGVyKTtcclxuICAgICAgICAgICAgJChcIiNkYXRlX29mX2JpcnRoXCIpLnZhbCh2YWx1ZS5kYXRlX29mX2JpcnRoKTtcclxuICAgICAgICAgICAgJChcIiNwaG9uZV9udW1iZXJcIikudmFsKHZhbHVlLnBob25lX251bWJlcik7XHJcbiAgICAgICAgICAgICQoXCIjaXNfYWN0aXZlXCIpLnZhbCh2YWx1ZS5pc19hY3RpdmUpO1xyXG4gICAgICAgICAgICAkKFwiI3VzZXJfaWRcIikudmFsKHZhbHVlLnVzZXJfaWQpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRvZGF5ICAgICAgID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdmFyIGRhdGVPZkJpcnRoID0gbmV3IERhdGUodmFsdWUuZGF0ZV9vZl9iaXJ0aCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPCAzMjsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBkYXRlT2ZCaXJ0aC5nZXREYXRlKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNkYWdcIikuYXBwZW5kKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBpICsgXCInIHNlbGVjdGVkPSdzZWxlY3RlZCc+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2RhZ1wiKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIGkgKyBcIic+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDE5MDA7IGkgPCB0b2RheS5nZXRGdWxsWWVhcigpICsgMTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBkYXRlT2ZCaXJ0aC5nZXRGdWxsWWVhcigpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjamFhclwiKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIGkgKyBcIicgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5cIiArIGkgKyBcIjwvb3B0aW9uPlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2phYXJcIikuYXBwZW5kKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBpICsgXCInPlwiICsgaSArIFwiPC9vcHRpb24+XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkKFwiI21hYW5kXCIpLnZhbChkYXRlT2ZCaXJ0aC5nZXRNb250aCgpKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFNhdmVMaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3N1Ym1pdCcsICcjdXNlcmZvcm0nLCBhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldERlbGV0ZUxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vZmYoKS5vbihcImNsaWNrXCIsICcjZGVsZXRlX2J0bicsIGZ1bmN0aW9uIChlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBhY3Rpb24oJCh0aGlzKS5kYXRhKFwiaWRcIikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0U2F2ZUxpc3RlbmVyOiBzZXRTYXZlTGlzdGVuZXIsXHJcbiAgICAgICAgc2V0RGVsZXRlTGlzdGVuZXI6IHNldERlbGV0ZUxpc3RlbmVyXHJcbiAgICB9XHJcbn0iLCJ2YXIgQ2FydFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3RGF0YSlcclxuICAgIHtcclxuICAgICAgICBpZiAodmlld0RhdGEgIT0gXCJcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZpZXdEYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBhZGRJdGVtKGl0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIHRvdGFsIHByaWNlICBvZiB0aGUgY2FydFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2ludH0gdG90YWxQcmljZSAgVG90YWwgcHJpY2Ugb2YgdGhlIGNhcnRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdXBkYXRlVG90YWxQcmljZShuZXdQcmljZSlcclxuICAgIHtcclxuICAgICAgICBuZXdQcmljZSA9IHBhcnNlRmxvYXQobmV3UHJpY2UpICsgcGFyc2VGbG9hdCgkKFwiLmNhcnRfX3RvdGFsIC5wcmljZVwiKS5odG1sKCkuc3Vic3RyKDEpKTtcclxuICAgICAgICAkKFwiLmNhcnRfX3RvdGFsIC5wcmljZVwiKS5odG1sKFwi4oKsXCIgKyBwYXJzZUZsb2F0KG5ld1ByaWNlKS50b0ZpeGVkKDIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgbmV3IGNhcnQgaXRlbSB2aXNpYWJsZSBpbiB0aGUgRE9NXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSAge2FycmF5fSAgaXRlbSAgUHJvZHVjdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhZGRJdGVtKGl0ZW0pXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGNhcnRJdGVtID0gJCgnPGRpdj4nKS5odG1sKCQoJy5zaWRlYmFyX19jb250ZW50X190bXAnKS5odG1sKCkpO1xyXG5cclxuICAgICAgICBjYXJ0SXRlbS5maW5kKFwiLmNhcnRfX2l0ZW1fX3RpdGxlXCIpLmh0bWwoaXRlbS50aXRsZSk7XHJcbiAgICAgICAgY2FydEl0ZW0uZmluZChcIi5jYXJ0X19pdGVtX19wcmljZVwiKS5odG1sKFwi4oKsXCIgKyBpdGVtLnByaWNlLnRvRml4ZWQoMikpO1xyXG4gICAgICAgIGNhcnRJdGVtLmZpbmQoXCIuY2FydF9faXRlbV9faW1hZ2UgaW1nXCIpLmF0dHIoXCJzcmNcIiwgaXRlbS5pbWFnZSk7XHJcbiAgICAgICAgY2FydEl0ZW0uZmluZChcIi5jYXJ0X19pdGVtXCIpLmF0dHIoXCJkYXRhLWlkXCIsIGl0ZW0uZWFuX251bWJlcilcclxuXHJcbiAgICAgICAgJChcIi5jYXJ0XCIpLmFwcGVuZChjYXJ0SXRlbSk7XHJcblxyXG4gICAgICAgIC8vIENoYW5nZSBhbW91bnQgb2YgaXRlbXNcclxuICAgICAgICB2YXIgYW1vdW50ID0gJChcIi5jYXJ0X2J1dHRvbiAuY291bnRcIikuaHRtbCgpO1xyXG4gICAgICAgICQoXCIuY2FydF9idXR0b24gLmNvdW50XCIpLmh0bWwocGFyc2VJbnQoYW1vdW50KSArIDEpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIHByaWNlXHJcbiAgICAgICAgdXBkYXRlVG90YWxQcmljZShpdGVtLnByaWNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvYWQgdGhlIGNhcnQgd2hlbiB0aGUgcGFnZSBpcyAgcmVhc2VcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW5lciBmb3IgdGhlIEFkZCB0byBjYXJ0IGJ1dHRvblxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gYWRkdG9DYXJ0ICBNb2RlbCBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzZXRBZGRQcm9kdWN0TGlzdGVuZXIoYWRkVG9DYXJ0KVxyXG4gICAge1xyXG4gICAgICAgICQoXCJib2R5XCIpLm9uKFwiY2xpY2tcIiwgXCIuYWRkdG9jYXJ0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RfaWQgPSAkKHRoaXMpLmRhdGEoXCJpZFwiKTtcclxuICAgICAgICAgICAgYWRkVG9DYXJ0KHByb2R1Y3RfaWQpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoXCIjdG9fc2hvcF9jYXJ0XCIpLmZpbmQoXCIjc2hvcF9jYXJ0XCIpLmZhZGVUbygwLCAxMDApLmRlbGF5KDEwMDApLmZhZGVUbyg2MDAsIDApO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW5lciBmb3IgcmVtb3ZlIGEgcHJvZHVjdCBmcm9tIHRoZSBET00gY2FydFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZW1vdmVQcm9kdWN0IENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGUgcHJvZGN1dCBmcm9tIHRoZSBtZW1vcnlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2V0UmVtb3ZlTGlzdGVuZXIocmVtb3ZlUHJvZHVjdCkge1xyXG4gICAgICAgICQoXCJib2R5XCIpLm9uKFwiY2xpY2tcIiwgXCIuY2FydF9faXRlbV9fcmVtb3ZlXCIsIGZ1bmN0aW9uIChldmVudCl7XHJcbiAgICAgICAgICAgIHZhciBjYXJ0aXRlbSAgID0gJCh0aGlzKS5wYXJlbnQoKTtcclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RfaWQgPSAkKHRoaXMpLnBhcmVudCgpLmRhdGEoXCJpZFwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9kdWN0IGZyb20gRE9NIGNhcnRcclxuICAgICAgICAgICAgJChjYXJ0aXRlbSkuYWRkQ2xhc3MoXCJjYXJ0X19pdGVtLS1yZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAkKGNhcnRpdGVtKS5vbihcImFuaW1hdGlvbmVuZCB3ZWJraXRBbmltYXRpb25FbmQgb0FuaW1hdGlvbkVuZCBNU0FuaW1hdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRGVjcmVzZSBjb3VudFxyXG4gICAgICAgICAgICB2YXIgYW1vdW50ID0gJChcIi5jYXJ0X2J1dHRvbiAuY291bnRcIikuaHRtbCgpO1xyXG4gICAgICAgICAgICAkKFwiLmNhcnRfYnV0dG9uIC5jb3VudFwiKS5odG1sKHBhcnNlSW50KGFtb3VudCkgLSAxKTtcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZVByb2R1Y3QocHJvZHVjdF9pZClcclxuICAgICAgICAgICAgdXBkYXRlVG90YWxQcmljZSgtJChjYXJ0aXRlbSkuZmluZChcIi5jYXJ0X19pdGVtX19wcmljZVwiKS5odG1sKCkuc3Vic3RyKDEpKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgICAgIGFkZEl0ZW06IGFkZEl0ZW0sXHJcbiAgICAgICAgdXBkYXRlVG90YWxQcmljZTogdXBkYXRlVG90YWxQcmljZSxcclxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXIsXHJcbiAgICAgICAgc2V0QWRkUHJvZHVjdExpc3RlbmVyOiBzZXRBZGRQcm9kdWN0TGlzdGVuZXIsXHJcbiAgICAgICAgc2V0UmVtb3ZlTGlzdGVuZXI6IHNldFJlbW92ZUxpc3RlbmVyLFxyXG4gICAgfVxyXG59OyIsInZhciBFcnJvclZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0VmlldygpXHJcbiAgICB7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIk9lcHMgLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvZXJyb3IvZXJyb3IuaHRtbCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFjdGlvbkxpc3RlbmVyIHRoYXQgZXhlY3V0ZXMgYWN0aW9ucyBvbiBzcGVjaWZpYyBldmVudHNcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGV2ZW50SGFuZGxlcilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShldmVudEhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXHJcbiAgICB9XHJcbn07IiwidmFyIEZhdm9yaXRlTGlzdFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vY2hhbmdlIHZpZXcgb2YgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3RGF0YSlcclxuICAgIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiV0wgVklFVzogSW5zaWRlIHNldFZpZXdcIik7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIkZhdm9yaXRlbGlzdCAtIEFaIEdhbWVzXCI7XHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikuaHRtbCgnPGRpdiBjbGFzcz1cImNvbC0xMlwiPjxkaXYgY2xhc3M9XCJjb2wtMTJcIiBpZD1cImZhdm9yaXRlbGlzdFwiPjwvZGl2PjwvZGl2PicpO1xyXG5cclxuICAgICAgICBsb2FkRmF2b3JpdGVsaXN0KHZpZXdEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2FkRmF2b3JpdGVsaXN0KHZpZXdEYXRhKVxyXG4gICAge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJXTCBWSUVXOiBJbnNpZGUgbG9hZGZhdm9yaXRlTGlzdFwiKTtcclxuICAgICAgICAkKFwiI2Zhdm9yaXRlbGlzdFwiKS5sb2FkKCcvdmlld3MvZmF2b3JpdGVsaXN0L2Zhdm9yaXRlbGlzdC5odG1sJywgZnVuY3Rpb24gKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBhbGwgZmF2b3JpdGVsaXN0IGl0ZW1zIHRvIGh0bWxcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKHZpZXdEYXRhLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDbG9uZSBwcm9kdWN0XHJcbiAgICAgICAgICAgICAgICB2YXIgZmF2b3JpdGVfX2xpc3RfX2l0ZW0gPSAkKCc8ZGl2PicpLmFwcGVuZCgkKCcjZmF2b3JpdGVfX2xpc3RfX2l0ZW0nKS5jbG9uZSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJvZHVjdCBpbmZvXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudCArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgJChmYXZvcml0ZV9fbGlzdF9faXRlbSkuZmluZChcIi5mYXZvcml0ZV9fbGlzdF9faWRcIikuYXBwZW5kKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgJChmYXZvcml0ZV9fbGlzdF9faXRlbSkuZmluZChcIi5mYXZvcml0ZV9fbGlzdF9faW1hZ2UgaW1nXCIpLmF0dHIoXCJzcmNcIiwgdmFsdWUuaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgJChmYXZvcml0ZV9fbGlzdF9faXRlbSkuZmluZChcIi5mYXZvcml0ZV9fbGlzdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkKGZhdm9yaXRlX19saXN0X19pdGVtKS5maW5kKFwiLmZhdm9yaXRlX19saXN0X19wcmljZVwiKS5hcHBlbmQoKFwi4oKsIFwiKSt2YWx1ZS5wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAkKGZhdm9yaXRlX19saXN0X19pdGVtKS5maW5kKFwiLmZhdm9yaXRlX19saXN0X19wbGF0Zm9ybVwiKS5hcHBlbmQoUGxhdGZvcm1Mb2dvKHZhbHVlLnBsYXRmb3JtKSk7XHJcbiAgICAgICAgICAgICAgICAkKGZhdm9yaXRlX19saXN0X19pdGVtKS5maW5kKFwiLmZhdm9yaXRlX19saXN0X19hdmFpbGFiaWxpdHlcIikuYXBwZW5kKEJlc2NoaWtiYWFyaGVpZEtsZXVyKHZhbHVlLnN0b2NrKSk7XHJcbiAgICAgICAgICAgICAgICAkKGZhdm9yaXRlX19saXN0X19pdGVtKS5maW5kKFwiLmZhdm9yaXRlX19saXN0X19saWtlYnV0dG9uXCIpLmFwcGVuZCgpO1xyXG4gICAgICAgICAgICAgICAgJChmYXZvcml0ZV9fbGlzdF9faXRlbSkuZmluZChcIiNkZWxldGVfYnRuXCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgJChmYXZvcml0ZV9fbGlzdF9faXRlbSkuZmluZChcIiNjYXJ0X2J0blwiKS5hdHRyKFwiZGF0YS1pZFwiLCB2YWx1ZS5lYW5fbnVtYmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKFwiI2Zhdm9yaXRlX19saXN0XCIpLmFwcGVuZChmYXZvcml0ZV9fbGlzdF9faXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJChcIiNmYXZvcml0ZWxpc3RfZXJyb3JfbWVzc2FnZVwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgbGlzdCBpdGVtLCBiZWNhdXNlIHRoaXMgaXRlbSBpcyBhbHdheXMgZW1wdHlcclxuICAgICAgICAgICAgJChcIiNmYXZvcml0ZV9fbGlzdF9faXRlbVwiKS5maXJzdCgpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pOyAvLyBpZiAnZG9jdW1lbnQgcmVhZHknIHBlcmZvcm0gXCJhY3Rpb25cIiAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXREZWxldGVMaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikub2ZmKCkub24oXCJjbGlja1wiLCBcIiNkZWxldGVfYnRuXCIsIGZ1bmN0aW9uKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBlYW4gPSAkKHRoaXMpLmRhdGEoXCJpZFwiKTtcclxuICAgICAgICAgICAgdmFyIGRpdl90b19oaWRlID0gJCh0aGlzKS5jbG9zZXN0KFwiLnJvd1wiKTtcclxuICAgICAgICAgICAgYWN0aW9uKGVhbiwgZGl2X3RvX2hpZGUpO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBoaWRlSXRlbShkaXZfdG9faGlkZSlcclxuICAgIHtcclxuICAgICAgICBkaXZfdG9faGlkZS5mYWRlVG8oMjAwLCAwKS5zbGlkZVVwKDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgICAgIGxvYWRGYXZvcml0ZWxpc3Q6IGxvYWRGYXZvcml0ZWxpc3QsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxyXG4gICAgICAgIHNldERlbGV0ZUxpc3RlbmVyOiBzZXREZWxldGVMaXN0ZW5lcixcclxuICAgICAgICBoaWRlSXRlbTogaGlkZUl0ZW1cclxuICAgIH1cclxufSIsInZhciBDaGVja291dFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0VmlldyhjYXJ0KVxyXG4gICAge1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJCZXN0ZWxsZW4gLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvY2hlY2tvdXQvY2hlY2tvdXQuaHRtbCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhcnQgIT0gdW5kZWZpbmVkICYmIGNhcnQgIT0gXCJcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGNhcnQgY29udGVudFxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKGNhcnQsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9ICQoXCIjcHJvZHVjdFwiKS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChwcm9kdWN0KS5maW5kKFwiLnByb2R1Y3RfX2ltYWdlIGltZ1wiKS5hdHRyKFwic3JjXCIsIHZhbHVlLmltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fcHJpY2VcIikuYXBwZW5kKChcIuKCrCBcIikgKyB2YWx1ZS5wcmljZS50b0ZpeGVkKDIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0XCIpLmFwcGVuZChwcm9kdWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI3Byb2R1Y3RfX2xpc3RcIikuYXBwZW5kKFwiPGhyIC8+XCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChcIiNvcmRlcl9pbmZvIC5vcmRlcl9fbmF2aWdhdGVcIikuZmlyc3QoKS5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0XCIpLmh0bWwoXCI8ZGl2IGNsYXNzPSdtZXNzYWdlIG1lc3NhZ2UtLWluZm8nPkplIHdpbmtlbHdhZ2VuIGlzIG5vZyBsZWVnLCBzdG9wIGVyIHByb2R1Y3RlbiBpbiBvbSBkZXplIHRlIGt1bm5lbiBiZXN0ZWxsZW4uPC9kaXY+XCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgbGlzdCBpdGVtLCBiZWNhdXNlIHRoaXMgaXRlbSBpcyBhbHdheXMgZW1wdHlcclxuICAgICAgICAgICAgJChcIiNwcm9kdWN0XCIpLmZpcnN0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgYW5kIG1vdmUgdG90YWwgcHJpY2UgdG8gZW5kIG9mIGxpc3RcclxuICAgICAgICAgICAgJChcIiN0b3RhbFwiKS5hcHBlbmRUbyhcIiNwcm9kdWN0X19saXN0XCIpO1xyXG4gICAgICAgICAgICAkKFwiLnRvdGFsX19wcmljZVwiKS5odG1sKCQoXCIuY2FydF9fdG90YWwgLnByaWNlXCIpLmh0bWwoKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgZGVsaXZlcnkgZGF0ZSAod2UgYWx3YXlzIGRlbGl2ZXIgaW4gb25lIGRheSlcclxuICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdG9kYXkuc2V0RGF0ZSh0b2RheS5nZXREYXRlKCkgKyAxKTtcclxuXHJcbiAgICAgICAgICAgICQoXCIuZGVsaXZlcnlfZGF0ZVwiKS5odG1sKHRvZGF5LmdldERhdGUoKSArIFwiIFwiICsgdG9kYXkudG9Mb2NhbGVTdHJpbmcoXCJubC1OTFwiLCB7bW9udGg6IFwibG9uZ1wifSkpO1xyXG4gICAgICAgICAgICAkKFwiLmRlbGl2ZXJ5X19jYWxlbmRhcl9fbW9udGhcIikuaHRtbCh0b2RheS50b0xvY2FsZVN0cmluZyhcIm5sLU5MXCIsIHttb250aDogXCJzaG9ydFwifSkudG9VcHBlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICQoXCIuZGVsaXZlcnlfX2NhbGVuZGFyX19kYXlcIikuaHRtbCh0b2RheS5nZXREYXRlKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IHVzZXIgYWRkcmVzc1xyXG4gICAgICAgICAgICBVc2VySGVscGVyLmdldFVzZXJJbmZvKGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgICQoXCIuYWRyZXNfX25hbWVcIikuaHRtbCh1c2VyLmZpcnN0X25hbWUgKyBcIiBcIiArIHVzZXIuaW5zZXJ0aW9uICsgXCIgXCIgKyB1c2VyLnN1cm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5hZHJlc19fc3RyZWV0XCIpLmh0bWwodXNlci5hZGRyZXNzLnN0cmVldCArIFwiIFwiICsgdXNlci5hZGRyZXNzLmhvdXNlX251bWJlcik7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmFkcmVzX19wb3N0YWxjb2RlXCIpLmh0bWwodXNlci5hZGRyZXNzLnBvc3RhbF9jb2RlICsgXCIgXCIgKyB1c2VyLmFkZHJlc3MuY2l0eS50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR28gdG8gdGhlIGxhc3Qgc3RlcCBvZiB0aGUgb3JkZXIgcHJvY2Vzc1xyXG4gICAgZnVuY3Rpb24gZmluaXNoT3JkZXIoKVxyXG4gICAge1xyXG4gICAgICAgICQoXCJ1bC5vcmRlci1zdGVwcyBsaVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAkKFwidWwub3JkZXItc3RlcHMgbGkgYVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICQoXCJ1bC5vcmRlci1zdGVwcyBsaS5jb25maXJtYXRpb25cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgICQoXCIub3JkZXJfX3N0ZXBcIikucmVtb3ZlQ2xhc3MoXCJvcmRlcl9fc3RlcC0tYWN0aXZlXCIpO1xyXG4gICAgICAgICQoXCIjY29uZmlybWF0aW9uXCIpLmFkZENsYXNzKFwib3JkZXJfX3N0ZXAtLWFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGVhciB0aGUgdmlzaWJsZSBjYXJ0XHJcbiAgICBmdW5jdGlvbiBjbGVhckNhcnQoKVxyXG4gICAge1xyXG4gICAgICAgICQoXCIuY2FydFwiKS5lbXB0eSgpO1xyXG4gICAgICAgICQoXCIuY2FydF9idXR0b24gLmNvdW50XCIpLmh0bWwoXCIwXCIpO1xyXG4gICAgICAgICQoXCIuY2FydF9fdG90YWwgLnByaWNlXCIpLmh0bWwoXCLigqwwMC4wMFwiKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4ZWN1dGUgdGhlIGV2ZW50IHdoZW4gJ3NvbWV0aGluZycgaGFwcGVucyAod2hlbiBhIGJ1dHRvbiBpcyBjbGlja2VkIGZvciBleGFtcGxlKVxyXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29uZmlybSB0aGUgb3JkZXIgd2hlbiBzYm1pdHRpbmcgdGhlIGZvcm1cclxuICAgIGZ1bmN0aW9uIHNldE9yZGVyTGlzdGVuZXIoYWN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKFwic3VibWl0XCIsIFwiI29yZGVyZm9ybVwiLCBhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxyXG4gICAgICAgIHNldE9yZGVyTGlzdGVuZXI6IHNldE9yZGVyTGlzdGVuZXIsXHJcbiAgICAgICAgZmluaXNoT3JkZXI6IGZpbmlzaE9yZGVyLFxyXG4gICAgICAgIGNsZWFyQ2FydDogY2xlYXJDYXJ0XHJcbiAgICB9XHJcbn07IiwidmFyIExvZ2luVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KClcclxuICAgIHtcclxuICAgICAgICBkb2N1bWVudC50aXRsZSA9XCJJbmxvZ2dlbiAtIEFaIEdhbWVzXCI7XHJcblxyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJy92aWV3cy9sb2dpbi9sb2dpbi5odG1sJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXhlY3V0ZSB0aGUgZXZlbnQgd2hlbiAnc29tZXRoaW5nJyBoYXBwZW5zICh3aGVuIGEgYnV0dG9uIGlzIGNsaWNrZWQgZm9yIGV4YW1wbGUpXHJcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiBsb2dpbiBmb3JtXHJcbiAgICAgICAgLy8gdXNlciBwcmVzc2VzICdsb2dpbidcclxuXHJcbiAgICAgICAgLy8gaWYgdXNlciBwcmVzc2VzICdsb2dpbicsIHBlcmZvcm0gYWN0aW9uIChtYWtlIGNvbnRyb2xsZXIgc2VuZCBlbWFpbCBhbmQgcGFzc3dvcmQgdG8gQVBJKVxyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9uKFwic3VibWl0XCIsIFwiI2xvZ2luZm9ybVwiLCBhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXHJcbiAgICB9XHJcbn07IiwidmFyIExvZ291dFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0VmlldygpXHJcbiAgICB7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIlVpdGxvZ2dlbiAtIEFaIEdhbWVzXCI7XHJcblxyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJy92aWV3cy9sb2dvdXQvbG9nb3V0Lmh0bWwnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeGVjdXRlIHRoZSBldmVudCB3aGVuICdzb21ldGhpbmcnIGhhcHBlbnMgKHdoZW4gYSBidXR0b24gaXMgY2xpY2tlZCBmb3IgZXhhbXBsZSlcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXHJcbiAgICB9XHJcbn07IiwidmFyIE9yZGVyVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KG9yZGVyKVxyXG4gICAge1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID1cIkJlc3RlbGdlc2NoaWVkZW5pcyAtIEFaIEdhbWVzXCI7XHJcblxyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJy92aWV3cy9vcmRlci9vcmRlci5odG1sJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIERhdGVcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShvcmRlci5vcmRlcl9kYXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZvcm1hdCBzaGlwcGluZyBtZXRob2RcclxuICAgICAgICAgICAgc3dpdGNoKG9yZGVyLnNoaXBwaW5nX21ldGhvZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbGl2ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBvcmRlci5zaGlwcGluZ19tZXRob2QgPSBcIkJlem9yZ2VuICh2aWEgUG9zdE5MKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInBpY2t1cFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyLnNoaXBwaW5nX21ldGhvZCA9IFwiT3BoYWxlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGaWxsIG9yZGVyIGluZm9cclxuICAgICAgICAgICAgJChcIi5vcmRlcl9fZGF0ZVwiKS5odG1sKGRhdGUuZ2V0RGF0ZSgpICsgXCIgXCIgKyBkYXRlLnRvTG9jYWxlU3RyaW5nKFwibmwtTkxcIiwge21vbnRoOiBcImxvbmdcIn0pICsgXCIgXCIgKyBkYXRlLmdldEZ1bGxZZWFyKCkpXHJcbiAgICAgICAgICAgICQoXCIub3JkZXJfX3BheW1lbnRtZXRob2RcIikuaHRtbChvcmRlci5wYXltZW50X21ldGhvZCk7XHJcbiAgICAgICAgICAgICQoXCIub3JkZXJfX3NoaXBwcGluZ1wiKS5odG1sKG9yZGVyLnNoaXBwaW5nX21ldGhvZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgcHJvZHVjdHNcclxuICAgICAgICAgICAgJC5lYWNoKG9yZGVyLnByb2R1Y3RzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9ICQoXCIjcHJvZHVjdFwiKS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICQocHJvZHVjdCkuZmluZChcIi5wcm9kdWN0X190aXRsZVwiKS5odG1sKHZhbHVlLnRpdGxlKTtcclxuICAgICAgICAgICAgICAgICQocHJvZHVjdCkuZmluZChcIi5wcm9kdWN0X19pbWFnZSBpbWdcIikuYXR0cihcInNyY1wiLCB2YWx1ZS5pbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fYW1vdW50XCIpLmh0bWwoXCI8Yj5BYW50YWw6PC9iPiBcIiArIHZhbHVlLmFtb3VudClcclxuICAgICAgICAgICAgICAgICQocHJvZHVjdCkuZmluZChcIi5wcm9kdWN0X19wcmljZVwiKS5hcHBlbmQoKFwi4oKsIFwiKSArIHZhbHVlLnByaWNlLnRvRml4ZWQoMikpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoXCIjcHJvZHVjdF9fbGlzdFwiKS5hcHBlbmQocHJvZHVjdCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3Byb2R1Y3RfX2xpc3RcIikuYXBwZW5kKFwiPGhyIC8+XCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgbGlzdCBpdGVtLCBiZWNhdXNlIHRoaXMgaXRlbSBpcyBhbHdheXMgZW1wdHlcclxuICAgICAgICAgICAgJChcIiNwcm9kdWN0XCIpLmZpcnN0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgYW5kIG1vdmUgdG90YWwgcHJpY2UgdG8gZW5kIG9mIGxpc3RcclxuICAgICAgICAgICAgJChcIiN0b3RhbFwiKS5hcHBlbmRUbyhcIiNwcm9kdWN0X19saXN0XCIpO1xyXG4gICAgICAgICAgICAkKFwiLnRvdGFsX19wcmljZVwiKS5odG1sKFwi4oKsIFwiICsgb3JkZXIudG90YWxfb3JkZXJfcHJpY2UpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcclxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXJcclxuICAgIH1cclxufTsiLCJ2YXIgT3JkZXJzVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KG9yZGVycylcclxuICAgIHtcclxuICAgICAgICBkb2N1bWVudC50aXRsZSA9XCJCZXN0ZWxnZXNjaGllZGVuaXMgLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3Mvb3JkZXJzL29yZGVycy5odG1sJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChvcmRlcnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIENsb25lIHByb2R1Y3RcclxuICAgICAgICAgICAgICAgIHZhciBvcmRlciA9ICQoJyNzaW5nbGVfb3JkZXInKS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERhdGVcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUub3JkZXJfZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRm9ybWF0IHNoaXBwaW5nIG1ldGhvZFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHZhbHVlLnNoaXBwaW5nX21ldGhvZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsaXZlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zaGlwcGluZ19tZXRob2QgPSBcIkJlem9yZ2VuICh2aWEgUG9zdE5MKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicGlja3VwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnNoaXBwaW5nX21ldGhvZCA9IFwiT3BoYWxlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIHByb2R1Y3QgaW5mb1xyXG4gICAgICAgICAgICAgICAgJChvcmRlcikuZmluZChcIi5vcmRlcl9fbnVtYmVyXCIpLmh0bWwodmFsdWUub3JkZXJfbnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICQob3JkZXIpLmZpbmQoXCIub3JkZXJfX2RhdGVcIikuaHRtbChkYXRlLmdldERhdGUoKSArIFwiIFwiICsgZGF0ZS50b0xvY2FsZVN0cmluZyhcIm5sLU5MXCIsIHttb250aDogXCJsb25nXCJ9KSArIFwiIFwiICsgZGF0ZS5nZXRGdWxsWWVhcigpKVxyXG4gICAgICAgICAgICAgICAgJChvcmRlcikuZmluZChcIi5vcmRlcl9fcHJpY2VcIikuaHRtbChcIuKCrCBcIiArIHZhbHVlLnRvdGFsX29yZGVyX3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICQob3JkZXIpLmZpbmQoXCIub3JkZXJfX3BheW1lbnRtZXRob2RcIikuaHRtbCh2YWx1ZS5wYXltZW50X21ldGhvZCk7XHJcbiAgICAgICAgICAgICAgICAkKG9yZGVyKS5maW5kKFwiLm9yZGVyX19zaGlwcHBpbmdcIikuaHRtbCh2YWx1ZS5zaGlwcGluZ19tZXRob2QpO1xyXG4gICAgICAgICAgICAgICAgJChvcmRlcikuZmluZChcIi5vcmRlcl9fbGluayBhXCIpLmF0dHIoXCJocmVmXCIsIFwiL29yZGVyL1wiICsgdmFsdWUub3JkZXJfbnVtYmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKFwiI29yZGVyc19ib2R5XCIpLmFwcGVuZChvcmRlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBsaXN0IGl0ZW0sIGJlY2F1c2UgdGhpcyBpdGVtIGlzIGFsd2F5cyBlbXB0eVxyXG4gICAgICAgICAgICAkKFwiI3NpbmdsZV9vcmRlclwiKS5maXJzdCgpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXHJcbiAgICB9XHJcbn07IiwidmFyIFByb2R1Y3RzVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxyXG4gICAge1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJQcm9kdWN0ZW4gLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5odG1sKCc8ZGl2IGNsYXNzPVwiY29sLTEyXCI+PGRpdiBjbGFzcz1cImNvbC0zXCIgaWQ9XCJmaWx0ZXJzXCI+PC9kaXY+PGRpdiBjbGFzcz1cImNvbC05XCIgaWQ9XCJwcm9kdWN0c1wiPjwvZGl2PjwvZGl2PicpO1xyXG4gICAgICAgIC8vIGxvYWQgZmlsdGVyc1xyXG4gICAgICAgICQoXCIjZmlsdGVyc1wiKS5sb2FkKCcvdmlld3MvcHJvZHVjdHMvZmlsdGVycy5odG1sJyk7XHJcblxyXG4gICAgICAgIC8vIGxvYWQgcHJvZHVjdHNcclxuICAgICAgICBsb2FkUHJvZHVjdHModmlld0RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRQcm9kdWN0cyh2aWV3RGF0YSlcclxuICAgIHtcclxuICAgICAgICAkKFwiI3Byb2R1Y3RzXCIpLmxvYWQoJy92aWV3cy9wcm9kdWN0cy9wcm9kdWN0cy5odG1sJywgZnVuY3Rpb24gKCkgeyAvLyB3YWFyIGlkID0gJ2NvbXBvbmVudCcgZG9lIC5sb2FkLi4uLi4uXHJcbiAgICAgICAgICAgICQuZWFjaCh2aWV3RGF0YSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgcHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSAkKCc8ZGl2PicpLmFwcGVuZCgkKCcjcHJvZHVjdF9fbGlzdF9faXRlbScpLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJvZHVjdCBpbmZvXHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fc3VidGl0bGVcIikuYXBwZW5kKHZhbHVlLmdlbnJlICsoXCIgfCBQRUdJIFwiKSArIHZhbHVlLnBlZ2lfYWdlICsoXCIgfCBcIikrIFBsYXRmb3JtTG9nbyh2YWx1ZS5wbGF0Zm9ybSkpO1xyXG4gICAgICAgICAgICAgICAgJChwcm9kdWN0KS5maW5kKFwiLnByb2R1Y3RfX2Rlc2NyaXB0aW9uXCIpLmh0bWwoQ3V0U3RyaW5nKHZhbHVlLmRlc2NyaXB0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fcHJpY2VcIikuYXBwZW5kKChcIuKCrCBcIikrdmFsdWUucHJpY2UudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIjYnV0dG9uc19faW5mbywgLnByb2R1Y3RfX2ltYWdlIGEsIC5wcm9kdWN0X190aXRsZVwiKS5hdHRyKFwiaHJlZlwiLCBcInByb2R1Y3QvXCIgKyB2YWx1ZS5lYW5fbnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICQocHJvZHVjdCkuZmluZChcIi5wcm9kdWN0X19pbWFnZSBpbWdcIikuYXR0cihcInNyY1wiLCB2YWx1ZS5pbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIuYWRkdG9jYXJ0XCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoXCIjcHJvZHVjdF9fbGlzdFwiKS5hcHBlbmQocHJvZHVjdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBsaXN0IGl0ZW0sIGJlY2F1c2UgdGhpcyBpdGVtIGlzIGFsd2F5cyBlbXB0eVxyXG4gICAgICAgICAgICAkKFwiI3Byb2R1Y3RfX2xpc3RfX2l0ZW1cIikuZmlyc3QoKS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvL1Nob3cgbW9yZS9sZXNzXHJcbiAgICBmdW5jdGlvbiBDdXRTdHJpbmcodGV4dCl7XHJcbiAgICAgICAgdmFyIFNob3dBbW91bnQgPSA1MDtcclxuICAgICAgICB2YXIgV29yZHNBcnJheSA9IHRleHQuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGlmKFdvcmRzQXJyYXkubGVuZ3RoPlNob3dBbW91bnQpe1xyXG4gICAgICAgICAgICB2YXIgU2hvcnRTdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IoaT0wOyBpPFNob3dBbW91bnQ7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBTaG9ydFN0cmluZyArPSBXb3Jkc0FycmF5W2ldICsgXCIgXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFNob3J0U3RyaW5nK1wiLi4uXCI7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gRXhlY3V0ZSB0aGUgZXZlbnQgd2hlbiAnc29tZXRoaW5nJyBoYXBwZW5zICh3aGVuIGEgYnV0dG9uIGlzIGNsaWNrZWQgZm9yIGV4YW1wbGUpXHJcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTsgLy8gaWYgJ2RvY3VtZW50IHJlYWR5JyBwZXJmb3JtIFwiYWN0aW9uXCJcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRGaWx0ZXJMaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgIC8vIEhpZXIgaGV0IGZvcm11bGllciB2ZXJzdHVyZW4gYWxzIHdlIG9wIGVlbiBjaGVja2JveCBkcnVra2VuXHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikub2ZmKCkub24oXCJjaGFuZ2VcIiwgXCJpbnB1dFt0eXBlPWNoZWNrYm94XVwiLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAkKFwiI3Byb2R1Y3RfZmlsdGVyXCIpLnN1Ym1pdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgZGUgcHJvZHVjdGVubGlqc3QgYWxzIGVlbiB3YWFyZGUgaW4gZGUgc2xpZGVyIHZlcmFuZGVyZChhbGxlIG1hbmllcmVuKVxyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9uKFwiY2hhbmdlIGtleXVwXCIsIFwiaW5wdXRbbmFtZT1wcmljZS1tYXhdLCBpbnB1dFtuYW1lPXByaWNlLW1pbl1cIiwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYoJChcIiNwcmljZW1pblwiKS52YWwoKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3ByaWNlbWluXCIpLnZhbCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICQoXCIjcHJvZHVjdF9maWx0ZXJcIikuc3VibWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikub24oXCJzdWJtaXRcIiwgXCIjcHJvZHVjdF9maWx0ZXJcIiwgYWN0aW9uKTtcclxuICAgIH1cclxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXHJcbiAgICAgICAgbG9hZFByb2R1Y3RzOiBsb2FkUHJvZHVjdHMsXHJcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxyXG4gICAgICAgIHNldEZpbHRlckxpc3RlbmVyOiBzZXRGaWx0ZXJMaXN0ZW5lclxyXG4gICAgfVxyXG59OyIsInZhciBSZWdpc3RlclZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3VG9TaG93KVxyXG4gICAge1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJSZWdpc3RyZXJlbiAtIEFaIEdhbWVzXCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCh2aWV3VG9TaG93LCBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPCAzMjsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2RhZ1wiKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIGkgKyBcIic+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDE5MDA7IGkgPCBkYXRlLmdldEZ1bGxZZWFyKCkgKyAxOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID09IDIwMDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNqYWFyXCIpLmFwcGVuZChcIjxvcHRpb24gdmFsdWU9J1wiICsgaSArIFwiJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPlwiICsgaSArIFwiPC9vcHRpb24+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQoXCIjamFhclwiKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIGkgKyBcIic+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeGVjdXRlIHRoZSBldmVudCB3aGVuICdzb21ldGhpbmcnIGhhcHBlbnMgKHdoZW4gYSBidXR0b24gaXMgY2xpY2tlZCBmb3IgZXhhbXBsZSlcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIHJlZ2lzdGVyIGZvcm1cclxuICAgICAgICAvLyB1c2VyIHByZXNzZXMgJ3JlZ2lzdGVyJ1xyXG5cclxuICAgICAgICAvLyBpZiB1c2VyIHByZXNzZXMgJ3JlZ2lzdGVyJywgcGVyZm9ybSBhY3Rpb25cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vbihcInN1Ym1pdFwiLCBcIiNyZWdpc3RlcmZvcm1cIiwgYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxyXG4gICAgfVxyXG59OyIsInZhciBQcm9kdWN0Vmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHByb2R1Y3QpXHJcbiAgICB7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBwcm9kdWN0LnRpdGxlICsgXCIgLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCgnL3ZpZXdzL3NpbmdsZV9wcm9kdWN0L3NpbmdsZV9wcm9kdWN0Lmh0bWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX2ltYWdlIGltZ1wiKS5hdHRyKFwic3JjXCIsIHByb2R1Y3QuaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X190aXRsZVwiKS5odG1sKHByb2R1Y3QudGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19wcmljZVwiKS5odG1sKFwi4oKsIFwiICsgcHJvZHVjdC5wcmljZS50b0ZpeGVkKDIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX2VhblwiKS5hcHBlbmQocHJvZHVjdC5lYW5fbnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICQoXCIuc2luZ2xlcHJvZHVjdF9fcGxhdGZvcm1cIikuYXBwZW5kKFBsYXRmb3JtTG9nbyhwcm9kdWN0LnBsYXRmb3JtKSk7IC8vIGZ1bmN0aWUgdm9vciBsb2dvXHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX3B1Ymxpc2hlclwiKS5hcHBlbmQoUGxhdGZvcm1Mb2dvKHByb2R1Y3QucHVibGlzaGVyKSk7IC8vIGZ1bmN0aWUgdm9vciBsb2dvXHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX3BlZ2lcIikuYXBwZW5kKHByb2R1Y3QucGVnaV9hZ2UpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19nZW5yZVwiKS5hcHBlbmQocHJvZHVjdC5nZW5yZSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX2Rlc2NyXCIpLmh0bWwocHJvZHVjdC5kZXNjcmlwdGlvbilcclxuICAgICAgICAgICAgICAgICQoXCIuYWRkdG9jYXJ0XCIpLmF0dHIoXCJkYXRhLWlkXCIsIHByb2R1Y3QuZWFuX251bWJlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFVzZXJIZWxwZXIuaXNMb2dlZEluKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5hZGRUb1dpc2hsaXN0QnV0dG9uXCIpLmF0dHIoXCJvbmNsaWNrXCIsIFwiV2lzaGxpc3RIZWxwZXIuYWRkSXRlbShcIiArIHByb2R1Y3QuZWFuX251bWJlciArIFwiKTtcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5hZGRUb1dpc2hsaXN0QnV0dG9uXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKHByb2R1Y3QucmVsZWFzZV9kYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhzID0gW1wiamFudWFyaVwiLCBcImZlYnJ1YXJpXCIsIFwibWFhcnRcIiwgXCJhcHJpbFwiLCBcIm1laVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYXVndXN0dXNcIiwgXCJzZXB0ZW1iZXJcIiwgXCJva3RvYmVyXCIsIFwibm92ZW1iZXJcIiwgXCJkZWNlbWJlclwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX3JlbGVhc2VkYXRlXCIpLmFwcGVuZChkLmdldERheSgpICsgXCIgXCIgKyBtb250aHNbZC5nZXRNb250aCgpXSArIFwiIFwiICsgZC5nZXRGdWxsWWVhcigpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiByZWdpc3RlciBmb3JtXHJcbiAgICAgICAgLy8gdXNlciBwcmVzc2VzICdyZWdpc3RlcidcclxuXHJcbiAgICAgICAgLy8gaWYgdXNlciBwcmVzc2VzICdyZWdpc3RlcicsIHBlcmZvcm0gYWN0aW9uXHJcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxyXG4gICAgfVxyXG59OyIsInZhciBXaXNobGlzdFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXHJcbntcclxuICAgIC8vY2hhbmdlIHZpZXcgb2YgcGFnZVxyXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3RGF0YSlcclxuICAgIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiV0wgVklFVzogSW5zaWRlIHNldFZpZXdcIik7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIldpc2hsaXN0IC0gQVogR2FtZXNcIjtcclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5odG1sKCc8ZGl2IGNsYXNzPVwiY29sLTEyXCI+PGRpdiBjbGFzcz1cImNvbC0xMlwiIGlkPVwid2lzaGxpc3RcIj48L2Rpdj48L2Rpdj4nKTtcclxuXHJcbiAgICAgICAgbG9hZFdpc2hsaXN0KHZpZXdEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2FkV2lzaGxpc3Qodmlld0RhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIldMIFZJRVc6IEluc2lkZSBsb2FkV2lzaExpc3RcIik7XHJcbiAgICAgICAgJChcIiN3aXNobGlzdFwiKS5sb2FkKCcvdmlld3Mvd2lzaGxpc3Qvd2lzaGxpc3QuaHRtbCcsIGZ1bmN0aW9uICgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBhZGQgYWxsIHdpc2hsaXN0IGl0ZW1zIHRvIGh0bWxcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAkLmVhY2godmlld0RhdGEsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIENsb25lIHByb2R1Y3RcclxuICAgICAgICAgICAgICAgIHZhciB3aXNoX19saXN0X19pdGVtID0gJCgnPGRpdj4nKS5hcHBlbmQoJCgnI3dpc2hfX2xpc3RfX2l0ZW0nKS5jbG9uZSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJvZHVjdCBpbmZvXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudCArMVxyXG4gICAgICAgICAgICAgICAgJCh3aXNoX19saXN0X19pdGVtKS5maW5kKFwiLndpc2hfX2xpc3RfX2lkXCIpLmFwcGVuZChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19pbWFnZSBpbWdcIikuYXR0cihcInNyY1wiLCB2YWx1ZS5pbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9fcHJpY2VcIikuYXBwZW5kKChcIuKCrCBcIikrdmFsdWUucHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgJCh3aXNoX19saXN0X19pdGVtKS5maW5kKFwiLndpc2hfX2xpc3RfX3BsYXRmb3JtXCIpLmFwcGVuZChQbGF0Zm9ybUxvZ28odmFsdWUucGxhdGZvcm0pKTtcclxuICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19hdmFpbGFiaWxpdHlcIikuYXBwZW5kKEJlc2NoaWtiYWFyaGVpZEtsZXVyKHZhbHVlLnN0b2NrKSk7XHJcbiAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9fbGlrZWJ1dHRvblwiKS5hcHBlbmQoKTtcclxuICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIiNkZWxldGVfYnRuXCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgJCh3aXNoX19saXN0X19pdGVtKS5maW5kKFwiI2NhcnRfYnRuXCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoXCIjd2lzaF9fbGlzdFwiKS5hcHBlbmQod2lzaF9fbGlzdF9faXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3dpc2hsaXN0X2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IGxpc3QgaXRlbSwgYmVjYXVzZSB0aGlzIGl0ZW0gaXMgYWx3YXlzIGVtcHR5XHJcbiAgICAgICAgICAgICQoXCIjd2lzaF9fbGlzdF9faXRlbVwiKS5maXJzdCgpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7IC8vIGlmICdkb2N1bWVudCByZWFkeScgcGVyZm9ybSBcImFjdGlvblwiICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldERlbGV0ZUxpc3RlbmVyKGFjdGlvbilcclxuICAgIHtcclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vZmYoKS5vbihcImNsaWNrXCIsIFwiI2RlbGV0ZV9idG5cIiwgZnVuY3Rpb24oZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGVhbiA9ICQodGhpcykuZGF0YShcImlkXCIpO1xyXG4gICAgICAgICAgICB2YXIgZGl2X3RvX2hpZGUgPSAkKHRoaXMpLmNsb3Nlc3QoXCIucm93XCIpO1xyXG4gICAgICAgICAgICBhY3Rpb24oZWFuLCBkaXZfdG9faGlkZSk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaGlkZUl0ZW0oZGl2X3RvX2hpZGUpXHJcbiAgICB7XHJcbiAgICAgICAgZGl2X3RvX2hpZGUuZmFkZVRvKDIwMCwgMCkuc2xpZGVVcCgyMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcclxuICAgICAgICBsb2FkV2lzaGxpc3Q6IGxvYWRXaXNobGlzdCxcclxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXIsXHJcbiAgICAgICAgc2V0RGVsZXRlTGlzdGVuZXI6IHNldERlbGV0ZUxpc3RlbmVyLFxyXG4gICAgICAgIGhpZGVJdGVtOiBoaWRlSXRlbVxyXG4gICAgfVxyXG59IiwidmFyIFJlc2V0UGFzc3dvcmRWaWV3SGVscGVyID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcclxuICAgIGZ1bmN0aW9uIHNldFZpZXcodmlld1RvU2hvdylcclxuICAgIHtcclxuICAgICAgICBkb2N1bWVudC50aXRsZSA9IFwiSW5sb2dnZW4gLSBBWiBHYW1lc1wiO1xyXG5cclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKHZpZXdUb1Nob3cpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFjdGlvbkxpc3RlbmVyIHRoYXQgZXhlY3V0ZXMgYWN0aW9ucyBvbiBzcGVjaWZpYyBldmVudHNcclxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGV2ZW50SGFuZGxlcilcclxuICAgIHtcclxuICAgICAgICAvLyQoZG9jdW1lbnQpLnJlYWR5KGV2ZW50SGFuZGxlcik7XHJcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikub24oXCJzdWJtaXRcIiwgXCIjcmVzZXRmb3JtXCIsIGV2ZW50SGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcclxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXJcclxuICAgIH1cclxufTtcclxuXHJcbi8qXHJcbnZhciBSZXNldFBhc3N3b3JkVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXHJcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxyXG4gICAge1xyXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJ3ZpZXdzL3Jlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZC5odG1sJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWN0aW9uTGlzdGVuZXIgdGhhdCBleGVjdXRlcyBhY3Rpb25zIG9uIHNwZWNpZmljIGV2ZW50c1xyXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoZXZlbnRIYW5kbGVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vJChkb2N1bWVudCkucmVhZHkoZXZlbnRIYW5kbGVyKTtcclxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vbihcInN1Ym1pdFwiLCBcIiNyZXNldGZvcm1cIiwgZXZlbnRIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxyXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxyXG4gICAgfVxyXG59O1xyXG4qLyJdfQ==
