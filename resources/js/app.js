function PlatformLogo(e){switch(e=e.toUpperCase()){case"PS1":return"<img src='/resources/images/icons/ps1.png' />";case"PS4":return"<img src='/resources/images/icons/ps4.png' />";case"PC":return"<img src='/resources/images/icons/windows.png' />";case"XBOX":return"<img src='/resources/images/icons/xbox.png' />";case"NES":return"<img src='/resources/images/icons/nes.png' />";case"N64":return"<img src='/resources/images/icons/n64.png' />";case"NINTENDO SWITCH":return"<img src='/resources/images/icons/switch.png' />";default:return e;case"NINTENDO":return"<img src='/resources/images/publishers/nintendo.png' />";case"UBISOFT":return"<img src='/resources/images/publishers/ubisoft.png' />";case"ELECTRONIC ARTS":return"<img src='/resources/images/publishers/ea.png' />"}}function BeschikbaarheidKleur(e){return e<=0?"<img src='/resources/images/availability/buttonred.png' />":e>=1?"<img src='/resources/images/availability/buttongreen.png' />":e}function getOffset(e){return e=e.getBoundingClientRect(),{left:e.left+window.scrollX,top:e.top+window.scrollY}}function CookieHelper(){this.getCookie=function(e){for(var t=document.cookie.split(";"),i=0;i<t.length;i++){var n=t[i].split("=");if(n[0].trim()==e)return n[1]}},this.createCookie=function(e,t){var i=new Date;i.setTime(i.getTime()+864e5);var n="expires="+i.toUTCString();document.cookie=e+"="+t+";"+n+";path=/"},this.deleteCookie=function(e){document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"}}function FavoriteListHelper(){var e=function(e){$.ajax({url:"http://localhost:8081/favoritelist/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan je favorieten.")},error:function(e,t,i){alert("Product is al in je favorieten.")}})};return{addItem:e}}function showLoadScreen(){$("#component").html('<div class="spinner"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div> </div>')}function onLoadPage(){$(".mmenu").empty(),$(".nav").clone().appendTo(".mmenu"),UserHelper.isAdmin()?($(".visible-admin").css("display","block"),$(".visible-customer").css("display","block"),$(".inloggen_text").hide()):UserHelper.isCustomer()?($(".visible-customer").css("display","block"),$(".inloggen_text").hide()):($(".visible-admin").hide(),$(".visible-customer").hide(),$("#inloggen_text").css("display","block"))}function UserHelper(){this.isLogedIn=function(){var e=CookieHelper.getCookie("access_token");return void 0!=e&&""!=e},this.isCustomer=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("customer"==e||"admin"==e)return!0}return!1},this.isAdmin=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("admin"==e)return!0}return!1},this.decodeToken=function(){var e=CookieHelper.getCookie("access_token");if(void 0!=e&&""!=e){var t=e.split(".")[1];return JSON.parse(atob(t))}},this.getUserInfo=function(e){$.ajax({url:"https://api.az-games.nl/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){Router.route("/login")}})}}function WishlistHelper(){this.addItem=function(e){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan Wishlist.")},error:function(e,t,i){alert("Product is al in Wishlist.")}})}}$(document).on("click","span.like",function(e){$(this).toggleClass("like--active")}),$(document).on("click","span.single_like",function(e){$(this).toggleClass("single_like--active")}),$(document).on("click","a.order__navigate",function(e){if(e.preventDefault(),0==$(this).hasClass("disabled")){var t=$(this).data("step");$("ul.order-steps li").removeClass("active"),$("ul.order-steps li."+t).addClass("active"),$(".order__step").removeClass("order__step--active"),$("#"+t).addClass("order__step--active")}}),$(document).on("change","select#shipping_method",function(e){var t=$(this).val();""!=t?$(this).parents(".order__step").find(".btn--next").removeClass("disabled"):$(this).parents(".order__step").find(".btn--next").addClass("disabled"),$(".shipping__fields").hide(),$("."+t+"_fields").show()}),$(document).on("change","select#payment_method",function(e){var t=$(this).val();""!=t?($(this).parents(".order__step").find(".btn--next").removeClass("disabled"),$(this).parents(".order__step").find(".btn--next").attr("disabled",!1)):($(this).parents(".order__step").find(".btn--next").addClass("disabled"),$(this).parents(".order__step").find(".btn--next").attr("disabled",!0))});var Router=function(){function e(e,r){if(0!=t(e)&&""!=e){var o=i(e);switch(o[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(o[1])).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;case"logout":new LogoutController(new LogoutViewHelper,new LogoutModel).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"resetpassword":new ResetPasswordController(new ResetPasswordViewHelper,new ResetPasswordModel).main();break;case"wishlist":new WishlistController(new WishlistViewHelper,new WishlistModel).main();break;case"admin":new AdminController(new AdminViewHelper,new AdminModel).main();break;case"admin_user":new AdminUserController(new AdminUserViewHelper,new AdminUserModel(o[1])).main();break;case"favoritelist":new FavoriteListController(new FavoriteListViewHelper,new FavoriteListModel).main();break;case"checkout":new CheckoutController(new CheckoutViewHelper,new CheckoutModel).main();break;case"orders":new OrdersController(new OrdersViewHelper,new OrdersModel).main();break;case"order":new OrderController(new OrderViewHelper,new OrderModel(o[1])).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=r&&""!=e&&"string"==typeof e&&(n({},"A-Z Games",e),$(".sidebar").removeClass("sidebar--open"),$(".overlay").removeClass("overlay--visible"),$("body").removeClass("sidebar--open"),showLoadScreen(),window.scrollTo(0,0))}}function t(e){return e.indexOf("http")==-1&&e.indexOf("www")==-1&&e.indexOf("mailto")==-1||(window.location=e,!1)}function i(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function n(e,t,i){window.history.pushState(e,t,i)}return baseUrl="project-webshop/",{route:e}};$(document).ready(function(){function e(e,t){t?$(e).removeClass("sidebar--open"):$(e).toggleClass("sidebar--open"),$(".overlay").toggleClass("overlay--visible"),$("body").toggleClass("sidebar--open")}$(".sidebar-toggle").click(function(t){t.preventDefault();var i=$(this).data("sidebar");e($("#"+i))}),$(".sidebar__close").click(function(t){e($(this).parent().parent())}),$(".overlay").click(function(t){e($(".sidebar"),!0)})}),$(document).on("mouseenter",".hasTooltip",function(e){var t=$(this).data("tooltip"),i=getOffset(this),n=$("<div class='tooltip'>"+t+"</div>");$("body").append(n),i.top=i.top+$(this).outerHeight(),i.left=i.left+$(this).outerWidth()/2-$(".tooltip").outerWidth()/2,n.css("left",i.left),n.css("top",i.top)}),$(document).on("mouseleave",".hasTooltip",function(e){$("body").find(".tooltip").remove()});var Router=new Router,CookieHelper=new CookieHelper,UserHelper=new UserHelper,WishlistHelper=new WishlistHelper;$.fn.serializeObject=function(){var e={},t=this.serializeArray();return $.each(t,function(){void 0!==e[this.name]?(e[this.name].push||(e[this.name]=[e[this.name]]),""!=this.value&&e[this.name].push(this.value)):""!=this.value&&(e[this.name]=this.value||"")}),e};var AdminUserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function i(e,t){e.date_of_birth=new Date(Date.UTC(e.jaar,e.maand,e.dag)),delete e.jaar,delete e.maand,delete e.dag,$.ajax({url:"https://api.az-games.nl/admin/users/"+e.user_id,type:"PATCH",dataType:"json",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function n(e,t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t()},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:t,saveUserInfo:i,deleteUser:n}},AdminModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/admin/users",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:e}},CartModel=function(){function e(e){var t=CookieHelper.getCookie("cart");void 0!=t&&e(JSON.parse(t))}function t(e,t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",contentType:"json",success:function(e){cart={ean_number:e[0].ean_number,title:e[0].title,price:e[0].price,image:e[0].image},t(cart);var i=CookieHelper.getCookie("cart");void 0==i?CookieHelper.createCookie("cart",JSON.stringify([cart])):(i=JSON.parse(i),i.push(cart),CookieHelper.createCookie("cart",JSON.stringify(i)))},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function n(e){for(cart=JSON.parse(CookieHelper.getCookie("cart")),i=0;i<cart.length;i++)if(cart[i].ean_number==e){cart.splice(i,1);break}CookieHelper.createCookie("cart",JSON.stringify(cart))}return{getCart:e,addProduct:t,removeProduct:n}},CheckoutModel=function(){function e(e){var t=CookieHelper.getCookie("cart");e(void 0!=t&&""!=t?JSON.parse(t):[])}function t(e,t){e.status="paid",e.btw_percentage=21,e.order_date=new Date,e.delivery_costs=3.95,e.cart=JSON.parse(CookieHelper.getCookie("cart")),$.ajax({url:"https://api.az-games.nl/orders",type:"post",dataType:"json",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){CookieHelper.deleteCookie("cart"),t()},error:function(e,t,i){console.log("someting went wrong")}})}return{getOrderInformation:e,saveOrder:t}},FavoriteListModel=function(){function e(e){$.ajax({url:"http://localhost:8081/favoritelist",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){console.log("getFavoriteList ajax done"),e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function t(e,t){$.ajax({url:"http://localhost:8081/favoritelist/"+String(e),type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getFavoriteList:e,deleteFromFavoriteList:t}},LoginModel=function(){function e(e,t,i){$.ajax({url:"https://api.az-games.nl/user/login",type:"GET",dataType:"json",headers:{Authorization:"Basic "+btoa(e+":"+t)},success:function(e){CookieHelper.createCookie("access_token",e.access_token),CookieHelper.createCookie("user_id",e.user_id),onLoadPage(),i(e)},error:function(e,t,i){$("#error_message").show()}})}return{login:e}},LogoutModel=function(){function e(e){function t(e){for(var t=document.cookie.split(";"),i=0;i<t.length;i++){var n=t[i].split("=");if(n[0].trim()==e)return n[1]}}$.ajax({url:"https://api.az-games.nl/user/logout",type:"post",dataType:"json",data:JSON.stringify({user_id:t("user_id")}),success:function(t){CookieHelper.deleteCookie("access_token"),CookieHelper.deleteCookie("user_id"),onLoadPage(),e(t)},error:function(e,t,i){$("#error_message").show()}})}return{logout:e}},OrdersModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/orders",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getOrders:e}},OrderModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/orders/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function i(e,t){$.ajax({url:"http://localhost:8081/favoritelist/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){alert("Product is al in je favorieten.")}})}return{getOrder:t,addToFavoriteList:i}},ProductsModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/products?"+e,type:"get",dataType:"json",success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){e.date_of_birth=new Date(Date.UTC(e.jaar,e.maand,e.dag)),delete e.jaar,delete e.maand,delete e.dag,$.ajax({url:"https://api.az-games.nl/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,insertion:e.tussenvoegsel,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer,postal_code:e.postcode,number:e.huisnummer,street_name:e.straatnaam,city:e.plaats}),success:function(e){t(e)},error:function(e,t,i){$("#regi_api_error_message").show()}})}return{register:e}},ResetPasswordModel=function(){function e(e,t){console.log(e),$.ajax({url:"https://api.az-games.nl/user/resetpassword",type:"post",dataType:"json",data:JSON.stringify({email:e.e_mailadres,secret_question_answer:e.security_answer,secret_question:e.security_question,new_password:e.wachtwoord,repeat_password:e.wachtwoord2}),success:function(e){t(e)},error:function(e,t,i){$("#reset_password_api_error_message").show()}})}return{resetpassword:e}},ProductModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{GetProductInfo:t}},UserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/users/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,i){$("#component").load("/error.html")}})}return{GetUserInfo:t}},WishlistModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/wishlist",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function t(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id"),type:"post",dataType:"json",data:JSON.stringify({wishlist_id:e.wishlist_id}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}function i(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+String(e),type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,i){$("#component").load("/views/error/error.html")}})}return{getWishlist:e,addToWishlist:t,deleteFromWishlist:i}},AdminUserController=function(e,t){function i(){c.setActionListener(n),e.setSaveListener(o),e.setDeleteListener(s)}function n(){a.getPage(r)}function r(e){c.setView(e)}function o(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();a.saveUserInfo(t,function(e){alert("Gebruiker succesvol geüpdate.")})}function s(e){a.deleteUser(e,function(){alert("Gebruiker succesvol gedelete."),Router.route("/admin")})}var a=t,c=e;return{main:i}},AdminController=function(e,t){function i(){s.setActionListener(n)}function n(){o.getPage(r)}function r(e){s.setView(e)}var o=t,s=e;return{main:i}},CartController=function(e,t){function i(){s.getCart(function(e){a.setView(e)})}function n(e){s.addProduct(e,function(e){a.addItem(e)})}function r(e){s.removeProduct(e,function(e){})}function o(){a.setActionListener(i),a.setAddProductListener(n),a.setRemoveListener(r)}var s=t,a=e;return{main:o}},CheckoutController=function(e,t){function i(e){o.getOrderInformation(function(e){s.setView(e)})}function n(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();o.saveOrder(t,function(){s.finishOrder(),s.clearCart()})}function r(){0==UserHelper.isLogedIn()?Router.route("/login"):(s.setActionListener(i),s.setOrderListener(n))}var o=t,s=e;return{main:r}},DeleteController=function(e,t){},ErrorController=function(e){function t(){i.setView()}var i=e;return{main:t}},FavoriteListController=function(e,t){function i(){a.setActionListener(n),a.setDeleteListener(o)}function n(){s.getFavoriteList(r)}function r(e){a.setView(e)}function o(e,t){s.deleteFromFavoriteList(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:i}},LoginController=function(e,t){function i(e){e.preventDefault(),e.stopImmediatePropagation();var t={};$.each($(this).serializeArray(),function(e,i){t[i.name]=i.value}),r.login(t.email,t.password,function(e){$(".inloggen_text").hide(),$(".uitloggen_text").show(),Router.route("products")})}function n(){o.setView(),o.setActionListener(i)}var r=t,o=e;return{main:n}},LogoutController=function(e,t){function i(e){r.logout(function(e){$(".inloggen_text").show(),$(".uitloggen_text").hide(),o.setView()})}function n(){o.setActionListener(i)}var r=t,o=e;return{main:n}},OrdersController=function(e,t){function i(t){r.getOrders(function(t){e.setView(t)})}function n(){o.setActionListener(i)}var r=t,o=e;return{main:n}},OrderController=function(e,t){function i(t){o.getOrder(function(t){e.setView(t)})}function n(){s.setActionListener(i),s.setAddToFavoritesListener(r)}function r(e){o.addToFavoriteList(e,function(){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan je favorieten.")})}var o=t,s=e;return{main:n}},ProductsController=function(e,t){function i(){o.getPage("",function(e){s.setView(e)})}function n(e){e.preventDefault();var t=$(this).serialize();o.getPage(t,function(e){s.loadProducts(e)})}function r(){s.setActionListener(i),s.setFilterListener(n)}var o=t,s=e;return{main:r}},RegisterController=function(e,t){function i(){event.preventDefault(),$("#regi_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,i){e[i.name]=i.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag;var t=!1,i=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];$.each(i,function(e,t){$("#"+t).removeClass("invalid")}),$.each(i,function(i,n){""==e[n]&&($("#"+n).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#register_error_message").show());var n=!1;return e.wachtwoord!=e.wachtwoord2&&(n=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!n&&void r.register(e,function(e){o.setView("/views/register/after_register.html")})}function n(){o.setView("/views/register/register.html"),o.setActionListener(i)}var r=t,o=e;return{main:n}},ResetPasswordController=function(e,t){function i(){console.log("in actionPerformed"),event.preventDefault(),$("#reset_password_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,i){e[i.name]=i.value});var t=!1,i=["wachtwoord","wachtwoord2","e_mailadres","security_answer"];$.each(i,function(e,t){$("#"+t).removeClass("invalid")}),$.each(i,function(i,n){""==e[n]&&($("#"+n).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#reset_error_message").show());var n=!1;return e.wachtwoord!=e.wachtwoord2&&(n=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!n&&(console.log("continued"),void r.resetpassword(e,function(e){o.setView("views/resetpassword/after_reset.html")}))}function n(){o.setView("views/resetpassword/resetpassword.html"),o.setActionListener(i)}var r=t,o=e;return{main:n}},ProductController=function(e,t){function i(t){e.setView(t)}function n(){t.GetProductInfo(i)}return{main:n,showView:i}},WishlistController=function(e,t){function i(){s.getWishlist(n)}function n(e){a.setView(e)}function r(){a.setActionListener(i),a.setDeleteListener(o)}function o(e,t){s.deleteFromWishlist(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:r}},CartViewHelper=function(){function e(e){""!=e&&e.forEach(function(e,t){i(e)})}function t(e){e=parseFloat(e)+parseFloat($(".cart__total .price").html().substr(1)),$(".cart__total .price").html("€"+parseFloat(e).toFixed(2))}function i(e){var i=$("<div>").html($(".sidebar__content__tmp").html());i.find(".cart__item__title").html(e.title),i.find(".cart__item__price").html("€"+e.price.toFixed(2)),i.find(".cart__item__image img").attr("src",e.image),i.find(".cart__item").attr("data-id",e.ean_number),$(".cart").append(i);var n=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(n)+1),t(e.price)}function n(e){$(document).ready(e)}function r(e){$("body").on("click",".addtocart",function(t){t.preventDefault();var i=$(this).data("id");e(i),$(this).closest("#to_shop_cart").find("#shop_cart").fadeTo(0,100).delay(1e3).fadeTo(600,0)})}function o(e){$("body").on("click",".cart__item__remove",function(i){var n=$(this).parent(),r=$(this).parent().data("id");$(n).addClass("cart__item--removed"),$(n).on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd",function(){$(this).remove()});var o=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(o)-1),e(r),t(-$(n).find(".cart__item__price").html().substr(1))})}return{setView:e,addItem:i,updateTotalPrice:t,setActionListener:n,setAddProductListener:r,setRemoveListener:o}},AdminViewHelper=function(){function e(e){$(document).ready(e)}function t(e){document.title="Admin - AZ Games",$("#component").load("/views/admin/admin.html",function(){$.each(e,function(e,t){var i=$("#single_user").clone();$(i).find(".user__firstname").html(t.first_name),$(i).find(".user__firstname").attr("href","/admin_user/"+t.user_id),$(i).find(".user__insertion").html(t.insertion),$(i).find(".user__lastname").html(t.surname),$(i).find(".user__email").html(t.email),$(i).find(".user__phonenumber").html(t.phone_number),$("#users_body").append(i)}),$("#single_user").first().remove()})}return{setActionListener:e,setView:t}},AdminUserViewHelper=function(){function e(e){$(document).ready(e)}function t(e){$("#component").load("/views/adminuser/adminuser.html",function(){$("#delete_btn").attr("data-id",e.user_id),$("#first_name").val(e.first_name),$("#insertion").val(e.insertion),$("#surname").val(e.surname),$("#user_type").val(e.user_type),$("#email").val(e.email),$("#password").attr("placeholder","Vul hier iets in om het wachtwoord te veranderen"),$("#gender").val(e.gender),$("#date_of_birth").val(e.date_of_birth),$("#phone_number").val(e.phone_number),$("#is_active").val(e.is_active),$("#user_id").val(e.user_id);var t=new Date,n=new Date(e.date_of_birth);for(i=1;i<32;i++)i==n.getDate()?$("#dag").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<t.getFullYear()+1;i++)i==n.getFullYear()?$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"'>"+i+"</option>");$("#maand").val(n.getMonth())})}function n(e){$(document).on("submit","#userform",e)}function r(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault(),e($(this).data("id"))})}return{setActionListener:e,setView:t,setSaveListener:n,setDeleteListener:r}},CheckoutViewHelper=function(){function e(e){document.title="Bestellen - AZ Games",$("#component").load("/views/checkout/checkout.html",function(){void 0!=e&&""!=e?($.each(e,function(e,t){var i=$("#product").clone();$(i).find(".product__title").html(t.title),$(i).find(".product__image img").attr("src",t.image),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$("#product__list").append(i),$("#product__list").append("<hr />")}),$("#order_info .order__navigate").first().removeClass("disabled")):$("#product__list").html("<div class='message message--info'>Je winkelwagen is nog leeg, stop er producten in om deze te kunnen bestellen.</div>"),$("#product").first().remove(),$("#total").appendTo("#product__list"),$(".total__price").html($(".cart__total .price").html());var t=new Date;t.setDate(t.getDate()+1),$(".delivery_date").html(t.getDate()+" "+t.toLocaleString("nl-NL",{month:"long"})),$(".delivery__calendar__month").html(t.toLocaleString("nl-NL",{month:"short"}).toUpperCase()),$(".delivery__calendar__day").html(t.getDate()),UserHelper.getUserInfo(function(e){$(".adres__name").html(e.first_name+" "+e.insertion+" "+e.surname),$(".adres__street").html(e.address.street+" "+e.address.house_number),$(".adres__postalcode").html(e.address.postal_code+" "+e.address.city.toUpperCase())})})}function t(){$("ul.order-steps li").removeClass("active"),$("ul.order-steps li a").addClass("disabled"),$("ul.order-steps li.confirmation").addClass("active"),$(".order__step").removeClass("order__step--active"),$("#confirmation").addClass("order__step--active")}function i(){$(".cart").empty(),$(".cart_button .count").html("0"),$(".cart__total .price").html("€00.00")}function n(e){$(document).ready(e)}function r(e){$(document).on("submit","#orderform",e)}return{setView:e,setActionListener:n,setOrderListener:r,finishOrder:t,clearCart:i}},FavoriteListViewHelper=function(){function e(e){document.title="Favorietenlijst - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="favoritelist"></div></div>'),t(e)}function t(e){$("#favoritelist").load("/views/favoritelist/favoritelist.html",function(){var t=0,i=0;$.each(e,function(e,n){var r=$("<div>").append($("#favorite__list__item").clone());t+=1,$(r).find(".favorite__list__id").append(t),$(r).find(".favorite__list__image img").attr("src",n.image),$(r).find(".favorite__list__title").html(n.title),$(r).find(".favorite__list__price").append("€ "+n.price),$(r).find(".favorite__list__platform").append(PlatformLogo(n.platform)),$(r).find(".favorite__list__availability").append(BeschikbaarheidKleur(n.stock)),$(r).find("#delete_btn").attr("data-id",n.ean_number),$(r).find("#cart_btn").attr("data-id",n.ean_number),$("#favorite__list").append(r),i++}),0==i&&$("#favoritelist_error_message").show(),$("#favorite__list__item").first().remove()})}function i(e){$(document).ready(e)}function n(e){console.log("setDeleteListener()"),$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var i=$(this).data("id"),n=$(this).closest(".row");e(i,n)})}function r(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadFavoritelist:t,setActionListener:i,setDeleteListener:n,hideItem:r}},LogoutViewHelper=function(){function e(){document.title="Uitloggen - AZ Games",$("#component").load("/views/logout/logout.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},ErrorViewHelper=function(){function e(){document.title="Oeps - AZ Games",$("#component").load("/views/error/error.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},LoginViewHelper=function(){function e(){document.title="Inloggen - AZ Games",$("#component").load("/views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},OrdersViewHelper=function(){function e(e){document.title="Bestelgeschiedenis - AZ Games",$("#component").load("/views/orders/orders.html",function(){$.each(e,function(e,t){var i=$("#single_order").clone(),n=new Date(t.order_date);switch(t.shipping_method){case"deliver":t.shipping_method="Bezorgen (via PostNL)";break;case"pickup":t.shipping_method="Ophalen"}$(i).find(".order__number").html(t.order_number),$(i).find(".order__date").html(n.getDate()+" "+n.toLocaleString("nl-NL",{month:"long"})+" "+n.getFullYear()),$(i).find(".order__price").html("€ "+t.total_order_price),$(i).find(".order__paymentmethod").html(t.payment_method),$(i).find(".order__shippping").html(t.shipping_method),$(i).find(".order__link a").attr("href","/order/"+t.order_number),$("#orders_body").append(i)}),$("#single_order").first().remove()})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},OrderViewHelper=function(){function e(e){document.title="Bestelgeschiedenis - AZ Games",$("#component").load("/views/order/order.html",function(){var t=new Date(e.order_date);switch(e.shipping_method){case"deliver":e.shipping_method="Bezorgen (via PostNL)";break;case"pickup":e.shipping_method="Ophalen"}$(".order__date").html(t.getDate()+" "+t.toLocaleString("nl-NL",{month:"long"})+" "+t.getFullYear()),$(".order__paymentmethod").html(e.payment_method),$(".order__shippping").html(e.shipping_method),$.each(e.products,function(e,t){var i=$("#product").clone();$(i).find(".product__title").html(t.title),$(i).find(".product__image img").attr("src",t.image),$(i).find(".product__amount").html("<b>Aantal:</b> "+t.amount),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$(i).find(".addToFavoritesButton").attr("data-id",t.ean_number),$("#product__list").append(i),$("#product__list").append("<hr />")}),$("#product").first().remove(),$("#total").appendTo("#product__list"),$(".total__price").html("€ "+e.total_order_price)})}function t(e){$(document).ready(e)}function i(e){$("#component").on("click",".addToFavoritesButton",function(t){t.preventDefault();var i=$(this).data("id");e(i)})}return{setView:e,setActionListener:t,setAddToFavoritesListener:i}},ProductsViewHelper=function(){function e(e){document.title="Producten - AZ Games",$("#component").html('<div class="col-12"><div class="col-3" id="filters"></div><div class="col-9" id="products"></div></div>'),$("#filters").load("/views/products/filters.html"),t(e)}function t(e){$("#products").load("/views/products/products.html",function(){$.each(e,function(e,t){var i=$("<div>").append($("#product__list__item").clone());$(i).find(".product__title").html(t.title),$(i).find(".product__subtitle").append(t.genre+" | PEGI "+t.pegi_age+" | "+PlatformLogo(t.platform)),$(i).find(".product__description").html(n(t.description)),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$(i).find("#buttons__info, .product__image a, .product__title").attr("href","product/"+t.ean_number),$(i).find(".product__image img").attr("src",t.image),$(i).find(".addtocart").attr("data-id",t.ean_number),$("#product__list").append(i)}),$("#product__list__item").first().remove()})}function n(e){var t=50,n=e.split(" ");if(n.length>t){var r="";for(i=0;i<t;i++)r+=n[i]+" ";return r+"..."}return e}function r(e){$(document).ready(e)}function o(e){$("#component").off().on("change","input[type=checkbox]",function(e){$("#product_filter").submit()}),$("#component").on("change keyup","input[name=price-max], input[name=price-min]",function(e){null==$("#pricemin").val()?$("#pricemin").val(0):$("#product_filter").submit()}),$("#component").on("submit","#product_filter",e);
}return{setView:e,loadProducts:t,setActionListener:r,setFilterListener:o}},RegisterViewHelper=function(){function e(e){document.title="Registreren - AZ Games",$("#component").load(e,function(){var e=new Date;for(i=1;i<32;i++)$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<e.getFullYear()+1;i++)2e3!=i?$("#jaar").append("<option value='"+i+"'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>")})}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}},ResetPasswordViewHelper=function(){function e(e){document.title="Inloggen - AZ Games",$("#component").load(e)}function t(e){$("#component").on("submit","#resetform",e)}return{setView:e,setActionListener:t}},ProductViewHelper=function(){function e(e){document.title=e.title+" - AZ Games",$("#component").load("/views/single_product/single_product.html",function(){$(".singleproduct__image img").attr("src",e.image),$(".singleproduct__title").html(e.title),$(".singleproduct__price").html("€ "+e.price.toFixed(2)),$(".singleproduct__ean").append(e.ean_number),$(".singleproduct__platform").append(PlatformLogo(e.platform)),$(".singleproduct__publisher").append(PlatformLogo(e.publisher)),$(".singleproduct__pegi").append(e.pegi_age),$(".singleproduct__genre").append(e.genre),$(".singleproduct__descr").html(e.description),$(".addtocart").attr("data-id",e.ean_number),UserHelper.isLogedIn()?$(".addToWishlistButton").attr("onclick","WishlistHelper.addItem("+e.ean_number+");"):$(".addToWishlistButton").hide();var t=new Date(e.release_date),i=["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"];$(".singleproduct__releasedate").append(t.getDay()+" "+i[t.getMonth()]+" "+t.getFullYear())})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},WishlistViewHelper=function(){function e(e){document.title="Wishlist - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="wishlist"></div></div>'),t(e)}function t(e){$("#wishlist").load("/views/wishlist/wishlist.html",function(){var t=0,i=0;$.each(e,function(e,n){var r=$("<div>").append($("#wish__list__item").clone());t+=1,$(r).find(".wish__list__id").append(t),$(r).find(".wish__list__image img").attr("src",n.image),$(r).find(".wish__list__title").html(n.title),$(r).find(".wish__list__price").append("€ "+n.price),$(r).find(".wish__list__platform").append(PlatformLogo(n.platform)),$(r).find(".wish__list__availability").append(BeschikbaarheidKleur(n.stock)),$(r).find("#delete_btn").attr("data-id",n.ean_number),$(r).find("#cart_btn").attr("data-id",n.ean_number),$("#wish__list").append(r),i++}),0==i&&$("#wishlist_error_message").show(),$("#wish__list__item").first().remove()})}function i(e){$(document).ready(e)}function n(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var i=$(this).data("id"),n=$(this).closest(".row");e(i,n)})}function r(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadWishlist:t,setActionListener:i,setDeleteListener:n,hideItem:r}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
