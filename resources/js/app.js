var Router=function(){function e(e,r){if(0!=n(e)){var i=t(e);switch(i[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(i[1])).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=r&&(""==e&&(e="index.html"),o({},"A-Z Games",e))}}function n(e){return e.indexOf("http")==-1&&e.indexOf("https")==-1&&e.indexOf("www")==-1||(window.location=e,!1)}function t(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function o(e,n,t){window.history.pushState(e,n,t)}return baseUrl="project-webshop/",{route:e}},LoginModel=function(){function e(e,n,t){$.ajax({url:"http://84.84.245.29:243/user/login",type:"post",dataType:"json",data:JSON.stringify({email:e,password:n}),success:function(e){document.cookie="access_token="+e.access_token,t(e)},error:function(e,n,t){$("#error_message").show()}})}return{login:e}},PageModel=function(){function e(e){$.ajax({url:"http://84.84.245.29:243/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+n("access_token")},success:function(n){e(n)},error:function(e,n,t){$("#component").load("error.html")}})}function n(e){for(var n=document.cookie.split(";"),t=0;t<n.length;t++){var o=n[t].split("=");if(o[0]==e)return o[1]}}return{getPage:e}},ProductsModel=function(){function e(e){$.ajax({url:"http://84.84.245.29:243/products",type:"get",dataType:"json",success:function(n){e(n)},error:function(e,n,t){$("#component").load("error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,n,t){$.ajax({url:"http://84.84.245.29:243/user/login",type:"post",dataType:"json",data:JSON.stringify({email:e,password:n}),success:function(e){t(e),console.log(e)},error:function(e,n,t){$("#error_message").show()}})}return{register:e}},ErrorController=function(e){function n(){t.setView()}var t=e;return{main:n}},LoginController=function(e,n){function t(e){e.preventDefault();var n={};$.each($(this).serializeArray(),function(e,t){n[t.name]=t.value}),r.login(n.email,n.password,function(e){$("#inloggen_text").hide(),$("#uitloggen_text").show(),new PageController(new PageViewHelper,new PageModel).main()})}function o(){i.setView(),i.setActionListener(t)}var r=n,i=e;return{main:o}},PageController=function(e,n){function t(e){r.getPage(function(e){i.setView(e)})}function o(){i.setActionListener(t)}var r=n,i=e;return{main:o}},ProductsController=function(e,n){function t(){r.getPage(function(e){i.setView(e)})}function o(){i.setActionListener(t)}var r=n,i=e;return{main:o}},RegisterController=function(e,n){function t(){var e=$("#e-mailadres").val(),n=$("#wachtwoord").val(),t=$("#voornaam").val(),o=$("#achternaam").val(),i=$("#gender_select option:selected").text(),s=new Date($("#jaar_select option:selected").val(),$("#maand_select option:selected").val(),$("#dag_select option:selected").val()),c=$("#mobiel nummer (optioneel)").val();r.register(e,n,t,o,i,s,c,function(e){})}function o(){i.setView(),i.setActionListener(t)}var r=n,i=e;return{main:o}},ErrorViewHelper=function(){function e(){$("#component").load("views/error/error.html")}function n(e){$(document).ready(e)}return{setView:e,setActionListener:n}},LoginViewHelper=function(){function e(){$("#component").load("views/login/login.html")}function n(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:n}},PageViewHelper=function(){function e(e){$("#component").load("views/page/page.html",function(){"customer"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een customer bent"),"admin"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een administrator bent")})}function n(e){$(document).ready(e)}return{setView:e,setActionListener:n}},ProductsViewHelper=function(){function e(e){$("#component").load("views/products/products.html",function(){$.each(e,function(e,n){var t=$("<div>").append($("#product__list__item").clone());$(t).find(".product__title").html(n.ean_number),$(t).find(".product__price").html(n.price),$(t).find(".product__image img").attr("src",n.image),e%4==0&&0==e?$("#product__list").append("<div class='row'>"+t.html()):e%4==0?$("#product__list").append("</div><div class='row'>"+t.html()):$("#product__list div.row").last().append(t.html())}),$("</div>").appendTo("#product__list"),$("#product__list__item").first().remove()})}function n(e){$(document).ready(e)}return{setView:e,setActionListener:n}},RegisterViewHelper=function(){function e(e){$("#component").load(e)}function n(e){$("#component").on("click","#registerbutton",e)}return{setView:e,setActionListener:n}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
