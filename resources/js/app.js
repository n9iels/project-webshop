function PlatformLogo(e){switch(e=e.toUpperCase()){case"PS1":return"<img src='/resources/images/icons/ps1.png' />";case"PS4":return"<img src='/resources/images/icons/ps4.png' />";case"PC":return"<img src='/resources/images/icons/windows.png' />";case"XBOX":return"<img src='/resources/images/icons/xbox.png' />";case"NES":return"<img src='/resources/images/icons/nes.png' />";case"N64":return"<img src='/resources/images/icons/n64.png' />";case"NINTENDO SWITCH":return"<img src='/resources/images/icons/switch.png' />";default:return e;case"NINTENDO":return"<img src='/resources/images/publishers/nintendo.png' />";case"UBISOFT":return"<img src='/resources/images/publishers/ubisoft.png' />";case"ELECTRONIC ARTS":return"<img src='/resources/images/publishers/ea.png' />"}}function BeschikbaarheidKleur(e){return e<=0?"<img src='/resources/images/availability/buttonred.png' />":e>=1?"<img src='/resources/images/availability/buttongreen.png' />":e}function getOffset(e){return e=e.getBoundingClientRect(),{left:e.left+window.scrollX,top:e.top+window.scrollY}}function CartHelper(){this.removeProduct=function(e){},this.addProduct=function(e){}}function CookieHelper(){this.getCookie=function(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var i=t[n].split("=");if(i[0].trim()==e)return i[1]}},this.createCookie=function(e,t){document.cookie=e+"="+t+";"},this.deleteCookie=function(e){document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"}}function showLoadScreen(){$("#component").html('<div class="spinner"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div> </div>')}function onLoadPage(){UserHelper.isAdmin()?($(".visible-admin").css("display","inline-block"),$(".visible-customer").css("display","inline-block"),$("#inloggen_text").hide()):UserHelper.isCustomer()?($(".visible-customer").css("display","inline-block"),$("#inloggen_text").hide()):($(".visible-admin").hide(),$(".visible-customer").hide(),$("#inloggen_text").css("display","inline-block"))}function UserHelper(){this.isLogedIn=function(){var e=CookieHelper.getCookie("access_token");return void 0!=e&&""!=e},this.isCustomer=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("customer"==e||"admin"==e)return!0}return!1},this.isAdmin=function(){if(UserHelper.isLogedIn()){var e=this.decodeToken().usertype;if("admin"==e)return!0}return!1},this.decodeToken=function(){var e=CookieHelper.getCookie("access_token");if(void 0!=e&&""!=e){var t=e.split(".")[1];return JSON.parse(atob(t))}}}function WishlistHelper(){this.addItem=function(e){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+e,type:"post",dataType:"json",data:JSON.stringify({}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){$(this).toggleClass("like--active"),alert("Product succesvol toegevoegd aan Wishlist.")},error:function(e,t,n){alert("Product is al in Wishlist.")}})}}$(document).on("click","span.like",function(e){$(this).toggleClass("like--active")}),$(document).on("click","span.single_like",function(e){$(this).toggleClass("single_like--active")});var Router=function(){function e(e,o){if(0!=t(e)){var r=n(e);switch(r[0]){case"":case"index.html":case"products":new ProductsController(new ProductsViewHelper,new ProductsModel).main();break;case"product":new ProductController(new ProductViewHelper,new ProductModel(r[1])).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"login":new LoginController(new LoginViewHelper,new LoginModel).main();break;case"logout":new LogoutController(new LogoutViewHelper,new LogoutModel).main();break;case"register":new RegisterController(new RegisterViewHelper,new RegisterModel).main();break;case"resetpassword":new ResetPasswordController(new ResetPasswordViewHelper,new ResetPasswordModel).main();break;case"wishlist":new WishlistController(new WishlistViewHelper,new WishlistModel).main();break;case"admin":new AdminController(new AdminViewHelper,new AdminModel).main();break;case"admin_user":new AdminUserController(new AdminUserViewHelper,new AdminUserModel(r[1])).main();break;default:new ErrorController(new ErrorViewHelper).main()}0!=o&&""!=e&&"string"==typeof e&&(i({},"A-Z Games",e),showLoadScreen(),window.scrollTo(0,0))}}function t(e){return e.indexOf("http")==-1&&e.indexOf("https")==-1&&e.indexOf("www")==-1||(window.location=e,!1)}function n(e){return 0==e.indexOf("/")&&(e=e.substring(1)),null!=this.baseUrl&&e.indexOf(this.baseUrl)!=-1&&(e=e.substring(e.indexOf(this.baseUrl)+this.baseUrl.length)),e.split(/\/(.+)?/)}function i(e,t,n){window.history.pushState(e,t,n)}return baseUrl="project-webshop/",{route:e}};$(document).ready(function(){function e(e){$(e).toggleClass("sidebar--open"),$(".overlay").toggleClass("overlay--visible"),$("body").toggleClass("sidebar--open")}$(".sidebar-toggle").click(function(t){t.preventDefault();var n=$(this).data("sidebar");e($("#"+n))}),$(".sidebar__close").click(function(t){e($(this).parent().parent())}),$(".overlay").click(function(t){e($(".sidebar"))})}),$(document).on("mouseenter",".hasTooltip",function(e){var t=$(this).data("tooltip"),n=getOffset(this),i=$("<div class='tooltip'>"+t+"</div>");$("body").append(i),n.top=n.top+$(this).outerHeight(),n.left=n.left+$(this).outerWidth()/2-$(".tooltip").outerWidth()/2,i.css("left",n.left),i.css("top",n.top)}),$(document).on("mouseleave",".hasTooltip",function(e){console.log("uit"),$("body").find(".tooltip").remove()});var Router=new Router,CookieHelper=new CookieHelper,UserHelper=new UserHelper,WishlistHelper=new WishlistHelper;$.fn.serializeObject=function(){var e={},t=this.serializeArray();return $.each(t,function(){void 0!==e[this.name]?(e[this.name].push||(e[this.name]=[e[this.name]]),""!=this.value&&e[this.name].push(this.value)):""!=this.value&&(e[this.name]=this.value||"")}),e};var AdminModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/admin/users",type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},AdminUserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"GET",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e,t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e.user_id,type:"PATCH",dataType:"json",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function i(e,t){$.ajax({url:"https://api.az-games.nl/admin/users/"+e,type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t()},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:t,saveUserInfo:n,deleteUser:i}},CartModel=function(){function e(e){var t=CookieHelper.getCookie("cart");void 0!=t&&e(JSON.parse(t))}function t(e,t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",contentType:"json",success:function(e){cart={ean_number:e[0].ean_number,title:e[0].title,price:e[0].price,image:e[0].image},t(cart);var n=CookieHelper.getCookie("cart");void 0==n?CookieHelper.createCookie("cart",JSON.stringify([cart])):(n=JSON.parse(n),n.push(cart),CookieHelper.createCookie("cart",JSON.stringify(n)))},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e){for(cart=JSON.parse(CookieHelper.getCookie("cart")),i=0;i<cart.length;i++)if(cart[i].ean_number==e){cart.splice(i,1);break}CookieHelper.createCookie("cart",JSON.stringify(cart))}return{getCart:e,addProduct:t,removeProduct:n}},LoginModel=function(){function e(e,t,n){$.ajax({url:"https://api.az-games.nl/user/login",type:"GET",dataType:"json",headers:{Authorization:"Basic "+btoa(e+":"+t)},success:function(e){CookieHelper.createCookie("access_token",e.access_token),CookieHelper.createCookie("user_id",e.user_id),onLoadPage(),n(e)},error:function(e,t,n){$("#error_message").show()}})}return{login:e}},LogoutModel=function(){function e(e){function t(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var i=t[n].split("=");if(i[0].trim()==e)return i[1]}}$.ajax({url:"https://api.az-games.nl/user/logout",type:"post",dataType:"json",data:JSON.stringify({user_id:t("user_id")}),success:function(t){CookieHelper.deleteCookie("access_token"),CookieHelper.deleteCookie("user_id"),onLoadPage(),e(t)},error:function(e,t,n){$("#error_message").show()}})}return{logout:e}},PageModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/user",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},ProductsModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/products?"+e,type:"get",dataType:"json",success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getPage:e}},RegisterModel=function(){function e(e,t){$.ajax({url:"https://api.az-games.nl/user/register",type:"post",dataType:"json",data:JSON.stringify({e_mail:e.e_mailadres,password:e.wachtwoord,first_name:e.voornaam,insertion:e.tussenvoegsel,surname:e.achternaam,gender:e.gender,date_of_birth:e.birth_date,phone_number:e.mobiel_nummer,secret_question:e.security_question,secret_question_answer:e.security_answer,postal_code:e.postcode,number:e.huisnummer,street_name:e.straatnaam,city:e.plaats}),success:function(e){t(e)},error:function(e,t,n){$("#regi_api_error_message").show()}})}return{register:e}},ResetPasswordModel=function(){function e(e,t){console.log(e),$.ajax({url:"https://api.az-games.nl/user/resetpassword",type:"post",dataType:"json",data:JSON.stringify({email:e.e_mailadres,secret_question_answer:e.security_answer,secret_question:e.security_question,new_password:e.wachtwoord,repeat_password:e.wachtwoord2}),success:function(e){t(e)},error:function(e,t,n){$("#reset_password_api_error_message").show()}})}return{resetpassword:e}},ProductModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/products/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{GetProductInfo:t}},UserModel=function(e){function t(t){$.ajax({url:"https://api.az-games.nl/users/"+e,type:"get",dataType:"json",success:function(e){t(e[0])},error:function(e,t,n){$("#component").load("/error.html")}})}return{GetUserInfo:t}},WishlistModel=function(){function e(e){$.ajax({url:"https://api.az-games.nl/wishlist",type:"get",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(t){e(t)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function t(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id"),type:"post",dataType:"json",data:JSON.stringify({wishlist_id:e.wishlist_id}),headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}function n(e,t){$.ajax({url:"https://api.az-games.nl/wishlist/"+CookieHelper.getCookie("user_id")+"/"+String(e),type:"DELETE",dataType:"json",headers:{Authorization:"Bearer "+CookieHelper.getCookie("access_token")},success:function(e){t(e)},error:function(e,t,n){$("#component").load("/views/error/error.html")}})}return{getWishlist:e,addToWishlist:t,deleteFromWishlist:n}},AdminController=function(e,t){function n(){s.setActionListener(i)}function i(){r.getPage(o)}function o(e){s.setView(e)}var r=t,s=e;return{main:n}},AdminUserController=function(e,t){function n(){c.setActionListener(i),e.setSaveListener(r),e.setDeleteListener(s)}function i(){a.getPage(o)}function o(e){c.setView(e)}function r(e){e.preventDefault(),e.stopImmediatePropagation();var t=$(this).serializeObject();a.saveUserInfo(t,function(e){alert("Gebruiker succesvol geüpdate.")})}function s(e){a.deleteUser(e,function(){alert("Gebruiker succesvol gedelete."),Router.route("/admin")})}var a=t,c=e;return{main:n}},CartController=function(e,t){function n(){s.getCart(function(e){a.setView(e)})}function i(e){s.addProduct(e,function(e){a.addItem(e)})}function o(e){s.removeProduct(e,function(e){})}function r(){a.setActionListener(n),a.setAddProductListener(i),a.setRemoveListener(o)}var s=t,a=e;return{main:r}},DeleteController=function(e,t){},ErrorController=function(e){function t(){n.setView()}var n=e;return{main:t}},LoginController=function(e,t){function n(e){e.preventDefault(),e.stopImmediatePropagation();var t={};$.each($(this).serializeArray(),function(e,n){t[n.name]=n.value}),o.login(t.email,t.password,function(e){$("#inloggen_text").hide(),$("#uitloggen_text").show(),new PageController(new PageViewHelper,new PageModel).main()})}function i(){r.setView(),r.setActionListener(n)}var o=t,r=e;return{main:i}},LogoutController=function(e,t){function n(e){o.logout(function(e){$("#inloggen_text").show(),$("#uitloggen_text").hide(),r.setView()})}function i(){r.setActionListener(n)}var o=t,r=e;return{main:i}},PageController=function(e,t){function n(e){o.getPage(function(e){r.setView(e)})}function i(){r.setActionListener(n)}var o=t,r=e;return{main:i}},ProductsController=function(e,t){function n(){r.getPage("",function(e){s.setView(e)})}function i(e){e.preventDefault();var t=$(this).serialize();r.getPage(t,function(e){s.loadProducts(e)})}function o(){s.setActionListener(n),s.setFilterListener(i)}var r=t,s=e;return{main:o}},RegisterController=function(e,t){function n(){console.log("in actionPerformed"),event.preventDefault(),$("#regi_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value}),e.birth_date=e.jaar+"-"+e.maand+"-"+e.dag,console.log(e);var t=!1,n=["voornaam","achternaam","postcode","huisnummer","e_mailadres","wachtwoord","wachtwoord2","security_answer"];$.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,i){""==e[i]&&($("#"+i).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#register_error_message").show());var i=!1;return e.wachtwoord!=e.wachtwoord2&&(i=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!i&&(console.log("continued"),void o.register(e,function(e){r.setView("/views/register/after_register.html")}))}function i(){r.setView("/views/register/register.html"),r.setActionListener(n)}var o=t,r=e;return{main:i}},ResetPasswordController=function(e,t){function n(){console.log("in actionPerformed"),event.preventDefault(),$("#reset_password_api_error_message").hide(),$("#ww2_error_message").hide();var e={};$.each($(this).serializeArray(),function(t,n){e[n.name]=n.value});var t=!1,n=["wachtwoord","wachtwoord2","e_mailadres","security_answer"];$.each(n,function(e,t){$("#"+t).removeClass("invalid")}),$.each(n,function(n,i){""==e[i]&&($("#"+i).addClass("invalid"),t=!0)}),t&&(window.scrollTo(0,0),$("#reset_error_message").show());var i=!1;return e.wachtwoord!=e.wachtwoord2&&(i=!0,$("#ww2_error_message").show(),$("#wachtwoord").addClass("invalid"),$("#wachtwoord2").addClass("invalid")),!t&&!i&&(console.log("continued"),void o.resetpassword(e,function(e){r.setView("views/resetpassword/after_reset.html")}))}function i(){r.setView("views/resetpassword/resetpassword.html"),r.setActionListener(n)}var o=t,r=e;return{main:i}},ProductController=function(e,t){function n(t){e.setView(t)}function i(){t.GetProductInfo(n)}return{main:i,showView:n}},WishlistController=function(e,t){function n(){s.getWishlist(i)}function i(e){a.setView(e)}function o(){a.setActionListener(n),a.setDeleteListener(r)}function r(e,t){s.deleteFromWishlist(e,function(){a.hideItem(t)})}var s=t,a=e;return{main:o}},AdminViewHelper=function(){function e(e){$(document).ready(e)}function t(e){document.title="Admin - AZ Games",$("#component").load("/views/admin/admin.html",function(){$.each(e,function(e,t){var n=$("#single_user").clone();$(n).find(".user__firstname").html(t.first_name),$(n).find(".user__firstname").attr("href","/admin_user/"+t.user_id),$(n).find(".user__insertion").html(t.insertion),$(n).find(".user__lastname").html(t.surname),$(n).find(".user__email").html(t.email),$(n).find(".user__phonenumber").html(t.phone_number),$("#users_body").append(n)}),$("#single_user").first().remove()})}return{setActionListener:e,setView:t}},AdminUserViewHelper=function(){function e(e){$(document).ready(e)}function t(e){$("#component").load("/views/adminuser/adminuser.html",function(){$.each(e,function(e,t){$("#delete_btn").attr("data-id",t.user_id),$("#first_name").val(t.first_name),$("#insertion").val(t.insertion),$("#surname").val(t.surname),$("#user_type").val(t.user_type),$("#email").val(t.email),$("#password").attr("placeholder","Vul hier iets in om het wachtwoord te veranderen"),$("#gender").val(t.gender),$("#date_of_birth").val(t.date_of_birth),$("#phone_number").val(t.phone_number),$("#is_active").val(t.is_active),$("#user_id").val(t.user_id)})})}function n(e){$(document).on("submit","#userform",e)}function i(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault(),e($(this).data("id"))})}return{setActionListener:e,setView:t,setSaveListener:n,setDeleteListener:i}},CartViewHelper=function(){function e(e){""!=e&&e.forEach(function(e,t){n(e)})}function t(e){e=parseFloat(e)+parseFloat($(".cart__total .price").html().substr(1)),$(".cart__total .price").html("€"+parseFloat(e).toFixed(2))}function n(e){var n=$("<div>").html($(".sidebar__content__tmp").html());n.find(".cart__item__title").html(e.title),n.find(".cart__item__price").html("€"+e.price),n.find(".cart__item__image img").attr("src",e.image),n.find(".cart__item").attr("data-id",e.ean_number),$(".cart").append(n);var i=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(i)+1),t(e.price)}function i(e){$(document).ready(e)}function o(e){$("body").on("click",".addtocart",function(t){t.preventDefault();var n=$(this).data("id");e(n),$(this).closest("#to_shop_cart").find("#shop_cart").fadeTo(0,100).delay(1e3).fadeTo(600,0)})}function r(e){$("body").on("click",".cart__item__remove",function(n){var i=$(this).parent(),o=$(this).parent().data("id");$(i).addClass("cart__item--removed"),$(i).on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd",function(){$(this).remove()});var r=$(".cart_button .count").html();$(".cart_button .count").html(parseInt(r)-1),e(o),t(-$(i).find(".cart__item__price").html().substr(1))})}return{setView:e,addItem:n,updateTotalPrice:t,setActionListener:i,setAddProductListener:o,setRemoveListener:r}},ErrorViewHelper=function(){function e(){document.title="Oeps - AZ Games",$("#component").load("/views/error/error.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},LoginViewHelper=function(){function e(){document.title="Inloggen - AZ Games",$("#component").load("/views/login/login.html")}function t(e){$("#component").on("submit","#loginform",e)}return{setView:e,setActionListener:t}},LogoutViewHelper=function(){function e(){document.title="Uitloggen - AZ Games",$("#component").load("/views/logout/logout.html")}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},PageViewHelper=function(){function e(e){document.title="Welkom - AZ Games",$("#component").load("/views/page/page.html",function(){"customer"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een customer</h1>"),"admin"==e[0].user_type&&$("#user-block").append("<h1>Je lees dit alleen als je een administrator</h1>")})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},ProductsViewHelper=function(){function e(e){document.title="Producten - AZ Games",$("#component").html('<div class="col-12"><div class="col-3" id="filters"></div><div class="col-9" id="products"></div></div>'),$("#filters").load("/views/products/filters.html"),t(e)}function t(e){$("#products").load("/views/products/products.html",function(){$.each(e,function(e,t){var i=$("<div>").append($("#product__list__item").clone());$(i).find(".product__title").html(t.title),$(i).find(".product__subtitle").append(t.genre+" | PEGI "+t.pegi_age+" | "+PlatformLogo(t.platform)),$(i).find(".product__description").html(n(t.description)),$(i).find(".product__price").append("€ "+t.price.toFixed(2)),$(i).find("#buttons__info, .product__image a, .product__title").attr("href","product/"+t.ean_number),$(i).find(".product__image img").attr("src",t.image),$(i).find(".addtocart").attr("data-id",t.ean_number),$("#product__list").append(i)}),$("#product__list__item").first().remove()})}function n(e){var t=50,n=e.split(" ");if(n.length>t){var o="";for(i=0;i<t;i++)o+=n[i]+" ";return o+"..."}return e}function o(e){$(document).ready(e)}function r(e){$("#component").off().on("change","input[type=checkbox]",function(e){$("#product_filter").submit()}),$("#component").on("change keyup","input[name=price-max], input[name=price-min]",function(e){null==$("#pricemin").val()?$("#pricemin").val(0):$("#product_filter").submit()}),$("#component").on("submit","#product_filter",e)}return{setView:e,loadProducts:t,setActionListener:o,setFilterListener:r}},ResetPasswordViewHelper=function(){function e(e){document.title="Inloggen - AZ Games",$("#component").load(e)}function t(e){$("#component").on("submit","#resetform",e)}return{setView:e,setActionListener:t}},RegisterViewHelper=function(){function e(e){document.title="Registreren - AZ Games",$("#component").load(e,function(){var e=new Date;for(i=1;i<32;i++)$("#dag").append("<option value='"+i+"'>"+i+"</option>");for(i=1900;i<e.getFullYear()+1;i++)2e3!=i?$("#jaar").append("<option value='"+i+"'>"+i+"</option>"):$("#jaar").append("<option value='"+i+"' selected='selected'>"+i+"</option>")})}function t(e){$("#component").on("submit","#registerform",e)}return{setView:e,setActionListener:t}},ProductViewHelper=function(){function e(e){document.title=e.title+" - AZ Games",$("#component").load("/views/single_product/single_product.html",function(){$(".singleproduct__image img").attr("src",e.image),$(".singleproduct__title").html(e.title),$(".singleproduct__price").html("€ "+e.price.toFixed(2)),$(".singleproduct__ean").append(e.ean_number),$(".singleproduct__platform").append(PlatformLogo(e.platform)),$(".singleproduct__publisher").append(PlatformLogo(e.publisher)),$(".singleproduct__pegi").append(e.pegi_age),$(".singleproduct__genre").append(e.genre),$(".singleproduct__descr").html(e.description),$(".addtocart").attr("data-id",e.ean_number),UserHelper.isLogedIn()?$(".addToWishlistButton").attr("onclick","WishlistHelper.addItem("+e.ean_number+");"):$(".addToWishlistButton").hide();var t=new Date(e.release_date),n=["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"];$(".singleproduct__releasedate").append(t.getDay()+" "+n[t.getMonth()]+" "+t.getFullYear())})}function t(e){$(document).ready(e)}return{setView:e,setActionListener:t}},WishlistViewHelper=function(){function e(e){document.title="Wishlist - AZ Games",$("#component").html('<div class="col-12"><div class="col-12" id="wishlist"></div></div>'),t(e)}function t(e){$("#wishlist").load("/views/wishlist/wishlist.html",function(){var t=0;$.each(e,function(e,n){var i=$("<div>").append($("#wish__list__item").clone());t+=1,$(i).find(".wish__list__id").append(t),$(i).find(".wish__list__image img").attr("src",n.image),$(i).find(".wish__list__title").html(n.title),$(i).find(".wish__list__price").append("€ "+n.price),$(i).find(".wish__list__platform").append(PlatformLogo(n.platform)),$(i).find(".wish__list__availability").append(BeschikbaarheidKleur(n.stock)),$(i).find(".wish__list__likebutton").append(),$(i).find("#delete_btn").attr("data-id",n.ean_number),$(i).find("#cart_btn").attr("data-id",n.ean_number),$("#wish__list").append(i)}),$("#wish__list__item").first().remove()})}function n(e){$(document).ready(e)}function i(e){$("#component").off().on("click","#delete_btn",function(t){t.preventDefault();var n=$(this).data("id"),i=$(this).closest(".row");e(n,i)})}function o(e){e.fadeTo(200,0).slideUp(200)}return{setView:e,loadWishlist:t,setActionListener:n,setDeleteListener:i,hideItem:o}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbm9ydG9vbHMuanMiLCJ0b29sdGlwLmpzIiwiaGVscGVycy9jYXJ0LmpzIiwiaGVscGVycy9jb29raWUuanMiLCJoZWxwZXJzL2dsb2JhbC5qcyIsImhlbHBlcnMvdXNlci5qcyIsImhlbHBlcnMvd2lzaGxpc3QuanMiLCJyb3V0ZXIuanMiLCJzaWRlYmFyLmpzIiwiaGVscGVycy9zZXJpYWxpemVvYmplY3QuanMiLCJhZG1pbl9tb2RlbC5qcyIsImFkbWludXNlcl9tb2RlbC5qcyIsImNhcnRfbW9kZWwuanMiLCJsb2dpbl9tb2RlbC5qcyIsImxvZ291dF9tb2RlbC5qcyIsInBhZ2VfbW9kZWwuanMiLCJwcm9kdWN0c19tb2RlbC5qcyIsInJlZ2lzdGVyX21vZGVsLmpzIiwicmVzZXRwYXNzd29yZF9tb2RlbC5qcyIsInNpbmdsZV9wcm9kdWN0X21vZGVsLmpzIiwidXNlcl9tb2RlbC5qcyIsIndpc2hsaXN0X21vZGVsLmpzIiwiYWRtaW5fY29udHJvbGxlci5qcyIsImFkbWludXNlcl9jb250cm9sbGVyLmpzIiwiY2FydF9jb250cm9sbGVyLmpzIiwiZGVsZXRlX2NvbnRyb2xsZXIuanMiLCJlcnJvcl9jb250cm9sbGVyLmpzIiwibG9naW5fY29udHJvbGxlci5qcyIsImxvZ291dF9jb250cm9sbGVyLmpzIiwicGFnZV9jb250cm9sbGVyLmpzIiwicHJvZHVjdHNfY29udHJvbGxlci5qcyIsInJlZ2lzdGVyX2NvbnRyb2xsZXIuanMiLCJyZXNldHBhc3N3b3JkX2NvbnRyb2xsZXIuanMiLCJzaW5nbGVfcHJvZHVjdF9jb250cm9sbGVyLmpzIiwid2lzaGxpc3RfY29udHJvbGxlci5qcyIsImFkbWluL2FkbWluX3ZpZXcuanMiLCJhZG1pbnVzZXIvYWRtaW51c2VyX3ZpZXcuanMiLCJjYXJ0L2NhcnRfdmlldy5qcyIsImVycm9yL2Vycm9yX3ZpZXcuanMiLCJsb2dpbi9sb2dpbl92aWV3LmpzIiwibG9nb3V0L2xvZ291dF92aWV3LmpzIiwicGFnZS9wYWdlX3ZpZXcuanMiLCJwcm9kdWN0cy9wcm9kdWN0c192aWV3LmpzIiwicmVzZXRwYXNzd29yZC9yZXNldHBhc3N3b3JkX3ZpZXcuanMiLCJyZWdpc3Rlci9yZWdpc3Rlcl92aWV3LmpzIiwic2luZ2xlX3Byb2R1Y3Qvc2luZ2xlX3Byb2R1Y3Rfdmlldy5qcyIsIndpc2hsaXN0L3dpc2hsaXN0X3ZpZXcuanMiXSwibmFtZXMiOlsiUGxhdGZvcm1Mb2dvIiwicGxhdGZvcm1uYWFtIiwidG9VcHBlckNhc2UiLCJCZXNjaGlrYmFhcmhlaWRLbGV1ciIsInN0b2NrdmFsdWUiLCJnZXRPZmZzZXQiLCJlbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJ3aW5kb3ciLCJzY3JvbGxYIiwidG9wIiwic2Nyb2xsWSIsIkNhcnRIZWxwZXIiLCJ0aGlzIiwicmVtb3ZlUHJvZHVjdCIsImlkIiwiYWRkUHJvZHVjdCIsIkNvb2tpZUhlbHBlciIsImdldENvb2tpZSIsIm5hbWUiLCJjb29raWVzIiwiZG9jdW1lbnQiLCJjb29raWUiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJ0cmltIiwiY3JlYXRlQ29va2llIiwidmFsdWUiLCJkZWxldGVDb29raWUiLCJzaG93TG9hZFNjcmVlbiIsIiQiLCJodG1sIiwib25Mb2FkUGFnZSIsIlVzZXJIZWxwZXIiLCJpc0FkbWluIiwiY3NzIiwiaGlkZSIsImlzQ3VzdG9tZXIiLCJpc0xvZ2VkSW4iLCJhY2Nlc3NUb2tlbiIsInVuZGVmaW5lZCIsInVzZXJ0eXBlIiwiZGVjb2RlVG9rZW4iLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsIldpc2hsaXN0SGVscGVyIiwiYWRkSXRlbSIsImVhbl9udW1iZXIiLCJhamF4IiwidXJsIiwidHlwZSIsImRhdGFUeXBlIiwiZGF0YSIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwic3VjY2VzcyIsInRvZ2dsZUNsYXNzIiwiYWxlcnQiLCJlcnJvciIsInhociIsInN0YXR1cyIsIm9uIiwiZXZlbnQiLCJSb3V0ZXIiLCJyb3V0ZSIsImhpc3RvcnkiLCJpc0ludGVybmFsIiwicGFydGljbGVzIiwiZ2V0UGFydGljbGVzIiwiUHJvZHVjdHNDb250cm9sbGVyIiwiUHJvZHVjdHNWaWV3SGVscGVyIiwiUHJvZHVjdHNNb2RlbCIsIm1haW4iLCJQcm9kdWN0Q29udHJvbGxlciIsIlByb2R1Y3RWaWV3SGVscGVyIiwiUHJvZHVjdE1vZGVsIiwiUmVnaXN0ZXJDb250cm9sbGVyIiwiUmVnaXN0ZXJWaWV3SGVscGVyIiwiUmVnaXN0ZXJNb2RlbCIsIkxvZ2luQ29udHJvbGxlciIsIkxvZ2luVmlld0hlbHBlciIsIkxvZ2luTW9kZWwiLCJMb2dvdXRDb250cm9sbGVyIiwiTG9nb3V0Vmlld0hlbHBlciIsIkxvZ291dE1vZGVsIiwiUmVzZXRQYXNzd29yZENvbnRyb2xsZXIiLCJSZXNldFBhc3N3b3JkVmlld0hlbHBlciIsIlJlc2V0UGFzc3dvcmRNb2RlbCIsIldpc2hsaXN0Q29udHJvbGxlciIsIldpc2hsaXN0Vmlld0hlbHBlciIsIldpc2hsaXN0TW9kZWwiLCJBZG1pbkNvbnRyb2xsZXIiLCJBZG1pblZpZXdIZWxwZXIiLCJBZG1pbk1vZGVsIiwiQWRtaW5Vc2VyQ29udHJvbGxlciIsIkFkbWluVXNlclZpZXdIZWxwZXIiLCJBZG1pblVzZXJNb2RlbCIsIkVycm9yQ29udHJvbGxlciIsIkVycm9yVmlld0hlbHBlciIsIndyaXRlSGlzdG9yeSIsInNjcm9sbFRvIiwiaW5kZXhPZiIsImxvY2F0aW9uIiwic3Vic3RyaW5nIiwiYmFzZVVybCIsIm9iamVjdCIsInRpdGxlIiwicHVzaFN0YXRlIiwicmVhZHkiLCJ0b2dnbGVTaWRlYmFyIiwic2lkZWJhciIsImNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwicGFyZW50IiwiY29udGVudCIsInBvc2l0aW9uIiwidG9vbHRpcCIsImFwcGVuZCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJXaWR0aCIsImNvbnNvbGUiLCJsb2ciLCJmaW5kIiwicmVtb3ZlIiwiZm4iLCJzZXJpYWxpemVPYmplY3QiLCJvIiwiYSIsInNlcmlhbGl6ZUFycmF5IiwiZWFjaCIsInB1c2giLCJnZXRQYWdlIiwiY2FsbGJhY2siLCJsb2FkIiwic2F2ZVVzZXJJbmZvIiwidXNlcl9pZCIsImNvbnRlbnRUeXBlIiwiZGVsZXRlVXNlciIsIkNhcnRNb2RlbCIsImdldENhcnQiLCJjYXJ0IiwicHJpY2UiLCJpbWFnZSIsImN1cnJlbnRDYXJ0Iiwic3BsaWNlIiwibG9naW4iLCJlbWFpbCIsInBhc3N3b3JkIiwiYnRvYSIsImFjY2Vzc190b2tlbiIsInNob3ciLCJsb2dvdXQiLCJQYWdlTW9kZWwiLCJmaWx0ZXIiLCJyZWdpc3RlciIsImZvcm1EYXRhIiwiZV9tYWlsIiwiZV9tYWlsYWRyZXMiLCJ3YWNodHdvb3JkIiwiZmlyc3RfbmFtZSIsInZvb3JuYWFtIiwiaW5zZXJ0aW9uIiwidHVzc2Vudm9lZ3NlbCIsInN1cm5hbWUiLCJhY2h0ZXJuYWFtIiwiZ2VuZGVyIiwiZGF0ZV9vZl9iaXJ0aCIsImJpcnRoX2RhdGUiLCJwaG9uZV9udW1iZXIiLCJtb2JpZWxfbnVtbWVyIiwic2VjcmV0X3F1ZXN0aW9uIiwic2VjdXJpdHlfcXVlc3Rpb24iLCJzZWNyZXRfcXVlc3Rpb25fYW5zd2VyIiwic2VjdXJpdHlfYW5zd2VyIiwicG9zdGFsX2NvZGUiLCJwb3N0Y29kZSIsIm51bWJlciIsImh1aXNudW1tZXIiLCJzdHJlZXRfbmFtZSIsInN0cmFhdG5hYW0iLCJjaXR5IiwicGxhYXRzIiwicmVzZXRwYXNzd29yZCIsIm5ld19wYXNzd29yZCIsInJlcGVhdF9wYXNzd29yZCIsIndhY2h0d29vcmQyIiwiZWFuIiwiR2V0UHJvZHVjdEluZm8iLCJVc2VyTW9kZWwiLCJ1c2VyaWQiLCJHZXRVc2VySW5mbyIsImdldFdpc2hsaXN0IiwiYWRkVG9XaXNobGlzdCIsInZpZXdEYXRhIiwid2lzaGxpc3RfaWQiLCJkZWxldGVGcm9tV2lzaGxpc3QiLCJTdHJpbmciLCJ2aWV3SGVscGVyIiwibW9kZWwiLCJWaWV3SGVscGVyIiwic2V0QWN0aW9uTGlzdGVuZXIiLCJNb2RlbCIsInNldFZpZXciLCJzZXRTYXZlTGlzdGVuZXIiLCJzZXREZWxldGVMaXN0ZW5lciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIkNhcnRDb250cm9sbGVyIiwic2V0QWRkUHJvZHVjdExpc3RlbmVyIiwic2V0UmVtb3ZlTGlzdGVuZXIiLCJEZWxldGVDb250cm9sbGVyIiwiYWN0aW9uUGVyZm9ybWVkIiwiZmllbGQiLCJQYWdlQ29udHJvbGxlciIsIlBhZ2VWaWV3SGVscGVyIiwiVmlldyIsImZpbHRlclByb2R1Y3RzIiwiZmlsdGVycyIsInNlcmlhbGl6ZSIsImxvYWRQcm9kdWN0cyIsInNldEZpbHRlckxpc3RlbmVyIiwiamFhciIsIm1hYW5kIiwiZGFnIiwibWFuZGF0b3J5RmllbGRNaXNzZXMiLCJtYW5kYXRvcnlGaWVsZHMiLCJtYW5GaWVsZCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJwYXNzd29yZHNOb3RJZGVudGljYWwiLCJzaG93VmlldyIsImRpdl90b19oaWRlIiwiaGlkZUl0ZW0iLCJhY3Rpb24iLCJrZXkiLCJ1c2VyIiwiY2xvbmUiLCJhdHRyIiwiZmlyc3QiLCJ2YWwiLCJ1c2VyX3R5cGUiLCJpc19hY3RpdmUiLCJvZmYiLCJDYXJ0Vmlld0hlbHBlciIsImZvckVhY2giLCJpdGVtIiwiaW5kZXgiLCJ1cGRhdGVUb3RhbFByaWNlIiwibmV3UHJpY2UiLCJwYXJzZUZsb2F0Iiwic3Vic3RyIiwidG9GaXhlZCIsImNhcnRJdGVtIiwiYW1vdW50IiwicGFyc2VJbnQiLCJhZGRUb0NhcnQiLCJwcm9kdWN0X2lkIiwiY2xvc2VzdCIsImZhZGVUbyIsImRlbGF5IiwiY2FydGl0ZW0iLCJldmVudEhhbmRsZXIiLCJwcm9kdWN0IiwiZ2VucmUiLCJwZWdpX2FnZSIsInBsYXRmb3JtIiwiQ3V0U3RyaW5nIiwiZGVzY3JpcHRpb24iLCJ0ZXh0IiwiU2hvd0Ftb3VudCIsIldvcmRzQXJyYXkiLCJTaG9ydFN0cmluZyIsInN1Ym1pdCIsInZpZXdUb1Nob3ciLCJkYXRlIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwicHVibGlzaGVyIiwiZCIsInJlbGVhc2VfZGF0ZSIsIm1vbnRocyIsImdldERheSIsImdldE1vbnRoIiwibG9hZFdpc2hsaXN0IiwiY3VycmVudCIsIndpc2hfX2xpc3RfX2l0ZW0iLCJzdG9jayIsInNsaWRlVXAiXSwibWFwcGluZ3MiOiJBQUNBLFFBQUFBLGNBQUFDLEdBR0EsT0FEQUEsRUFBQUEsRUFBQUMsZUFJQSxJQUFBLE1BQ0EsTUFBQSwrQ0FDQSxLQUFBLE1BQ0EsTUFBQSwrQ0FDQSxLQUFBLEtBQ0EsTUFBQSxtREFDQSxLQUFBLE9BQ0EsTUFBQSxnREFDQSxLQUFBLE1BQ0EsTUFBQSwrQ0FDQSxLQUFBLE1BQ0EsTUFBQSwrQ0FDQSxLQUFBLGtCQUNBLE1BQUEsa0RBQ0EsU0FDQSxNQUFBRCxFQUdBLEtBQUEsV0FDQSxNQUFBLHlEQUNBLEtBQUEsVUFDQSxNQUFBLHdEQUNBLEtBQUEsa0JBQ0EsTUFBQSxxREFJQSxRQUFBRSxzQkFBQUMsR0FFQSxNQUFBQSxJQUFBLEVBQ0EsNkRBQ0FBLEdBQUEsRUFDQSwrREFFQUEsRUNqQkEsUUFBQUMsV0FBQUMsR0FJQSxNQUZBQSxHQUFBQSxFQUFBQyx5QkFHQUMsS0FBQUYsRUFBQUUsS0FBQUMsT0FBQUMsUUFDQUMsSUFBQUwsRUFBQUssSUFBQUYsT0FBQUcsU0MzQkEsUUFBQUMsY0FTQUMsS0FBQUMsY0FBQSxTQUFBQyxLQVVBRixLQUFBRyxXQUFBLFNBQUFELEtDbkJBLFFBQUFFLGdCQVNBSixLQUFBSyxVQUFBLFNBQUFDLEdBSUEsSUFBQSxHQUZBQyxHQUFBQyxTQUFBQyxPQUFBQyxNQUFBLEtBRUFDLEVBQUEsRUFBQUEsRUFBQUosRUFBQUssT0FBQUQsSUFDQSxDQUNBLEdBQUFGLEdBQUFGLEVBQUFJLEdBQUFELE1BQUEsSUFFQSxJQUFBRCxFQUFBLEdBQUFJLFFBQUFQLEVBRUEsTUFBQUcsR0FBQSxLQWFBVCxLQUFBYyxhQUFBLFNBQUFSLEVBQUFTLEdBRUFQLFNBQUFDLE9BQUFILEVBQUEsSUFBQVMsRUFBQSxLQVVBZixLQUFBZ0IsYUFBQSxTQUFBVixHQUVBRSxTQUFBQyxPQUFBSCxFQUFBLDZDQzNDQSxRQUFBVyxrQkFFQUMsRUFBQSxjQUFBQyxLQUFBLGlIQUdBLFFBQUFDLGNBRUFDLFdBQUFDLFdBRUFKLEVBQUEsa0JBQUFLLElBQUEsVUFBQSxnQkFDQUwsRUFBQSxxQkFBQUssSUFBQSxVQUFBLGdCQUNBTCxFQUFBLGtCQUFBTSxRQUVBSCxXQUFBSSxjQUVBUCxFQUFBLHFCQUFBSyxJQUFBLFVBQUEsZ0JBQ0FMLEVBQUEsa0JBQUFNLFNBSUFOLEVBQUEsa0JBQUFNLE9BQ0FOLEVBQUEscUJBQUFNLE9BQ0FOLEVBQUEsa0JBQUFLLElBQUEsVUFBQSxpQkN6QkEsUUFBQUYsY0FLQXJCLEtBQUEwQixVQUFBLFdBRUEsR0FBQUMsR0FBQXZCLGFBQUFDLFVBQUEsZUFFQSxPQUFBdUIsU0FBQUQsR0FBQSxJQUFBQSxHQVdBM0IsS0FBQXlCLFdBQUEsV0FFQSxHQUFBSixXQUFBSyxZQUNBLENBQ0EsR0FBQUcsR0FBQTdCLEtBQUE4QixjQUFBRCxRQUVBLElBQUEsWUFBQUEsR0FBQSxTQUFBQSxFQUVBLE9BQUEsRUFJQSxPQUFBLEdBTUE3QixLQUFBc0IsUUFBQSxXQUVBLEdBQUFELFdBQUFLLFlBQ0EsQ0FDQSxHQUFBRyxHQUFBN0IsS0FBQThCLGNBQUFELFFBRUEsSUFBQSxTQUFBQSxFQUVBLE9BQUEsRUFJQSxPQUFBLEdBTUE3QixLQUFBOEIsWUFBQSxXQUVBLEdBQUFILEdBQUF2QixhQUFBQyxVQUFBLGVBRUEsSUFBQXVCLFFBQUFELEdBQUEsSUFBQUEsRUFDQSxDQUNBLEdBQUFJLEdBQUFKLEVBQUFqQixNQUFBLEtBQUEsRUFFQSxPQUFBc0IsTUFBQUMsTUFBQUMsS0FBQUgsTUNoRUEsUUFBQUksa0JBU0FuQyxLQUFBb0MsUUFBQSxTQUFBQyxHQUVBbkIsRUFBQW9CLE1BQ0FDLElBQUEsb0NBQUFuQyxhQUFBQyxVQUFBLFdBQUEsSUFBQWdDLEVBQ0FHLEtBQUEsT0FDQUMsU0FBQSxPQUNBQyxLQUFBVixLQUFBVyxjQUNBQyxTQUNBQyxjQUFBLFVBQUF6QyxhQUFBQyxVQUFBLGlCQUVBeUMsUUFBQSxTQUFBSixHQUNBeEIsRUFBQWxCLE1BQUErQyxZQUFBLGdCQUNBQyxNQUFBLCtDQUVBQyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBQ0FELE1BQUEsa0NObUJBOUIsRUFBQVYsVUFBQTRDLEdBQUEsUUFBQSxZQUFBLFNBQUFDLEdBQ0FuQyxFQUFBbEIsTUFBQStDLFlBQUEsa0JBSUE3QixFQUFBVixVQUFBNEMsR0FBQSxRQUFBLG1CQUFBLFNBQUFDLEdBQ0FuQyxFQUFBbEIsTUFBQStDLFlBQUEsd0JPcERBLElBQUFPLFFBQUEsV0FJQSxRQUFBQyxHQUFBaEIsRUFBQWlCLEdBRUEsR0FBQSxHQUFBQyxFQUFBbEIsR0FBQSxDQUtBLEdBQUFtQixHQUFBQyxFQUFBcEIsRUFFQSxRQUFBbUIsRUFBQSxJQUVBLElBQUEsR0FDQSxJQUFBLGFBQ0EsSUFBQSxXQUNBLEdBQUFFLG9CQUFBLEdBQUFDLG9CQUFBLEdBQUFDLGdCQUFBQyxNQUNBLE1BQ0EsS0FBQSxVQUNBLEdBQUFDLG1CQUFBLEdBQUFDLG1CQUFBLEdBQUFDLGNBQUFSLEVBQUEsS0FBQUssTUFDQSxNQUNBLEtBQUEsV0FDQSxHQUFBSSxvQkFBQSxHQUFBQyxvQkFBQSxHQUFBQyxnQkFBQU4sTUFDQSxNQUNBLEtBQUEsUUFDQSxHQUFBTyxpQkFBQSxHQUFBQyxpQkFBQSxHQUFBQyxhQUFBVCxNQUNBLE1BQ0EsS0FBQSxTQUNBLEdBQUFVLGtCQUFBLEdBQUFDLGtCQUFBLEdBQUFDLGNBQUFaLE1BQ0EsTUFDQSxLQUFBLFdBQ0EsR0FBQUksb0JBQUEsR0FBQUMsb0JBQUEsR0FBQUMsZ0JBQUFOLE1BQ0EsTUFDQSxLQUFBLGdCQUNBLEdBQUFhLHlCQUFBLEdBQUFDLHlCQUFBLEdBQUFDLHFCQUFBZixNQUNBLE1BQ0EsS0FBQSxXQUNBLEdBQUFnQixvQkFBQSxHQUFBQyxvQkFBQSxHQUFBQyxnQkFBQWxCLE1BQ0EsTUFDQSxLQUFBLFFBQ0EsR0FBQW1CLGlCQUFBLEdBQUFDLGlCQUFBLEdBQUFDLGFBQUFyQixNQUNBLE1BQ0EsS0FBQSxhQUNBLEdBQUFzQixxQkFBQSxHQUFBQyxxQkFBQSxHQUFBQyxnQkFBQTdCLEVBQUEsS0FBQUssTUFDQSxNQUNBLFNBQ0EsR0FBQXlCLGlCQUFBLEdBQUFDLGtCQUFBMUIsT0FJQSxHQUFBUCxHQUVBLElBQUFqQixHQUFBLGdCQUFBQSxLQUVBbUQsS0FBQSxZQUFBbkQsR0FHQXRCLGlCQUdBdEIsT0FBQWdHLFNBQUEsRUFBQSxLQUtBLFFBQUFsQyxHQUFBbEIsR0FFQSxNQUFBQSxHQUFBcUQsUUFBQSxVQUFBLEdBQUFyRCxFQUFBcUQsUUFBQSxXQUFBLEdBQUFyRCxFQUFBcUQsUUFBQSxTQUFBLElBRUFqRyxPQUFBa0csU0FBQXRELEdBRUEsR0FNQSxRQUFBb0IsR0FBQXBCLEdBY0EsTUFYQSxJQUFBQSxFQUFBcUQsUUFBQSxPQUVBckQsRUFBQUEsRUFBQXVELFVBQUEsSUFJQSxNQUFBOUYsS0FBQStGLFNBQUF4RCxFQUFBcUQsUUFBQTVGLEtBQUErRixXQUFBLElBRUF4RCxFQUFBQSxFQUFBdUQsVUFBQXZELEVBQUFxRCxRQUFBNUYsS0FBQStGLFNBQUEvRixLQUFBK0YsUUFBQW5GLFNBR0EyQixFQUFBN0IsTUFBQSxXQUdBLFFBQUFnRixHQUFBTSxFQUFBQyxFQUFBMUQsR0FFQTVDLE9BQUE2RCxRQUFBMEMsVUFBQUYsRUFBQUMsRUFBQTFELEdBR0EsTUFuR0F3RCxTQUFBLG9CQW9HQXhDLE1BQUFBLEdDdEdBckMsR0FBQVYsVUFBQTJGLE1BQUEsV0FxQkEsUUFBQUMsR0FBQUMsR0FFQW5GLEVBQUFtRixHQUFBdEQsWUFBQSxpQkFDQTdCLEVBQUEsWUFBQTZCLFlBQUEsb0JBQ0E3QixFQUFBLFFBQUE2QixZQUFBLGlCQXZCQTdCLEVBQUEsbUJBQUFvRixNQUFBLFNBQUFDLEdBR0FBLEVBQUFDLGdCQUdBLElBQUFILEdBQUFuRixFQUFBbEIsTUFBQTBDLEtBQUEsVUFFQTBELEdBQUFsRixFQUFBLElBQUFtRixNQUdBbkYsRUFBQSxtQkFBQW9GLE1BQUEsU0FBQUMsR0FDQUgsRUFBQWxGLEVBQUFsQixNQUFBeUcsU0FBQUEsWUFHQXZGLEVBQUEsWUFBQW9GLE1BQUEsU0FBQUMsR0FDQUgsRUFBQWxGLEVBQUEsaUJQbEJBQSxFQUFBVixVQUFBNEMsR0FBQSxhQUFBLGNBQUEsU0FBQUMsR0FHQSxHQUFBcUQsR0FBQXhGLEVBQUFsQixNQUFBMEMsS0FBQSxXQUNBaUUsRUFBQXBILFVBQUFTLE1BR0E0RyxFQUFBMUYsRUFBQSx3QkFBQXdGLEVBQUEsU0FDQXhGLEdBQUEsUUFBQTJGLE9BQUFELEdBR0FELEVBQUE5RyxJQUFBOEcsRUFBQTlHLElBQUFxQixFQUFBbEIsTUFBQThHLGNBQ0FILEVBQUFqSCxLQUFBaUgsRUFBQWpILEtBQUF3QixFQUFBbEIsTUFBQStHLGFBQUEsRUFBQTdGLEVBQUEsWUFBQTZGLGFBQUEsRUFHQUgsRUFBQXJGLElBQUEsT0FBQW9GLEVBQUFqSCxNQUNBa0gsRUFBQXJGLElBQUEsTUFBQW9GLEVBQUE5RyxPQUdBcUIsRUFBQVYsVUFBQTRDLEdBQUEsYUFBQSxjQUFBLFNBQUFDLEdBQ0EyRCxRQUFBQyxJQUFBLE9BQ0EvRixFQUFBLFFBQUFnRyxLQUFBLFlBQUFDLFVHckJBLElBQUE3RCxRQUFBLEdBQUFBLFFBQ0FsRCxhQUFBLEdBQUFBLGNBQ0FpQixXQUFBLEdBQUFBLFlBRUFjLGVBQUEsR0FBQUEsZUtKQWpCLEdBQUFrRyxHQUFBQyxnQkFBQSxXQUVBLEdBQUFDLE1BQ0FDLEVBQUF2SCxLQUFBd0gsZ0JBaUJBLE9BaEJBdEcsR0FBQXVHLEtBQUFGLEVBQUEsV0FDQTNGLFNBQUEwRixFQUFBdEgsS0FBQU0sT0FDQWdILEVBQUF0SCxLQUFBTSxNQUFBb0gsT0FDQUosRUFBQXRILEtBQUFNLE9BQUFnSCxFQUFBdEgsS0FBQU0sUUFFQSxJQUFBTixLQUFBZSxPQUVBdUcsRUFBQXRILEtBQUFNLE1BQUFvSCxLQUFBMUgsS0FBQWUsUUFHQSxJQUFBZixLQUFBZSxRQUVBdUcsRUFBQXRILEtBQUFNLE1BQUFOLEtBQUFlLE9BQUEsTUFJQXVHLEVDcEJBLElBQUFsQyxZQUFBLFdBRUEsUUFBQXVDLEdBQUFDLEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSxzQ0FDQUMsS0FBQSxNQUNBQyxTQUFBLE9BQ0FHLFNBQ0FDLGNBQUEsVUFBQXpDLGFBQUFDLFVBQUEsaUJBRUF5QyxRQUFBLFNBQUFKLEdBQ0FrRixFQUFBbEYsSUFFQU8sTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFNQSxPQUNBRixRQUFBQSxJQ3RCQXBDLGVBQUEsU0FBQXJGLEdBRUEsUUFBQXlILEdBQUFDLEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSx1Q0FBQXJDLEVBQ0FzQyxLQUFBLE1BQ0FDLFNBQUEsT0FDQUcsU0FDQUMsY0FBQSxVQUFBekMsYUFBQUMsVUFBQSxpQkFFQXlDLFFBQUEsU0FBQUosR0FDQWtGLEVBQUFsRixJQUVBTyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBQ0EvQixFQUFBLGNBQUEyRyxLQUFBLDhCQUtBLFFBQUFDLEdBQUFwRixFQUFBa0YsR0FFQTFHLEVBQUFvQixNQUNBQyxJQUFBLHVDQUFBRyxFQUFBcUYsUUFDQXZGLEtBQUEsUUFDQUMsU0FBQSxPQUNBdUYsWUFBQSxrQ0FDQXRGLEtBQUFWLEtBQUFXLFVBQUFELEdBQ0FFLFNBQ0FDLGNBQUEsVUFBQXpDLGFBQUFDLFVBQUEsaUJBRUF5QyxRQUFBLFNBQUFKLEdBQ0FrRixFQUFBbEYsSUFFQU8sTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFLQSxRQUFBSSxHQUFBRixFQUFBSCxHQUVBMUcsRUFBQW9CLE1BQ0FDLElBQUEsdUNBQUF3RixFQUNBdkYsS0FBQSxTQUNBQyxTQUFBLE9BR0FHLFNBQ0FDLGNBQUEsVUFBQXpDLGFBQUFDLFVBQUEsaUJBRUF5QyxRQUFBLFNBQUFKLEdBQ0FrRixLQUVBM0UsTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFNQSxPQUNBRixRQUFBQSxFQUNBRyxhQUFBQSxFQUNBRyxXQUFBQSxJQ2hFQUMsVUFBQSxXQUtBLFFBQUFDLEdBQUFQLEdBRUEsR0FBQVEsR0FBQWhJLGFBQUFDLFVBQUEsT0FFQXVCLFNBQUF3RyxHQUVBUixFQUFBNUYsS0FBQUMsTUFBQW1HLElBT0EsUUFBQWpJLEdBQUFELEVBQUEwSCxHQUVBMUcsRUFBQW9CLE1BQ0FDLElBQUEsb0NBQUFyQyxFQUNBc0MsS0FBQSxNQUNBd0YsWUFBQSxPQUNBbEYsUUFBQSxTQUFBSixHQUNBMEYsTUFBQS9GLFdBQUFLLEVBQUEsR0FBQUwsV0FBQTRELE1BQUF2RCxFQUFBLEdBQUF1RCxNQUFBb0MsTUFBQTNGLEVBQUEsR0FBQTJGLE1BQUFDLE1BQUE1RixFQUFBLEdBQUE0RixPQUNBVixFQUFBUSxLQUdBLElBQUFHLEdBQUFuSSxhQUFBQyxVQUFBLE9BRUF1QixTQUFBMkcsRUFFQW5JLGFBQUFVLGFBQUEsT0FBQWtCLEtBQUFXLFdBQUF5RixTQUlBRyxFQUFBdkcsS0FBQUMsTUFBQXNHLEdBQ0FBLEVBQUFiLEtBQUFVLE1BRUFoSSxhQUFBVSxhQUFBLE9BQUFrQixLQUFBVyxVQUFBNEYsTUFHQXRGLE1BQUEsU0FBQUMsRUFBQUMsRUFBQUYsR0FDQS9CLEVBQUEsY0FBQTJHLEtBQUEsOEJBVUEsUUFBQTVILEdBQUFDLEdBSUEsSUFGQWtJLEtBQUFwRyxLQUFBQyxNQUFBN0IsYUFBQUMsVUFBQSxTQUVBTSxFQUFBLEVBQUFBLEVBQUF5SCxLQUFBeEgsT0FBQUQsSUFFQSxHQUFBeUgsS0FBQXpILEdBQUEwQixZQUFBbkMsRUFDQSxDQUNBa0ksS0FBQUksT0FBQTdILEVBQUEsRUFDQSxPQUlBUCxhQUFBVSxhQUFBLE9BQUFrQixLQUFBVyxVQUFBeUYsT0FJQSxPQUNBRCxRQUFBQSxFQUNBaEksV0FBQUEsRUFDQUYsY0FBQUEsSUMxRUF1RSxXQUFBLFdBRUEsUUFBQWlFLEdBQUFDLEVBQUFDLEVBQUFmLEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSxxQ0FDQUMsS0FBQSxNQUNBQyxTQUFBLE9BQ0FHLFNBQ0FDLGNBQUEsU0FBQStGLEtBQUFGLEVBQUEsSUFBQUMsSUFFQTdGLFFBQUEsU0FBQUosR0FFQXRDLGFBQUFVLGFBQUEsZUFBQTRCLEVBQUFtRyxjQUNBekksYUFBQVUsYUFBQSxVQUFBNEIsRUFBQXFGLFNBR0EzRyxhQUdBd0csRUFBQWxGLElBRUFPLE1BQUEsU0FBQUMsRUFBQUMsRUFBQUYsR0FFQS9CLEVBQUEsa0JBQUE0SCxVQVFBLE9BQ0FMLE1BQUFBLElDakNBOUQsWUFBQSxXQUVBLFFBQUFvRSxHQUFBbkIsR0EyQkEsUUFBQXZILEdBQUFDLEdBSUEsSUFBQSxHQUZBQyxHQUFBQyxTQUFBQyxPQUFBQyxNQUFBLEtBRUFDLEVBQUEsRUFBQUEsRUFBQUosRUFBQUssT0FBQUQsSUFDQSxDQUNBLEdBQUFGLEdBQUFGLEVBQUFJLEdBQUFELE1BQUEsSUFFQSxJQUFBRCxFQUFBLEdBQUFJLFFBQUFQLEVBRUEsTUFBQUcsR0FBQSxJQW5DQVMsRUFBQW9CLE1BQ0FDLElBQUEsc0NBQ0FDLEtBQUEsT0FDQUMsU0FBQSxPQUNBQyxLQUFBVixLQUFBVyxXQUNBb0YsUUFBQTFILEVBQUEsYUFFQXlDLFFBQUEsU0FBQUosR0FFQXRDLGFBQUFZLGFBQUEsZ0JBQ0FaLGFBQUFZLGFBQUEsV0FHQUksYUFFQXdHLEVBQUFsRixJQUVBTyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBRUEvQixFQUFBLGtCQUFBNEgsVUF1QkEsT0FDQUMsT0FBQUEsSUMvQ0FDLFVBQUEsV0FFQSxRQUFBckIsR0FBQUMsR0FFQTFHLEVBQUFvQixNQUNBQyxJQUFBLCtCQUNBQyxLQUFBLE1BQ0FDLFNBQUEsT0FDQUcsU0FDQUMsY0FBQSxVQUFBekMsYUFBQUMsVUFBQSxpQkFFQXlDLFFBQUEsU0FBQUosR0FDQWtGLEVBQUFsRixJQUVBTyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBQ0EvQixFQUFBLGNBQUEyRyxLQUFBLDhCQU1BLE9BQ0FGLFFBQUFBLElDdEJBN0QsY0FBQSxXQUVBLFFBQUE2RCxHQUFBc0IsRUFBQXJCLEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSxvQ0FBQTBHLEVBQ0F6RyxLQUFBLE1BQ0FDLFNBQUEsT0FDQUssUUFBQSxTQUFBSixHQUNBa0YsRUFBQWxGLElBRUFPLE1BQUEsU0FBQUMsRUFBQUMsRUFBQUYsR0FDQS9CLEVBQUEsY0FBQTJHLEtBQUEsOEJBTUEsT0FDQUYsUUFBQUEsSUNuQkF0RCxjQUFBLFdBRUEsUUFBQTZFLEdBQUFDLEVBQUF2QixHQUdBMUcsRUFBQW9CLE1BQ0FDLElBQUEsd0NBQ0FDLEtBQUEsT0FDQUMsU0FBQSxPQUNBQyxLQUFBVixLQUFBVyxXQUNBeUcsT0FBQUQsRUFBQUUsWUFDQVYsU0FBQVEsRUFBQUcsV0FDQUMsV0FBQUosRUFBQUssU0FDQUMsVUFBQU4sRUFBQU8sY0FDQUMsUUFBQVIsRUFBQVMsV0FDQUMsT0FBQVYsRUFBQVUsT0FDQUMsY0FBQVgsRUFBQVksV0FDQUMsYUFBQWIsRUFBQWMsY0FDQUMsZ0JBQUFmLEVBQUFnQixrQkFDQUMsdUJBQUFqQixFQUFBa0IsZ0JBRUFDLFlBQUFuQixFQUFBb0IsU0FDQUMsT0FBQXJCLEVBQUFzQixXQUNBQyxZQUFBdkIsRUFBQXdCLFdBQ0FDLEtBQUF6QixFQUFBMEIsU0FFQS9ILFFBQUEsU0FBQUosR0FHQWtGLEVBQUFsRixJQUVBTyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBRUEvQixFQUFBLDJCQUFBNEgsVUFPQSxPQUNBSSxTQUFBQSxJQ3pDQXBFLG1CQUFBLFdBRUEsUUFBQWdHLEdBQUEzQixFQUFBdkIsR0FFQVosUUFBQUMsSUFBQWtDLEdBQ0FqSSxFQUFBb0IsTUFDQUMsSUFBQSw2Q0FDQUMsS0FBQSxPQUNBQyxTQUFBLE9BQ0FDLEtBQUFWLEtBQUFXLFdBQ0ErRixNQUFBUyxFQUFBRSxZQUNBZSx1QkFBQWpCLEVBQUFrQixnQkFDQUgsZ0JBQUFmLEVBQUFnQixrQkFDQVksYUFBQTVCLEVBQUFHLFdBQ0EwQixnQkFBQTdCLEVBQUE4QixjQUVBbkksUUFBQSxTQUFBSixHQUNBa0YsRUFBQWxGLElBRUFPLE1BQUEsU0FBQUMsRUFBQUMsRUFBQUYsR0FFQS9CLEVBQUEscUNBQUE0SCxVQU1BLE9BQ0FnQyxjQUFBQSxJQzVCQTVHLGFBQUEsU0FBQWdILEdBRUEsUUFBQUMsR0FBQXZELEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSxvQ0FBQTJJLEVBQ0ExSSxLQUFBLE1BQ0FDLFNBQUEsT0FDQUssUUFBQSxTQUFBSixHQUVBa0YsRUFBQWxGLEVBQUEsS0FFQU8sTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFNQSxPQUNBc0QsZUFBQUEsSUNwQkFDLFVBQUEsU0FBQUMsR0FFQSxRQUFBQyxHQUFBMUQsR0FFQTFHLEVBQUFvQixNQUNBQyxJQUFBLGlDQUFBOEksRUFDQTdJLEtBQUEsTUFDQUMsU0FBQSxPQUNBSyxRQUFBLFNBQUFKLEdBRUFrRixFQUFBbEYsRUFBQSxLQUVBTyxNQUFBLFNBQUFDLEVBQUFDLEVBQUFGLEdBQ0EvQixFQUFBLGNBQUEyRyxLQUFBLGtCQU1BLE9BQ0F5RCxZQUFBQSxJQ3BCQXJHLGNBQUEsV0FFQSxRQUFBc0csR0FBQTNELEdBR0ExRyxFQUFBb0IsTUFDQUMsSUFBQSxtQ0FDQUMsS0FBQSxNQUNBQyxTQUFBLE9BQ0FHLFNBQ0FDLGNBQUEsVUFBQXpDLGFBQUFDLFVBQUEsaUJBRUF5QyxRQUFBLFNBQUFKLEdBQ0FrRixFQUFBbEYsSUFFQU8sTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFLQSxRQUFBMkQsR0FBQUMsRUFBQTdELEdBR0ExRyxFQUFBb0IsTUFDQUMsSUFBQSxvQ0FBQW5DLGFBQUFDLFVBQUEsV0FDQW1DLEtBQUEsT0FDQUMsU0FBQSxPQUNBQyxLQUFBVixLQUFBVyxXQUNBK0ksWUFBQUQsRUFBQUMsY0FHQTlJLFNBQ0FDLGNBQUEsVUFBQXpDLGFBQUFDLFVBQUEsaUJBRUF5QyxRQUFBLFNBQUFKLEdBQ0FrRixFQUFBbEYsSUFFQU8sTUFBQSxTQUFBQyxFQUFBQyxFQUFBRixHQUNBL0IsRUFBQSxjQUFBMkcsS0FBQSw4QkFLQSxRQUFBOEQsR0FBQVQsRUFBQXRELEdBRUExRyxFQUFBb0IsTUFDQUMsSUFBQSxvQ0FBQW5DLGFBQUFDLFVBQUEsV0FBQSxJQUFBdUwsT0FBQVYsR0FDQTFJLEtBQUEsU0FDQUMsU0FBQSxPQUdBRyxTQUNBQyxjQUFBLFVBQUF6QyxhQUFBQyxVQUFBLGlCQUVBeUMsUUFBQSxTQUFBSixHQUNBa0YsRUFBQWxGLElBRUFPLE1BQUEsU0FBQUMsRUFBQUMsRUFBQUYsR0FDQS9CLEVBQUEsY0FBQTJHLEtBQUEsOEJBTUEsT0FDQTBELFlBQUFBLEVBQ0FDLGNBQUFBLEVBQ0FHLG1CQUFBQSxJQ3BFQXpHLGdCQUFBLFNBQUEyRyxFQUFBQyxHQU1BLFFBQUEvSCxLQUVBZ0ksRUFBQUMsa0JBQUFyRSxHQUdBLFFBQUFBLEtBRUFzRSxFQUFBdEUsUUFBQXVFLEdBRUEsUUFBQUEsR0FBQXhKLEdBRUFxSixFQUFBRyxRQUFBeEosR0FmQSxHQUFBdUosR0FBQUgsRUFDQUMsRUFBQUYsQ0FtQkEsUUFDQTlILEtBQUFBLElDdkJBc0Isb0JBQUEsU0FBQXdHLEVBQUFDLEdBTUEsUUFBQS9ILEtBRUFnSSxFQUFBQyxrQkFBQXJFLEdBQ0FrRSxFQUFBTSxnQkFBQXJFLEdBQ0ErRCxFQUFBTyxrQkFBQW5FLEdBR0EsUUFBQU4sS0FFQXNFLEVBQUF0RSxRQUFBdUUsR0FHQSxRQUFBQSxHQUFBeEosR0FFQXFKLEVBQUFHLFFBQUF4SixHQUdBLFFBQUFvRixHQUFBekUsR0FFQUEsRUFBQW1ELGlCQUNBbkQsRUFBQWdKLDBCQUVBLElBQUFsRCxHQUFBakksRUFBQWxCLE1BQUFxSCxpQkFFQTRFLEdBQUFuRSxhQUFBcUIsRUFBQSxTQUFBQSxHQUVBbkcsTUFBQSxtQ0FJQSxRQUFBaUYsR0FBQUYsR0FFQWtFLEVBQUFoRSxXQUFBRixFQUFBLFdBRUEvRSxNQUFBLGlDQUNBTSxPQUFBQyxNQUFBLFlBdkNBLEdBQUEwSSxHQUFBSCxFQUNBQyxFQUFBRixDQTJDQSxRQUNBOUgsS0FBQUEsSUMvQ0F1SSxlQUFBLFNBQUFULEVBQUFDLEdBUUEsUUFBQTNELEtBRUE4RCxFQUFBOUQsUUFBQSxTQUFBekYsR0FBQXFKLEVBQUFHLFFBQUF4SixLQVFBLFFBQUF2QyxHQUFBRCxHQUVBK0wsRUFBQTlMLFdBQUFELEVBQUEsU0FBQXdDLEdBQUFxSixFQUFBM0osUUFBQU0sS0FNQSxRQUFBekMsR0FBQUMsR0FFQStMLEVBQUFoTSxjQUFBQyxFQUFBLFNBQUF3QyxNQUlBLFFBQUFxQixLQUVBZ0ksRUFBQUMsa0JBQUE3RCxHQUNBNEQsRUFBQVEsc0JBQUFwTSxHQUNBNEwsRUFBQVMsa0JBQUF2TSxHQWxDQSxHQUFBZ00sR0FBQUgsRUFDQUMsRUFBQUYsQ0FxQ0EsUUFDQTlILEtBQUFBLElDekNBMEksaUJBQUEsU0FBQVosRUFBQUMsS0NBQXRHLGdCQUFBLFNBQUFxRyxHQUtBLFFBQUE5SCxLQUdBZ0ksRUFBQUcsVUFOQSxHQUFBSCxHQUFBRixDQVVBLFFBQ0E5SCxLQUFBQSxJQ2JBTyxnQkFBQSxTQUFBdUgsRUFBQUMsR0FNQSxRQUFBWSxHQUFBckosR0FHQUEsRUFBQW1ELGlCQUNBbkQsRUFBQWdKLDBCQUdBLElBQUFsRCxLQUNBakksR0FBQXVHLEtBQUF2RyxFQUFBbEIsTUFBQXdILGlCQUFBLFNBQUE3RyxFQUFBZ00sR0FDQXhELEVBQUF3RCxFQUFBck0sTUFBQXFNLEVBQUE1TCxRQUlBa0wsRUFBQXhELE1BQUFVLEVBQUFULE1BQUFTLEVBQUFSLFNBQUEsU0FBQWpHLEdBRUF4QixFQUFBLGtCQUFBTSxPQUNBTixFQUFBLG1CQUFBNEgsT0FHQSxHQUFBOEQsZ0JBQUEsR0FBQUMsZ0JBQUEsR0FBQTdELFlBQUFqRixTQUtBLFFBQUFBLEtBR0FnSSxFQUFBRyxVQUdBSCxFQUFBQyxrQkFBQVUsR0FsQ0EsR0FBQVQsR0FBQUgsRUFDQUMsRUFBQUYsQ0FxQ0EsUUFDQTlILEtBQUFBLElDekNBVSxpQkFBQSxTQUFBb0gsRUFBQUMsR0FNQSxRQUFBWSxHQUFBckosR0FFQTRJLEVBQUFsRCxPQUFBLFNBQUFyRyxHQUVBeEIsRUFBQSxrQkFBQTRILE9BQ0E1SCxFQUFBLG1CQUFBTSxPQUdBdUssRUFBQUcsWUFLQSxRQUFBbkksS0FHQWdJLEVBQUFDLGtCQUFBVSxHQXBCQSxHQUFBVCxHQUFBSCxFQUNBQyxFQUFBRixDQXVCQSxRQUNBOUgsS0FBQUEsSUMzQkE2SSxlQUFBLFNBQUFmLEVBQUFDLEdBTUEsUUFBQVksR0FBQXJKLEdBRUE0SSxFQUFBdEUsUUFBQSxTQUFBakYsR0FDQW9LLEVBQUFaLFFBQUF4SixLQUtBLFFBQUFxQixLQUVBK0ksRUFBQWQsa0JBQUFVLEdBZEEsR0FBQVQsR0FBQUgsRUFDQWdCLEVBQUFqQixDQWlCQSxRQUNBOUgsS0FBQUEsSUNyQkFILG1CQUFBLFNBQUFpSSxFQUFBQyxHQU1BLFFBQUFuRSxLQUVBc0UsRUFBQXRFLFFBQUEsR0FBQSxTQUFBakYsR0FBQXFKLEVBQUFHLFFBQUF4SixLQUdBLFFBQUFxSyxHQUFBMUosR0FHQUEsRUFBQW1ELGdCQUVBLElBQUF3RyxHQUFBOUwsRUFBQWxCLE1BQUFpTixXQUNBaEIsR0FBQXRFLFFBQUFxRixFQUFBLFNBQUF0SyxHQUFBcUosRUFBQW1CLGFBQUF4SyxLQUlBLFFBQUFxQixLQUVBZ0ksRUFBQUMsa0JBQUFyRSxHQUNBb0UsRUFBQW9CLGtCQUFBSixHQXRCQSxHQUFBZCxHQUFBSCxFQUNBQyxFQUFBRixDQTBCQSxRQUNBOUgsS0FBQUEsSUM5QkFJLG1CQUFBLFNBQUEwSCxFQUFBQyxHQU1BLFFBQUFZLEtBRUExRixRQUFBQyxJQUFBLHNCQUdBNUQsTUFBQW1ELGlCQUdBdEYsRUFBQSwyQkFBQU0sT0FDQU4sRUFBQSxzQkFBQU0sTUFHQSxJQUFBMkgsS0FFQWpJLEdBQUF1RyxLQUFBdkcsRUFBQWxCLE1BQUF3SCxpQkFBQSxTQUFBN0csRUFBQWdNLEdBQ0F4RCxFQUFBd0QsRUFBQXJNLE1BQUFxTSxFQUFBNUwsUUFJQW9JLEVBQUEsV0FBQUEsRUFBQWlFLEtBQUEsSUFBQWpFLEVBQUFrRSxNQUFBLElBQUFsRSxFQUFBbUUsSUFFQXRHLFFBQUFDLElBQUFrQyxFQUlBLElBQUFvRSxJQUFBLEVBQ0FDLEdBQUEsV0FBQSxhQUFBLFdBQUEsYUFBQSxjQUFBLGFBQUEsY0FBQSxrQkFJQXRNLEdBQUF1RyxLQUFBK0YsRUFBQSxTQUFBN00sRUFBQThNLEdBQ0F2TSxFQUFBLElBQUF1TSxHQUFBQyxZQUFBLGFBR0F4TSxFQUFBdUcsS0FBQStGLEVBQUEsU0FBQTdNLEVBQUE4TSxHQUNBLElBQUF0RSxFQUFBc0UsS0FFQXZNLEVBQUEsSUFBQXVNLEdBQUFFLFNBQUEsV0FFQUosR0FBQSxLQU1BQSxJQUdBNU4sT0FBQWdHLFNBQUEsRUFBQSxHQUVBekUsRUFBQSwyQkFBQTRILE9BR0EsSUFBQThFLElBQUEsQ0FXQSxPQVRBekUsR0FBQUcsWUFBQUgsRUFBQThCLGNBRUEyQyxHQUFBLEVBQ0ExTSxFQUFBLHNCQUFBNEgsT0FDQTVILEVBQUEsZUFBQXlNLFNBQUEsV0FDQXpNLEVBQUEsZ0JBQUF5TSxTQUFBLGFBSUFKLElBQUFLLElBSUE1RyxRQUFBQyxJQUFBLGlCQUVBZ0YsR0FBQS9DLFNBQUFDLEVBQUEsU0FBQXpHLEdBQ0FxSixFQUFBRyxRQUFBLDBDQUtBLFFBQUFuSSxLQUdBZ0ksRUFBQUcsUUFBQSxpQ0FHQUgsRUFBQUMsa0JBQUFVLEdBdEZBLEdBQUFULEdBQUFILEVBQ0FDLEVBQUFGLENBMkZBLFFBQ0E5SCxLQUFBQSxJQy9GQWEsd0JBQUEsU0FBQWlILEVBQUFDLEdBTUEsUUFBQVksS0FFQTFGLFFBQUFDLElBQUEsc0JBR0E1RCxNQUFBbUQsaUJBR0F0RixFQUFBLHFDQUFBTSxPQUNBTixFQUFBLHNCQUFBTSxNQUdBLElBQUEySCxLQUVBakksR0FBQXVHLEtBQUF2RyxFQUFBbEIsTUFBQXdILGlCQUFBLFNBQUE3RyxFQUFBZ00sR0FDQXhELEVBQUF3RCxFQUFBck0sTUFBQXFNLEVBQUE1TCxPQUtBLElBQUF3TSxJQUFBLEVBQ0FDLEdBQUEsYUFBQSxjQUFBLGNBQUEsa0JBSUF0TSxHQUFBdUcsS0FBQStGLEVBQUEsU0FBQTdNLEVBQUE4TSxHQUNBdk0sRUFBQSxJQUFBdU0sR0FBQUMsWUFBQSxhQUdBeE0sRUFBQXVHLEtBQUErRixFQUFBLFNBQUE3TSxFQUFBOE0sR0FDQSxJQUFBdEUsRUFBQXNFLEtBRUF2TSxFQUFBLElBQUF1TSxHQUFBRSxTQUFBLFdBRUFKLEdBQUEsS0FNQUEsSUFHQTVOLE9BQUFnRyxTQUFBLEVBQUEsR0FFQXpFLEVBQUEsd0JBQUE0SCxPQUdBLElBQUE4RSxJQUFBLENBV0EsT0FUQXpFLEdBQUFHLFlBQUFILEVBQUE4QixjQUVBMkMsR0FBQSxFQUNBMU0sRUFBQSxzQkFBQTRILE9BQ0E1SCxFQUFBLGVBQUF5TSxTQUFBLFdBQ0F6TSxFQUFBLGdCQUFBeU0sU0FBQSxhQUlBSixJQUFBSyxJQUlBNUcsUUFBQUMsSUFBQSxpQkFFQWdGLEdBQUFuQixjQUFBM0IsRUFBQSxTQUFBekcsR0FDQXFKLEVBQUFHLFFBQUEsMkNBS0EsUUFBQW5JLEtBR0FnSSxFQUFBRyxRQUFBLDBDQUVBSCxFQUFBQyxrQkFBQVUsR0FoRkEsR0FBQVQsR0FBQUgsRUFDQUMsRUFBQUYsQ0FvRkEsUUFDQTlILEtBQUFBLElDeEZBQyxrQkFBQSxTQUFBNkgsRUFBQUMsR0FrQ0EsUUFBQStCLEdBQUFuTCxHQUVBbUosRUFBQUssUUFBQXhKLEdBSUEsUUFBQXFCLEtBVUErSCxFQUFBWCxlQUFBMEMsR0FZQSxPQUNBOUosS0FBQUEsRUFDQThKLFNBQUFBLElDaEVBOUksbUJBQUEsU0FBQThHLEVBQUFDLEdBTUEsUUFBQVAsS0FFQVUsRUFBQVYsWUFBQVcsR0FHQSxRQUFBQSxHQUFBeEosR0FFQXFKLEVBQUFHLFFBQUF4SixHQUdBLFFBQUFxQixLQUVBZ0ksRUFBQUMsa0JBQUFULEdBQ0FRLEVBQUFLLGtCQUFBVCxHQUdBLFFBQUFBLEdBQUFULEVBQUE0QyxHQUVBN0IsRUFBQU4sbUJBQUFULEVBQUEsV0FFQWEsRUFBQWdDLFNBQUFELEtBeEJBLEdBQUE3QixHQUFBSCxFQUNBQyxFQUFBRixDQTJCQSxRQUNBOUgsS0FBQUEsSUMvQkFvQixnQkFBQSxXQUVBLFFBQUE2RyxHQUFBZ0MsR0FFQTlNLEVBQUFWLFVBQUEyRixNQUFBNkgsR0FJQSxRQUFBOUIsR0FBQXhKLEdBRUFsQyxTQUFBeUYsTUFBQSxtQkFFQS9FLEVBQUEsY0FBQTJHLEtBQUEsMEJBQUEsV0FDQTNHLEVBQUF1RyxLQUFBL0UsRUFBQSxTQUFBdUwsRUFBQWxOLEdBRUEsR0FBQW1OLEdBQUFoTixFQUFBLGdCQUFBaU4sT0FHQWpOLEdBQUFnTixHQUFBaEgsS0FBQSxvQkFBQS9GLEtBQUFKLEVBQUF3SSxZQUNBckksRUFBQWdOLEdBQUFoSCxLQUFBLG9CQUFBa0gsS0FBQSxPQUFBLGVBQUFyTixFQUFBZ0gsU0FDQTdHLEVBQUFnTixHQUFBaEgsS0FBQSxvQkFBQS9GLEtBQUFKLEVBQUEwSSxXQUNBdkksRUFBQWdOLEdBQUFoSCxLQUFBLG1CQUFBL0YsS0FBQUosRUFBQTRJLFNBQ0F6SSxFQUFBZ04sR0FBQWhILEtBQUEsZ0JBQUEvRixLQUFBSixFQUFBMkgsT0FDQXhILEVBQUFnTixHQUFBaEgsS0FBQSxzQkFBQS9GLEtBQUFKLEVBQUFpSixjQUVBOUksRUFBQSxlQUFBMkYsT0FBQXFILEtBSUFoTixFQUFBLGdCQUFBbU4sUUFBQWxILFdBSUEsT0FDQTZFLGtCQUFBQSxFQUNBRSxRQUFBQSxJQ25DQTVHLG9CQUFBLFdBRUEsUUFBQTBHLEdBQUFnQyxHQUVBOU0sRUFBQVYsVUFBQTJGLE1BQUE2SCxHQUdBLFFBQUE5QixHQUFBeEosR0FHQXhCLEVBQUEsY0FBQTJHLEtBQUEsa0NBQUEsV0FFQTNHLEVBQUF1RyxLQUFBL0UsRUFBQSxTQUFBdUwsRUFBQWxOLEdBRUFHLEVBQUEsZUFBQWtOLEtBQUEsVUFBQXJOLEVBQUFnSCxTQUNBN0csRUFBQSxlQUFBb04sSUFBQXZOLEVBQUF3SSxZQUNBckksRUFBQSxjQUFBb04sSUFBQXZOLEVBQUEwSSxXQUNBdkksRUFBQSxZQUFBb04sSUFBQXZOLEVBQUE0SSxTQUNBekksRUFBQSxjQUFBb04sSUFBQXZOLEVBQUF3TixXQUNBck4sRUFBQSxVQUFBb04sSUFBQXZOLEVBQUEySCxPQUNBeEgsRUFBQSxhQUFBa04sS0FBQSxjQUFBLG9EQUNBbE4sRUFBQSxXQUFBb04sSUFBQXZOLEVBQUE4SSxRQUNBM0ksRUFBQSxrQkFBQW9OLElBQUF2TixFQUFBK0ksZUFDQTVJLEVBQUEsaUJBQUFvTixJQUFBdk4sRUFBQWlKLGNBQ0E5SSxFQUFBLGNBQUFvTixJQUFBdk4sRUFBQXlOLFdBQ0F0TixFQUFBLFlBQUFvTixJQUFBdk4sRUFBQWdILGFBS0EsUUFBQW9FLEdBQUE2QixHQUVBOU0sRUFBQVYsVUFBQTRDLEdBQUEsU0FBQSxZQUFBNEssR0FHQSxRQUFBNUIsR0FBQTRCLEdBRUE5TSxFQUFBLGNBQUF1TixNQUFBckwsR0FBQSxRQUFBLGNBQUEsU0FBQW1ELEdBRUFBLEVBQUFDLGlCQUNBd0gsRUFBQTlNLEVBQUFsQixNQUFBMEMsS0FBQSxTQUlBLE9BQ0FzSixrQkFBQUEsRUFDQUUsUUFBQUEsRUFDQUMsZ0JBQUFBLEVBQ0FDLGtCQUFBQSxJQ2hEQXNDLGVBQUEsV0FHQSxRQUFBeEMsR0FBQVQsR0FFQSxJQUFBQSxHQUVBQSxFQUFBa0QsUUFBQSxTQUFBQyxFQUFBQyxHQUNBek0sRUFBQXdNLEtBVUEsUUFBQUUsR0FBQUMsR0FFQUEsRUFBQUMsV0FBQUQsR0FBQUMsV0FBQTlOLEVBQUEsdUJBQUFDLE9BQUE4TixPQUFBLElBQ0EvTixFQUFBLHVCQUFBQyxLQUFBLElBQUE2TixXQUFBRCxHQUFBRyxRQUFBLElBUUEsUUFBQTlNLEdBQUF3TSxHQUVBLEdBQUFPLEdBQUFqTyxFQUFBLFNBQUFDLEtBQUFELEVBQUEsMEJBQUFDLE9BRUFnTyxHQUFBakksS0FBQSxzQkFBQS9GLEtBQUF5TixFQUFBM0ksT0FDQWtKLEVBQUFqSSxLQUFBLHNCQUFBL0YsS0FBQSxJQUFBeU4sRUFBQXZHLE9BQ0E4RyxFQUFBakksS0FBQSwwQkFBQWtILEtBQUEsTUFBQVEsRUFBQXRHLE9BQ0E2RyxFQUFBakksS0FBQSxlQUFBa0gsS0FBQSxVQUFBUSxFQUFBdk0sWUFFQW5CLEVBQUEsU0FBQTJGLE9BQUFzSSxFQUdBLElBQUFDLEdBQUFsTyxFQUFBLHVCQUFBQyxNQUNBRCxHQUFBLHVCQUFBQyxLQUFBa08sU0FBQUQsR0FBQSxHQUdBTixFQUFBRixFQUFBdkcsT0FNQSxRQUFBMkQsR0FBQWdDLEdBRUE5TSxFQUFBVixVQUFBMkYsTUFBQTZILEdBUUEsUUFBQXpCLEdBQUErQyxHQUVBcE8sRUFBQSxRQUFBa0MsR0FBQSxRQUFBLGFBQUEsU0FBQUMsR0FDQUEsRUFBQW1ELGdCQUVBLElBQUErSSxHQUFBck8sRUFBQWxCLE1BQUEwQyxLQUFBLEtBQ0E0TSxHQUFBQyxHQUNBck8sRUFBQWxCLE1BQUF3UCxRQUFBLGlCQUFBdEksS0FBQSxjQUFBdUksT0FBQSxFQUFBLEtBQUFDLE1BQUEsS0FBQUQsT0FBQSxJQUFBLEtBU0EsUUFBQWpELEdBQUF2TSxHQUNBaUIsRUFBQSxRQUFBa0MsR0FBQSxRQUFBLHNCQUFBLFNBQUFDLEdBQ0EsR0FBQXNNLEdBQUF6TyxFQUFBbEIsTUFBQXlHLFNBQ0E4SSxFQUFBck8sRUFBQWxCLE1BQUF5RyxTQUFBL0QsS0FBQSxLQUdBeEIsR0FBQXlPLEdBQUFoQyxTQUFBLHVCQUNBek0sRUFBQXlPLEdBQUF2TSxHQUFBLCtEQUFBLFdBQ0FsQyxFQUFBbEIsTUFBQW1ILFVBSUEsSUFBQWlJLEdBQUFsTyxFQUFBLHVCQUFBQyxNQUNBRCxHQUFBLHVCQUFBQyxLQUFBa08sU0FBQUQsR0FBQSxHQUVBblAsRUFBQXNQLEdBQ0FULEdBQUE1TixFQUFBeU8sR0FBQXpJLEtBQUEsc0JBQUEvRixPQUFBOE4sT0FBQSxNQUtBLE9BQ0EvQyxRQUFBQSxFQUNBOUosUUFBQUEsRUFDQTBNLGlCQUFBQSxFQUNBOUMsa0JBQUFBLEVBQ0FPLHNCQUFBQSxFQUNBQyxrQkFBQUEsSUN4R0EvRyxnQkFBQSxXQUdBLFFBQUF5RyxLQUVBMUwsU0FBQXlGLE1BQUEsa0JBRUEvRSxFQUFBLGNBQUEyRyxLQUFBLDJCQUlBLFFBQUFtRSxHQUFBNEQsR0FFQTFPLEVBQUFWLFVBQUEyRixNQUFBeUosR0FJQSxPQUNBMUQsUUFBQUEsRUFDQUYsa0JBQUFBLElDbkJBekgsZ0JBQUEsV0FHQSxRQUFBMkgsS0FFQTFMLFNBQUF5RixNQUFBLHNCQUVBL0UsRUFBQSxjQUFBMkcsS0FBQSwyQkFJQSxRQUFBbUUsR0FBQWdDLEdBTUE5TSxFQUFBLGNBQUFrQyxHQUFBLFNBQUEsYUFBQTRLLEdBSUEsT0FDQTlCLFFBQUFBLEVBQ0FGLGtCQUFBQSxJQ3ZCQXRILGlCQUFBLFdBR0EsUUFBQXdILEtBRUExTCxTQUFBeUYsTUFBQSx1QkFFQS9FLEVBQUEsY0FBQTJHLEtBQUEsNkJBSUEsUUFBQW1FLEdBQUFnQyxHQUVBOU0sRUFBQVYsVUFBQTJGLE1BQUE2SCxHQUlBLE9BQ0E5QixRQUFBQSxFQUNBRixrQkFBQUEsSUNuQkFhLGVBQUEsV0FHQSxRQUFBWCxHQUFBVCxHQUVBakwsU0FBQXlGLE1BQUEsb0JBRUEvRSxFQUFBLGNBQUEyRyxLQUFBLHdCQUFBLFdBQ0EsWUFBQTRELEVBQUEsR0FBQThDLFdBRUFyTixFQUFBLGVBQUEyRixPQUFBLG1EQUVBLFNBQUE0RSxFQUFBLEdBQUE4QyxXQUVBck4sRUFBQSxlQUFBMkYsT0FBQSwwREFNQSxRQUFBbUYsR0FBQTRELEdBRUExTyxFQUFBVixVQUFBMkYsTUFBQXlKLEdBSUEsT0FDQTFELFFBQUFBLEVBQ0FGLGtCQUFBQSxJQzVCQW5JLG1CQUFBLFdBR0EsUUFBQXFJLEdBQUFULEdBRUFqTCxTQUFBeUYsTUFBQSx1QkFFQS9FLEVBQUEsY0FBQUMsS0FBQSwyR0FFQUQsRUFBQSxZQUFBMkcsS0FBQSxnQ0FHQXFGLEVBQUF6QixHQUdBLFFBQUF5QixHQUFBekIsR0FFQXZLLEVBQUEsYUFBQTJHLEtBQUEsZ0NBQUEsV0FDQTNHLEVBQUF1RyxLQUFBZ0UsRUFBQSxTQUFBd0MsRUFBQWxOLEdBRUEsR0FBQThPLEdBQUEzTyxFQUFBLFNBQUEyRixPQUFBM0YsRUFBQSx3QkFBQWlOLFFBR0FqTixHQUFBMk8sR0FBQTNJLEtBQUEsbUJBQUEvRixLQUFBSixFQUFBa0YsT0FDQS9FLEVBQUEyTyxHQUFBM0ksS0FBQSxzQkFBQUwsT0FBQTlGLEVBQUErTyxNQUFBLFdBQUEvTyxFQUFBZ1AsU0FBQSxNQUFBN1EsYUFBQTZCLEVBQUFpUCxXQUNBOU8sRUFBQTJPLEdBQUEzSSxLQUFBLHlCQUFBL0YsS0FBQThPLEVBQUFsUCxFQUFBbVAsY0FDQWhQLEVBQUEyTyxHQUFBM0ksS0FBQSxtQkFBQUwsT0FBQSxLQUFBOUYsRUFBQXNILE1BQUE2RyxRQUFBLElBQ0FoTyxFQUFBMk8sR0FBQTNJLEtBQUEsc0RBQUFrSCxLQUFBLE9BQUEsV0FBQXJOLEVBQUFzQixZQUNBbkIsRUFBQTJPLEdBQUEzSSxLQUFBLHVCQUFBa0gsS0FBQSxNQUFBck4sRUFBQXVILE9BQ0FwSCxFQUFBMk8sR0FBQTNJLEtBQUEsY0FBQWtILEtBQUEsVUFBQXJOLEVBQUFzQixZQUVBbkIsRUFBQSxrQkFBQTJGLE9BQUFnSixLQUlBM08sRUFBQSx3QkFBQW1OLFFBQUFsSCxXQUtBLFFBQUE4SSxHQUFBRSxHQUNBLEdBQUFDLEdBQUEsR0FDQUMsRUFBQUYsRUFBQXpQLE1BQUEsSUFDQSxJQUFBMlAsRUFBQXpQLE9BQUF3UCxFQUFBLENBQ0EsR0FBQUUsR0FBQSxFQUNBLEtBQUEzUCxFQUFBLEVBQUFBLEVBQUF5UCxFQUFBelAsSUFDQTJQLEdBQUFELEVBQUExUCxHQUFBLEdBRUEsT0FBQTJQLEdBQUEsTUFFQSxNQUFBSCxHQUtBLFFBQUFuRSxHQUFBZ0MsR0FFQTlNLEVBQUFWLFVBQUEyRixNQUFBNkgsR0FHQSxRQUFBYixHQUFBYSxHQUdBOU0sRUFBQSxjQUFBdU4sTUFBQXJMLEdBQUEsU0FBQSx1QkFBQSxTQUFBQyxHQUNBbkMsRUFBQSxtQkFBQXFQLFdBSUFyUCxFQUFBLGNBQUFrQyxHQUFBLGVBQUEsK0NBQUEsU0FBQUMsR0FDQSxNQUFBbkMsRUFBQSxhQUFBb04sTUFDQXBOLEVBQUEsYUFBQW9OLElBQUEsR0FJQXBOLEVBQUEsbUJBQUFxUCxXQUlBclAsRUFBQSxjQUFBa0MsR0FBQSxTQUFBLGtCQUFBNEssR0FHQSxPQUNBOUIsUUFBQUEsRUFDQWdCLGFBQUFBLEVBQ0FsQixrQkFBQUEsRUFDQW1CLGtCQUFBQSxJQ3JGQXRJLHdCQUFBLFdBR0EsUUFBQXFILEdBQUFzRSxHQUVBaFEsU0FBQXlGLE1BQUEsc0JBRUEvRSxFQUFBLGNBQUEyRyxLQUFBMkksR0FJQSxRQUFBeEUsR0FBQTRELEdBR0ExTyxFQUFBLGNBQUFrQyxHQUFBLFNBQUEsYUFBQXdNLEdBSUEsT0FDQTFELFFBQUFBLEVBQ0FGLGtCQUFBQSxJQ3BCQTVILG1CQUFBLFdBR0EsUUFBQThILEdBQUFzRSxHQUVBaFEsU0FBQXlGLE1BQUEseUJBRUEvRSxFQUFBLGNBQUEyRyxLQUFBMkksRUFBQSxXQUVBLEdBQUFDLEdBQUEsR0FBQUMsS0FFQSxLQUFBL1AsRUFBQSxFQUFBQSxFQUFBLEdBQUFBLElBRUFPLEVBQUEsUUFBQTJGLE9BQUEsa0JBQUFsRyxFQUFBLEtBQUFBLEVBQUEsWUFHQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUE4UCxFQUFBRSxjQUFBLEVBQUFoUSxJQUVBLEtBQUFBLEVBTUFPLEVBQUEsU0FBQTJGLE9BQUEsa0JBQUFsRyxFQUFBLEtBQUFBLEVBQUEsYUFKQU8sRUFBQSxTQUFBMkYsT0FBQSxrQkFBQWxHLEVBQUEseUJBQUFBLEVBQUEsZUFVQSxRQUFBcUwsR0FBQWdDLEdBTUE5TSxFQUFBLGNBQUFrQyxHQUFBLFNBQUEsZ0JBQUE0SyxHQUlBLE9BQ0E5QixRQUFBQSxFQUNBRixrQkFBQUEsSUMxQ0EvSCxrQkFBQSxXQUdBLFFBQUFpSSxHQUFBMkQsR0FFQXJQLFNBQUF5RixNQUFBNEosRUFBQTVKLE1BQUEsY0FFQS9FLEVBQUEsY0FBQTJHLEtBQUEsNENBQUEsV0FDQTNHLEVBQUEsNkJBQUFrTixLQUFBLE1BQUF5QixFQUFBdkgsT0FDQXBILEVBQUEseUJBQUFDLEtBQUEwTyxFQUFBNUosT0FDQS9FLEVBQUEseUJBQUFDLEtBQUEsS0FBQTBPLEVBQUF4SCxNQUFBNkcsUUFBQSxJQUVBaE8sRUFBQSx1QkFBQTJGLE9BQUFnSixFQUFBeE4sWUFDQW5CLEVBQUEsNEJBQUEyRixPQUFBM0gsYUFBQTJRLEVBQUFHLFdBQ0E5TyxFQUFBLDZCQUFBMkYsT0FBQTNILGFBQUEyUSxFQUFBZSxZQUNBMVAsRUFBQSx3QkFBQTJGLE9BQUFnSixFQUFBRSxVQUNBN08sRUFBQSx5QkFBQTJGLE9BQUFnSixFQUFBQyxPQUNBNU8sRUFBQSx5QkFBQUMsS0FBQTBPLEVBQUFLLGFBQ0FoUCxFQUFBLGNBQUFrTixLQUFBLFVBQUF5QixFQUFBeE4sWUFFQWhCLFdBQUFLLFlBRUFSLEVBQUEsd0JBQUFrTixLQUFBLFVBQUEsMEJBQUF5QixFQUFBeE4sV0FBQSxNQUlBbkIsRUFBQSx3QkFBQU0sTUFHQSxJQUFBcVAsR0FBQSxHQUFBSCxNQUFBYixFQUFBaUIsY0FFQUMsR0FBQSxVQUFBLFdBQUEsUUFBQSxRQUFBLE1BQUEsT0FBQSxPQUFBLFdBQUEsWUFBQSxVQUFBLFdBQUEsV0FFQTdQLEdBQUEsK0JBQUEyRixPQUFBZ0ssRUFBQUcsU0FBQSxJQUFBRCxFQUFBRixFQUFBSSxZQUFBLElBQUFKLEVBQUFGLGlCQUlBLFFBQUEzRSxHQUFBZ0MsR0FNQTlNLEVBQUFWLFVBQUEyRixNQUFBNkgsR0FJQSxPQUNBOUIsUUFBQUEsRUFDQUYsa0JBQUFBLElDakRBaEgsbUJBQUEsV0FHQSxRQUFBa0gsR0FBQVQsR0FHQWpMLFNBQUF5RixNQUFBLHNCQUNBL0UsRUFBQSxjQUFBQyxLQUFBLHNFQUVBK1AsRUFBQXpGLEdBR0EsUUFBQXlGLEdBQUF6RixHQUdBdkssRUFBQSxhQUFBMkcsS0FBQSxnQ0FBQSxXQUdBLEdBQUFzSixHQUFBLENBQ0FqUSxHQUFBdUcsS0FBQWdFLEVBQUEsU0FBQXdDLEVBQUFsTixHQUVBLEdBQUFxUSxHQUFBbFEsRUFBQSxTQUFBMkYsT0FBQTNGLEVBQUEscUJBQUFpTixRQUdBZ0QsSUFBQSxFQUNBalEsRUFBQWtRLEdBQUFsSyxLQUFBLG1CQUFBTCxPQUFBc0ssR0FDQWpRLEVBQUFrUSxHQUFBbEssS0FBQSwwQkFBQWtILEtBQUEsTUFBQXJOLEVBQUF1SCxPQUNBcEgsRUFBQWtRLEdBQUFsSyxLQUFBLHNCQUFBL0YsS0FBQUosRUFBQWtGLE9BQ0EvRSxFQUFBa1EsR0FBQWxLLEtBQUEsc0JBQUFMLE9BQUEsS0FBQTlGLEVBQUFzSCxPQUNBbkgsRUFBQWtRLEdBQUFsSyxLQUFBLHlCQUFBTCxPQUFBM0gsYUFBQTZCLEVBQUFpUCxXQUNBOU8sRUFBQWtRLEdBQUFsSyxLQUFBLDZCQUFBTCxPQUFBeEgscUJBQUEwQixFQUFBc1EsUUFDQW5RLEVBQUFrUSxHQUFBbEssS0FBQSwyQkFBQUwsU0FDQTNGLEVBQUFrUSxHQUFBbEssS0FBQSxlQUFBa0gsS0FBQSxVQUFBck4sRUFBQXNCLFlBQ0FuQixFQUFBa1EsR0FBQWxLLEtBQUEsYUFBQWtILEtBQUEsVUFBQXJOLEVBQUFzQixZQUVBbkIsRUFBQSxlQUFBMkYsT0FBQXVLLEtBSUFsUSxFQUFBLHFCQUFBbU4sUUFBQWxILFdBR0EsUUFBQTZFLEdBQUFnQyxHQUVBOU0sRUFBQVYsVUFBQTJGLE1BQUE2SCxHQUdBLFFBQUE1QixHQUFBNEIsR0FFQTlNLEVBQUEsY0FBQXVOLE1BQUFyTCxHQUFBLFFBQUEsY0FBQSxTQUFBbUQsR0FFQUEsRUFBQUMsZ0JBQ0EsSUFBQTBFLEdBQUFoSyxFQUFBbEIsTUFBQTBDLEtBQUEsTUFDQW9MLEVBQUE1TSxFQUFBbEIsTUFBQXdQLFFBQUEsT0FDQXhCLEdBQUE5QyxFQUFBNEMsS0FHQSxRQUFBQyxHQUFBRCxHQUVBQSxFQUFBMkIsT0FBQSxJQUFBLEdBQUE2QixRQUFBLEtBR0EsT0FDQXBGLFFBQUFBLEVBQ0FnRixhQUFBQSxFQUNBbEYsa0JBQUFBLEVBQ0FJLGtCQUFBQSxFQUNBMkIsU0FBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9QbGF0Zm9ybSBMb2dvJ3NcbmZ1bmN0aW9uIFBsYXRmb3JtTG9nbyhwbGF0Zm9ybW5hYW0pXG57XG4gICAgcGxhdGZvcm1uYWFtID0gcGxhdGZvcm1uYWFtLnRvVXBwZXJDYXNlKCk7XG4gICAgc3dpdGNoIChwbGF0Zm9ybW5hYW0pXG4gICAge1xuICAgICAgICAvL3BsYXRmb3Jtc1xuICAgICAgICBjYXNlIFwiUFMxXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvaWNvbnMvcHMxLnBuZycgLz5cIjtcbiAgICAgICAgY2FzZSBcIlBTNFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL3BzNC5wbmcnIC8+XCI7XG4gICAgICAgIGNhc2UgXCJQQ1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL3dpbmRvd3MucG5nJyAvPlwiO1xuICAgICAgICBjYXNlIFwiWEJPWFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL3hib3gucG5nJyAvPlwiO1xuICAgICAgICBjYXNlIFwiTkVTXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvaWNvbnMvbmVzLnBuZycgLz5cIjtcbiAgICAgICAgY2FzZSBcIk42NFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2ljb25zL242NC5wbmcnIC8+XCI7XG4gICAgICAgIGNhc2UgXCJOSU5URU5ETyBTV0lUQ0hcIjpcbiAgICAgICAgICAgIHJldHVybiBcIjxpbWcgc3JjPScvcmVzb3VyY2VzL2ltYWdlcy9pY29ucy9zd2l0Y2gucG5nJyAvPlwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHBsYXRmb3JtbmFhbTtcblxuICAgICAgICAvL3B1Ymxpc2hlcnNcbiAgICAgICAgY2FzZSBcIk5JTlRFTkRPXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvcHVibGlzaGVycy9uaW50ZW5kby5wbmcnIC8+XCI7XG4gICAgICAgIGNhc2UgXCJVQklTT0ZUXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvcHVibGlzaGVycy91Ymlzb2Z0LnBuZycgLz5cIjtcbiAgICAgICAgY2FzZSBcIkVMRUNUUk9OSUMgQVJUU1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL3B1Ymxpc2hlcnMvZWEucG5nJyAvPlwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gQmVzY2hpa2JhYXJoZWlkS2xldXIoc3RvY2t2YWx1ZSl7XG4gICAgXG4gICAgICAgIGlmIChzdG9ja3ZhbHVlPD0wKSB7XG4gICAgICAgICAgICByZXR1cm4gXCI8aW1nIHNyYz0nL3Jlc291cmNlcy9pbWFnZXMvYXZhaWxhYmlsaXR5L2J1dHRvbnJlZC5wbmcnIC8+XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RvY2t2YWx1ZT49MSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiPGltZyBzcmM9Jy9yZXNvdXJjZXMvaW1hZ2VzL2F2YWlsYWJpbGl0eS9idXR0b25ncmVlbi5wbmcnIC8+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvY2t2YWx1ZVxuICAgICAgICB9XG59XG5cbi8vIFZhbiBXaXNobGlzdCBwYWdpbmFcbiQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCJzcGFuLmxpa2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImxpa2UtLWFjdGl2ZVwiKTtcbn0pO1xuXG4vLyBWYW4gU2luZ2xlIFByb2R1Y3QgcGFnaW5hXG4kKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwic3Bhbi5zaW5nbGVfbGlrZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwic2luZ2xlX2xpa2UtLWFjdGl2ZVwiKTtcbn0pOyIsIiQoZG9jdW1lbnQpLm9uKFwibW91c2VlbnRlclwiLCBcIi5oYXNUb29sdGlwXCIsIGZ1bmN0aW9uKGV2ZW50KVxue1xuICAgIC8vIEdldCBjb250ZW50IGFuZCBwb3NpdGlvblxuICAgIHZhciBjb250ZW50ICA9ICQodGhpcykuZGF0YShcInRvb2x0aXBcIik7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0T2Zmc2V0KHRoaXMpO1xuXG4gICAgLy8gQ3JlYXRlIHRvb2x0aXBcbiAgICB2YXIgdG9vbHRpcCA9ICQoXCI8ZGl2IGNsYXNzPSd0b29sdGlwJz5cIiArIGNvbnRlbnQgKyBcIjwvZGl2PlwiKTtcbiAgICAkKFwiYm9keVwiKS5hcHBlbmQodG9vbHRpcCk7XG5cbiAgICAvLyBDYWxjdWxhdGUgbmV3IHBvc2l0aW9uc1xuICAgIHBvc2l0aW9uLnRvcCAgPSBwb3NpdGlvbi50b3AgKyAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG4gICAgcG9zaXRpb24ubGVmdCA9IHBvc2l0aW9uLmxlZnQgKyAoJCh0aGlzKS5vdXRlcldpZHRoKCkgLyAyKSAtICgkKFwiLnRvb2x0aXBcIikub3V0ZXJXaWR0aCgpIC8gMik7XG5cbiAgICAvLyBDaGFuZ2UgcG9zaXRpb24gb2YgdG9vbHRpcFxuICAgIHRvb2x0aXAuY3NzKFwibGVmdFwiLCBwb3NpdGlvbi5sZWZ0KTtcbiAgICB0b29sdGlwLmNzcyhcInRvcFwiLCBwb3NpdGlvbi50b3ApO1xufSk7XG5cbiQoZG9jdW1lbnQpLm9uKFwibW91c2VsZWF2ZVwiLCBcIi5oYXNUb29sdGlwXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJ1aXRcIilcbiAgICAkKFwiYm9keVwiKS5maW5kKFwiLnRvb2x0aXBcIikucmVtb3ZlKCk7XG59KTtcblxuZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsKVxue1xuICAgIGVsID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogZWwubGVmdCArIHdpbmRvdy5zY3JvbGxYLFxuICAgICAgICB0b3A6IGVsLnRvcCArIHdpbmRvdy5zY3JvbGxZXG4gIH1cbn0iLCIvKipcbiAqIEhlbHBlciBmb3IgY2FydCBhY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIENhcnRIZWxwZXIoKVxue1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgYSBjb29raWVcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgIFByb2RjdXQgSUQgdG8gcmVtb3ZlIGZvbSB0aGUgY2FyXG4gICAgICogXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVtb3ZlUHJvZHVjdCA9IGZ1bmN0aW9uKGlkKVxuICAgIHtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBwcm9kdWN0IHRvIHRoZSBjYXJ0XG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFByb2R1Y3QgSUQgdG8gYWRkXG4gICAgICovXG4gICAgdGhpcy5hZGRQcm9kdWN0ID0gZnVuY3Rpb24oaWQpXG4gICAge1xuICAgIH1cbn0iLCIvKipcbiAqIEhlbHBlciBmb3IgZmluZGluZywgY3JlYXRpbmcgYW5kIGRlbGV0aW5nIGNvb2tpZXNcbiAqL1xuZnVuY3Rpb24gQ29va2llSGVscGVyKClcbntcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIGEgY29va2llXG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgIE5hbWUgb2YgdGhlIGNvb2tpZVxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmdldENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUpXG4gICAge1xuICAgICAgICB2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNvb2tpZSA9IGNvb2tpZXNbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICAgICAgICBpZiAoY29va2llWzBdLnRyaW0oKSA9PSBuYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb29raWVbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb29raWVcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgIE5hbWUgb2YgdGhlIGNvb2tpZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAgVmFsdWUgb2YgdGhlIGNvb2tpZVxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVDb29raWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSlcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWx1ZSArICc7JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBjb29raWUgYW5kIGl0J3MgdmFsdWVcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgTmFtZSBvZiB0aGUgY29va2llXG4gICAgICogXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUNvb2tpZSA9IGZ1bmN0aW9uKG5hbWUpXG4gICAge1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMSBHTVQ7JztcbiAgICB9XG59XG4iLCJ2YXIgUm91dGVyICAgICAgID0gbmV3IFJvdXRlcigpO1xudmFyIENvb2tpZUhlbHBlciA9IG5ldyBDb29raWVIZWxwZXIoKTtcbnZhciBVc2VySGVscGVyICAgPSBuZXcgVXNlckhlbHBlcigpO1xuXG52YXIgV2lzaGxpc3RIZWxwZXIgPSBuZXcgV2lzaGxpc3RIZWxwZXIoKTtcblxuZnVuY3Rpb24gc2hvd0xvYWRTY3JlZW4oKVxue1xuICAgICQoXCIjY29tcG9uZW50XCIpLmh0bWwoJzxkaXYgY2xhc3M9XCJzcGlubmVyXCI+PGRpdiBjbGFzcz1cImJvdW5jZTFcIj48L2Rpdj48ZGl2IGNsYXNzPVwiYm91bmNlMlwiPjwvZGl2PjxkaXYgY2xhc3M9XCJib3VuY2UzXCI+PC9kaXY+IDwvZGl2PicpO1xufVxuXG5mdW5jdGlvbiBvbkxvYWRQYWdlKClcbntcbiAgICBpZiAoVXNlckhlbHBlci5pc0FkbWluKCkpXG4gICAge1xuICAgICAgICAkKFwiLnZpc2libGUtYWRtaW5cIikuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcbiAgICAgICAgJChcIi52aXNpYmxlLWN1c3RvbWVyXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgICAgICQoXCIjaW5sb2dnZW5fdGV4dFwiKS5oaWRlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKFVzZXJIZWxwZXIuaXNDdXN0b21lcigpKVxuICAgIHtcbiAgICAgICAgJChcIi52aXNpYmxlLWN1c3RvbWVyXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgICAgICQoXCIjaW5sb2dnZW5fdGV4dFwiKS5oaWRlKCk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgICQoXCIudmlzaWJsZS1hZG1pblwiKS5oaWRlKCk7XG4gICAgICAgICQoXCIudmlzaWJsZS1jdXN0b21lclwiKS5oaWRlKCk7XG4gICAgICAgICQoXCIjaW5sb2dnZW5fdGV4dFwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xuICAgIH1cbn0iLCIvKipcbiAqIEhlbHBlciBmb3IgdXNlciByZWxhdGVkIHN0dWZmXG4gKi9cbmZ1bmN0aW9uIFVzZXJIZWxwZXIoKVxue1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIGEgZ3Vlc3QgKG5vdCBsb2dnZWQgaW4pXG4gICAgICovXG4gICAgdGhpcy5pc0xvZ2VkSW4gPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuICE9IHVuZGVmaW5lZCAmJiBhY2Nlc3NUb2tlbiAhPSBcIlwiKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGEgY3VzdG9tZXJcbiAgICAgKi9cbiAgICB0aGlzLmlzQ3VzdG9tZXIgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICBpZiAoVXNlckhlbHBlci5pc0xvZ2VkSW4oKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHVzZXJ0eXBlID0gdGhpcy5kZWNvZGVUb2tlbigpLnVzZXJ0eXBlO1xuXG4gICAgICAgICAgICBpZiAodXNlcnR5cGUgPT0gXCJjdXN0b21lclwiIHx8IHVzZXJ0eXBlID09IFwiYWRtaW5cIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGFkbWluXG4gICAgICovXG4gICAgdGhpcy5pc0FkbWluID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgaWYgKFVzZXJIZWxwZXIuaXNMb2dlZEluKCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB1c2VydHlwZSA9IHRoaXMuZGVjb2RlVG9rZW4oKS51c2VydHlwZTtcblxuICAgICAgICAgICAgaWYgKHVzZXJ0eXBlID09IFwiYWRtaW5cIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGUgdGhlIEpXVCB0b2tlblxuICAgICAqL1xuICAgIHRoaXMuZGVjb2RlVG9rZW4gPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpO1xuXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbiAhPSB1bmRlZmluZWQgJiYgYWNjZXNzVG9rZW4gICE9IFwiXCIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwYXlsb2FkID0gYWNjZXNzVG9rZW4uc3BsaXQoXCIuXCIpWzFdO1xuXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhdG9iKHBheWxvYWQpKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvKipcbiAqIEhlbHBlciBmb3IgY2FydCBhY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIFdpc2hsaXN0SGVscGVyKClcbntcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIGEgY29va2llXG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkICBQcm9kY3V0IElEIHRvIHJlbW92ZSBmb20gdGhlIGNhclxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFkZEl0ZW0gPSBmdW5jdGlvbihlYW5fbnVtYmVyKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC93aXNobGlzdC9cIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJ1c2VyX2lkXCIpICsgXCIvXCIgKyBlYW5fbnVtYmVyLFxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe30pLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJsaWtlLS1hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJQcm9kdWN0IHN1Y2Nlc3ZvbCB0b2VnZXZvZWdkIGFhbiBXaXNobGlzdC5cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiUHJvZHVjdCBpcyBhbCBpbiBXaXNobGlzdC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJ2YXIgUm91dGVyID0gZnVuY3Rpb24gKClcbntcbiAgICBiYXNlVXJsID0gXCJwcm9qZWN0LXdlYnNob3AvXCI7XG5cbiAgICBmdW5jdGlvbiByb3V0ZSh1cmwsIGhpc3RvcnkpXG4gICAge1xuICAgICAgICBpZiAoaXNJbnRlcm5hbCh1cmwpID09IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFydGljbGVzID0gZ2V0UGFydGljbGVzKHVybCk7XG5cbiAgICAgICAgc3dpdGNoKHBhcnRpY2xlc1swXSlcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgY2FzZSBcImluZGV4Lmh0bWxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJwcm9kdWN0c1wiOlxuICAgICAgICAgICAgICAgIG5ldyBQcm9kdWN0c0NvbnRyb2xsZXIobmV3IFByb2R1Y3RzVmlld0hlbHBlcigpLCBuZXcgUHJvZHVjdHNNb2RlbCgpKS5tYWluKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicHJvZHVjdFwiOlxuICAgICAgICAgICAgICAgIG5ldyBQcm9kdWN0Q29udHJvbGxlcihuZXcgUHJvZHVjdFZpZXdIZWxwZXIoKSwgbmV3IFByb2R1Y3RNb2RlbChwYXJ0aWNsZXNbMV0pKS5tYWluKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmVnaXN0ZXJcIjpcbiAgICAgICAgICAgICAgICBuZXcgUmVnaXN0ZXJDb250cm9sbGVyKG5ldyBSZWdpc3RlclZpZXdIZWxwZXIoKSwgbmV3IFJlZ2lzdGVyTW9kZWwoKSkubWFpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImxvZ2luXCI6XG4gICAgICAgICAgICAgICAgbmV3IExvZ2luQ29udHJvbGxlcihuZXcgTG9naW5WaWV3SGVscGVyKCksIG5ldyBMb2dpbk1vZGVsKCkpLm1haW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJsb2dvdXRcIjpcbiAgICAgICAgICAgICAgICBuZXcgTG9nb3V0Q29udHJvbGxlcihuZXcgTG9nb3V0Vmlld0hlbHBlcigpLCBuZXcgTG9nb3V0TW9kZWwoKSkubWFpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlZ2lzdGVyXCI6XG4gICAgICAgICAgICAgICAgbmV3IFJlZ2lzdGVyQ29udHJvbGxlcihuZXcgUmVnaXN0ZXJWaWV3SGVscGVyKCksIG5ldyBSZWdpc3Rlck1vZGVsKCkpLm1haW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXNldHBhc3N3b3JkXCI6XG4gICAgICAgICAgICAgICAgbmV3IFJlc2V0UGFzc3dvcmRDb250cm9sbGVyKG5ldyBSZXNldFBhc3N3b3JkVmlld0hlbHBlcigpLCBuZXcgUmVzZXRQYXNzd29yZE1vZGVsKCkpLm1haW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ3aXNobGlzdFwiOlxuICAgICAgICAgICAgICAgIG5ldyBXaXNobGlzdENvbnRyb2xsZXIobmV3IFdpc2hsaXN0Vmlld0hlbHBlcigpLCBuZXcgV2lzaGxpc3RNb2RlbCgpKS5tYWluKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYWRtaW5cIjpcbiAgICAgICAgICAgICAgICBuZXcgQWRtaW5Db250cm9sbGVyKG5ldyBBZG1pblZpZXdIZWxwZXIoKSwgbmV3IEFkbWluTW9kZWwoKSkubWFpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFkbWluX3VzZXJcIjpcbiAgICAgICAgICAgICAgICBuZXcgQWRtaW5Vc2VyQ29udHJvbGxlcihuZXcgQWRtaW5Vc2VyVmlld0hlbHBlcigpLCBuZXcgQWRtaW5Vc2VyTW9kZWwocGFydGljbGVzWzFdKSkubWFpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBuZXcgRXJyb3JDb250cm9sbGVyKG5ldyBFcnJvclZpZXdIZWxwZXIoKSkubWFpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhpc3RvcnkgIT0gZmFsc2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh1cmwgIT0gXCJcIiAmJiB0eXBlb2YgdXJsID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB3cml0ZUhpc3Rvcnkoe30sIFwiQS1aIEdhbWVzXCIsIHVybCk7XG5cbiAgICAgICAgICAgICAgICAgLy8gTG9hZCBzY3JlZW5cbiAgICAgICAgICAgICAgICBzaG93TG9hZFNjcmVlbigpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0b3Agb2YgcGFnZVxuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW50ZXJuYWwodXJsKVxuICAgIHtcbiAgICAgICAgaWYgKHVybC5pbmRleE9mKFwiaHR0cFwiKSAhPSAtMSB8fCB1cmwuaW5kZXhPZihcImh0dHBzXCIpICE9IC0xIHx8IHVybC5pbmRleE9mKFwid3d3XCIpICE9IC0xKVxuICAgICAgICB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnRpY2xlcyh1cmwpXG4gICAge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IC9cbiAgICAgICAgaWYgKHVybC5pbmRleE9mKFwiL1wiKSA9PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB1cmwgPSB1cmwuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBiYXNlIHVybCBzZXQsIHJlbW92ZSB0aGUgYmFzZSB1cmxcbiAgICAgICAgaWYgKHRoaXMuYmFzZVVybCAhPSBudWxsICYmIHVybC5pbmRleE9mKHRoaXMuYmFzZVVybCkgIT0gLTEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YodGhpcy5iYXNlVXJsKSArIHRoaXMuYmFzZVVybC5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVybC5zcGxpdCgvXFwvKC4rKT8vKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyaXRlSGlzdG9yeShvYmplY3QsIHRpdGxlLCB1cmwpXG4gICAge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUob2JqZWN0LCB0aXRsZSwgdXJsKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByb3V0ZTogcm91dGVcbiAgICB9XG59IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKVxue1xuICAgICQoXCIuc2lkZWJhci10b2dnbGVcIikuY2xpY2soZnVuY3Rpb24gKGUpXG4gICAge1xuICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgY2xpY2sgYWN0aW9uXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBJZCBvZiB0aGUgc2lkZWJhciB0byB0b2dnbGVcbiAgICAgICAgdmFyIHNpZGViYXIgPSAkKHRoaXMpLmRhdGEoXCJzaWRlYmFyXCIpO1xuXG4gICAgICAgIHRvZ2dsZVNpZGViYXIoJChcIiNcIiArIHNpZGViYXIpKTtcbiAgICB9KTtcblxuICAgICQoXCIuc2lkZWJhcl9fY2xvc2VcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdG9nZ2xlU2lkZWJhcigkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpKTtcbiAgICB9KVxuXG4gICAgJChcIi5vdmVybGF5XCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRvZ2dsZVNpZGViYXIoJChcIi5zaWRlYmFyXCIpKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZGViYXIoc2lkZWJhcilcbiAgICB7XG4gICAgICAgICQoc2lkZWJhcikudG9nZ2xlQ2xhc3MoXCJzaWRlYmFyLS1vcGVuXCIpO1xuICAgICAgICAkKFwiLm92ZXJsYXlcIikudG9nZ2xlQ2xhc3MoXCJvdmVybGF5LS12aXNpYmxlXCIpO1xuICAgICAgICAkKFwiYm9keVwiKS50b2dnbGVDbGFzcyhcInNpZGViYXItLW9wZW5cIik7XG4gICAgfVxufSk7IiwiJC5mbi5zZXJpYWxpemVPYmplY3QgPSBmdW5jdGlvbigpXG57XG4gICAgdmFyIG8gPSB7fTtcbiAgICB2YXIgYSA9IHRoaXMuc2VyaWFsaXplQXJyYXkoKTtcbiAgICAkLmVhY2goYSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChvW3RoaXMubmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFvW3RoaXMubmFtZV0ucHVzaCkge1xuICAgICAgICAgICAgICAgIG9bdGhpcy5uYW1lXSA9IFtvW3RoaXMubmFtZV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgIT0gXCJcIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvW3RoaXMubmFtZV0ucHVzaCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlICE9IFwiXCIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb1t0aGlzLm5hbWVdID0gdGhpcy52YWx1ZSB8fCAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvO1xufTsiLCJ2YXIgQWRtaW5Nb2RlbCA9IGZ1bmN0aW9uKClcbntcbiAgICBmdW5jdGlvbiBnZXRQYWdlKGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9hZG1pbi91c2Vyc1wiLCAvL1wiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCZWFyZXIgXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvdmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRQYWdlOiBnZXRQYWdlXG4gICAgfVxuXG59OyIsInZhciBBZG1pblVzZXJNb2RlbCA9IGZ1bmN0aW9uKGlkKVxue1xuICAgIGZ1bmN0aW9uIGdldFBhZ2UoY2FsbGJhY2spXG4gICAge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2FkbWluL3VzZXJzL1wiICsgaWQsIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9cbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzYXZlVXNlckluZm8oZGF0YSwgY2FsbGJhY2spXG4gICAge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2FkbWluL3VzZXJzL1wiICsgZGF0YS51c2VyX2lkLCAvL1wiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvXG4gICAgICAgICAgICB0eXBlOiBcIlBBVENIXCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZVVzZXIodXNlcl9pZCwgY2FsbGJhY2spXG4gICAge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL2FkbWluL3VzZXJzL1wiICsgdXNlcl9pZCwgLy9cImh0dHBzOi8vYXBpLmF6LWdhbWVzLm5sL1xuICAgICAgICAgICAgdHlwZTogXCJERUxFVEVcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAvL2NvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgIC8vZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvdmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRQYWdlOiBnZXRQYWdlLFxuICAgICAgICBzYXZlVXNlckluZm86IHNhdmVVc2VySW5mbyxcbiAgICAgICAgZGVsZXRlVXNlcjogZGVsZXRlVXNlclxuICAgIH1cbn0iLCJ2YXIgQ2FydE1vZGVsID0gZnVuY3Rpb24oKVxue1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgY2FydCBpdGVtc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENhcnQoY2FsbGJhY2spXG4gICAge1xuICAgICAgICB2YXIgY2FydCA9IENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJjYXJ0XCIpO1xuXG4gICAgICAgIGlmIChjYXJ0ICE9IHVuZGVmaW5lZClcbiAgICAgICAge1xuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShjYXJ0KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwcm9kdWN0IHRvIHRoZSBjYXJ0IGNvb2tpZSBhbmQgZGF0YWJhc2UgaWYgdGhlIHVzZXIgaXMgcmVnaXN0ZXJlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFByb2R1Y3QoaWQsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9wcm9kdWN0cy9cIiArIGlkLFxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FydCA9IHtlYW5fbnVtYmVyOmRhdGFbMF0uZWFuX251bWJlciwgdGl0bGU6ZGF0YVswXS50aXRsZSwgcHJpY2U6ZGF0YVswXS5wcmljZSwgaW1hZ2U6ZGF0YVswXS5pbWFnZX07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY2FydCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTYXZlIGNhcnQgaW4gY29va2llc1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2FydCA9IENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJjYXJ0XCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDYXJ0ID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5jcmVhdGVDb29raWUoXCJjYXJ0XCIsIEpTT04uc3RyaW5naWZ5KFtjYXJ0XSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FydCA9IEpTT04ucGFyc2UoY3VycmVudENhcnQpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FydC5wdXNoKGNhcnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5jcmVhdGVDb29raWUoXCJjYXJ0XCIsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRDYXJ0KSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGl0ZW0gZnJvbSB0aGUgY2FydFxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7aW50fSBpZCBQcm9kdWN0IGlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlUHJvZHVjdChpZClcbiAgICB7XG4gICAgICAgIGNhcnQgPSBKU09OLnBhcnNlKENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJjYXJ0XCIpKTtcblxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBjYXJ0Lmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoY2FydFtpXS5lYW5fbnVtYmVyID09IGlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNhcnQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBDb29raWVIZWxwZXIuY3JlYXRlQ29va2llKFwiY2FydFwiLCBKU09OLnN0cmluZ2lmeShjYXJ0KSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRDYXJ0OiBnZXRDYXJ0LFxuICAgICAgICBhZGRQcm9kdWN0OiBhZGRQcm9kdWN0LFxuICAgICAgICByZW1vdmVQcm9kdWN0OiByZW1vdmVQcm9kdWN0XG4gICAgfVxufTsiLCJ2YXIgTG9naW5Nb2RlbCA9IGZ1bmN0aW9uKClcbntcbiAgICBmdW5jdGlvbiBsb2dpbihlbWFpbCwgcGFzc3dvcmQsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC91c2VyL2xvZ2luXCIsXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCYXNpYyBcIiArIGJ0b2EoZW1haWwgKyBcIjpcIiArIHBhc3N3b3JkKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gcHV0IHRva2VuIGluIGNvb2tpZVxuICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5jcmVhdGVDb29raWUoXCJhY2Nlc3NfdG9rZW5cIiwgZGF0YS5hY2Nlc3NfdG9rZW4pO1xuICAgICAgICAgICAgICAgIENvb2tpZUhlbHBlci5jcmVhdGVDb29raWUoXCJ1c2VyX2lkXCIsIGRhdGEudXNlcl9pZCk7XG5cbiAgICAgICAgICAgICAgICAvLyAncmVsb2FkJyBwYWdlXG4gICAgICAgICAgICAgICAgb25Mb2FkUGFnZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gbGV0IGNvbnRyb2xsZXIgcmVzdW1lIHdpdGggc3R1ZmZcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIHNob3cgJ25vdCBnb29kIGVtYWlsIG9yIHBhc3N3b3JkIHRvIHVzZXInXG4gICAgICAgICAgICAgICAgJChcIiNlcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vJChcIiNjb21wb25lbnRcIikuaHRtbChcImVycm9yIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvZ2luOiBsb2dpblxuICAgIH1cbn07IiwidmFyIExvZ291dE1vZGVsID0gZnVuY3Rpb24oKVxue1xuICAgIGZ1bmN0aW9uIGxvZ291dChjYWxsYmFjaylcbiAgICB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlci9sb2dvdXRcIiwgLy8/IGh0dHA6Ly84NC44NC4yNDUuMjk6MjQzID0gQVBJLWxvY2F0aWU/XG4gICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogZ2V0Q29va2llKFwidXNlcl9pZFwiKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGxldCBjb250cm9sbGVyIHJlc3VtZSB3aXRoIHN0dWZmXG4gICAgICAgICAgICAgICAgQ29va2llSGVscGVyLmRlbGV0ZUNvb2tpZShcImFjY2Vzc190b2tlblwiKTtcbiAgICAgICAgICAgICAgICBDb29raWVIZWxwZXIuZGVsZXRlQ29va2llKFwidXNlcl9pZFwiKTtcblxuICAgICAgICAgICAgICAgIC8vICdyZWxvYWQnIHBhZ2VcbiAgICAgICAgICAgICAgICBvbkxvYWRQYWdlKCk7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIHNob3cgJ25vdCBnb29kIGVtYWlsIG9yIHBhc3N3b3JkIHRvIHVzZXInXG4gICAgICAgICAgICAgICAgJChcIiNlcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vJChcIiNjb21wb25lbnRcIikuaHRtbChcImVycm9yIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRDb29raWUobmFtZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSBjb29raWVzW2ldLnNwbGl0KFwiPVwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb29raWVbMF0udHJpbSgpID09IG5hbWUpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9nb3V0OiBsb2dvdXRcbiAgICB9XG59OyIsInZhciBQYWdlTW9kZWwgPSBmdW5jdGlvbigpXG57XG4gICAgZnVuY3Rpb24gZ2V0UGFnZShjYWxsYmFjaylcbiAgICB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UGFnZTogZ2V0UGFnZVxuICAgIH1cbn07IiwidmFyIFByb2R1Y3RzTW9kZWwgPSBmdW5jdGlvbigpXG57XG4gICAgZnVuY3Rpb24gZ2V0UGFnZShmaWx0ZXIsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9wcm9kdWN0cz9cIiArIGZpbHRlciwgLy8/IGh0dHA6Ly84NC44NC4yNDUuMjk6MjQzID0gQVBJLWxvY2F0aWU/XG4gICAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UGFnZTogZ2V0UGFnZVxuICAgIH1cbn07IiwidmFyIFJlZ2lzdGVyTW9kZWwgPSBmdW5jdGlvbigpXG57XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoZm9ybURhdGEsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhmb3JtRGF0YSk7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlci9yZWdpc3RlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGVfbWFpbCA6IGZvcm1EYXRhLmVfbWFpbGFkcmVzLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkIDogZm9ybURhdGEud2FjaHR3b29yZCxcbiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lIDogZm9ybURhdGEudm9vcm5hYW0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uIDogZm9ybURhdGEudHVzc2Vudm9lZ3NlbCxcbiAgICAgICAgICAgICAgICBzdXJuYW1lIDogZm9ybURhdGEuYWNodGVybmFhbSxcbiAgICAgICAgICAgICAgICBnZW5kZXIgOiBmb3JtRGF0YS5nZW5kZXIsXG4gICAgICAgICAgICAgICAgZGF0ZV9vZl9iaXJ0aCA6IGZvcm1EYXRhLmJpcnRoX2RhdGUsXG4gICAgICAgICAgICAgICAgcGhvbmVfbnVtYmVyIDogZm9ybURhdGEubW9iaWVsX251bW1lcixcbiAgICAgICAgICAgICAgICBzZWNyZXRfcXVlc3Rpb24gOiBmb3JtRGF0YS5zZWN1cml0eV9xdWVzdGlvbixcbiAgICAgICAgICAgICAgICBzZWNyZXRfcXVlc3Rpb25fYW5zd2VyIDogZm9ybURhdGEuc2VjdXJpdHlfYW5zd2VyLFxuXG4gICAgICAgICAgICAgICAgcG9zdGFsX2NvZGUgOiBmb3JtRGF0YS5wb3N0Y29kZSxcbiAgICAgICAgICAgICAgICBudW1iZXIgOiBmb3JtRGF0YS5odWlzbnVtbWVyLFxuICAgICAgICAgICAgICAgIHN0cmVldF9uYW1lIDogZm9ybURhdGEuc3RyYWF0bmFhbSxcbiAgICAgICAgICAgICAgICBjaXR5IDogZm9ybURhdGEucGxhYXRzXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gc2hvdyAnZW1haWwgYWwgZ2Vib25kZW4gYWFuIGVlbiBhY2NvdW50PydcbiAgICAgICAgICAgICAgICAkKFwiI3JlZ2lfYXBpX2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xuICAgICAgICAgICAgICAgIC8vJChcIiNjb21wb25lbnRcIikuaHRtbChcImVycm9yIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICAgIH1cbn07IiwidmFyIFJlc2V0UGFzc3dvcmRNb2RlbCA9IGZ1bmN0aW9uKClcbntcbiAgICBmdW5jdGlvbiByZXNldHBhc3N3b3JkKGZvcm1EYXRhLCBjYWxsYmFjaylcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC91c2VyL3Jlc2V0cGFzc3dvcmRcIixcbiAgICAgICAgICAgIHR5cGU6IFwicG9zdFwiLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBlbWFpbCA6IGZvcm1EYXRhLmVfbWFpbGFkcmVzLFxuICAgICAgICAgICAgICAgIHNlY3JldF9xdWVzdGlvbl9hbnN3ZXIgOiBmb3JtRGF0YS5zZWN1cml0eV9hbnN3ZXIsXG4gICAgICAgICAgICAgICAgc2VjcmV0X3F1ZXN0aW9uIDogZm9ybURhdGEuc2VjdXJpdHlfcXVlc3Rpb24sXG4gICAgICAgICAgICAgICAgbmV3X3Bhc3N3b3JkIDogZm9ybURhdGEud2FjaHR3b29yZCxcbiAgICAgICAgICAgICAgICByZXBlYXRfcGFzc3dvcmQgOiBmb3JtRGF0YS53YWNodHdvb3JkMlxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8kKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwidmlld3MvZXJyb3IvZXJyb3IuaHRtbFwiKTtcbiAgICAgICAgICAgICAgICAkKFwiI3Jlc2V0X3Bhc3N3b3JkX2FwaV9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICByZXNldHBhc3N3b3JkOiByZXNldHBhc3N3b3JkXG4gICAgfVxufTsiLCJ2YXIgUHJvZHVjdE1vZGVsID0gZnVuY3Rpb24oZWFuKVxue1xuICAgIGZ1bmN0aW9uIEdldFByb2R1Y3RJbmZvKGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9wcm9kdWN0cy9cIiArIGVhbixcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBsZXQgY29udHJvbGxlciByZXN1bWUgd2l0aCBzdHVmZlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFbMF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIEdldFByb2R1Y3RJbmZvOiBHZXRQcm9kdWN0SW5mb1xuICAgIH1cbn07IiwidmFyIFVzZXJNb2RlbCA9IGZ1bmN0aW9uKHVzZXJpZClcbntcbiAgICBmdW5jdGlvbiBHZXRVc2VySW5mbyhjYWxsYmFjaylcbiAgICB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvdXNlcnMvXCIgKyB1c2VyaWQsXG4gICAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbGV0IGNvbnRyb2xsZXIgcmVzdW1lIHdpdGggc3R1ZmZcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhWzBdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoXCIvZXJyb3IuaHRtbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBHZXRVc2VySW5mbzogR2V0VXNlckluZm9cbiAgICB9XG59OyIsInZhciBXaXNobGlzdE1vZGVsID0gZnVuY3Rpb24oKVxue1xuICAgIGZ1bmN0aW9uIGdldFdpc2hsaXN0KGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIldMIE1PREVMOiBJbnNpZGUgZ2V0V2lzaExpc3RcIik7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvd2lzaGxpc3RcIixcbiAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIENvb2tpZUhlbHBlci5nZXRDb29raWUoXCJhY2Nlc3NfdG9rZW5cIilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUb1dpc2hsaXN0KHZpZXdEYXRhLCBjYWxsYmFjaylcbiAgICB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJXTCBNT0RFTDogSW5zaWRlIGFkZFRvV2lzaExpc3RcIik7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvd2lzaGxpc3QvXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwidXNlcl9pZFwiKSAvKisgXCIvXCIgKyB2aWV3RGF0YS5lYW5fbnVtYmVyKi8sXG4gICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgd2lzaGxpc3RfaWQgOiB2aWV3RGF0YS53aXNobGlzdF9pZCxcbiAgICAgICAgICAgICAgICAvL2Vhbl9udW1iZXIgOiB2aWV3RGF0YS5lYW5fbnVtYmVyXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogXCJCZWFyZXIgXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwiYWNjZXNzX3Rva2VuXCIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZChcIi92aWV3cy9lcnJvci9lcnJvci5odG1sXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVGcm9tV2lzaGxpc3QoZWFuLCBjYWxsYmFjaylcbiAgICB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkuYXotZ2FtZXMubmwvd2lzaGxpc3QvXCIgKyBDb29raWVIZWxwZXIuZ2V0Q29va2llKFwidXNlcl9pZFwiKSArIFwiL1wiICsgU3RyaW5nKGVhbiksIC8vXCJodHRwczovL2FwaS5hei1nYW1lcy5ubC9cbiAgICAgICAgICAgIHR5cGU6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgLy8gY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgLy8gZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgQ29va2llSGVscGVyLmdldENvb2tpZShcImFjY2Vzc190b2tlblwiKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7IC8vbW9ldCBkYXRhIHBlciBzZSBtZWVnZXZlbiBhYW4gY2FsbGJhY2s/XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKFwiL3ZpZXdzL2Vycm9yL2Vycm9yLmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0V2lzaGxpc3Q6IGdldFdpc2hsaXN0LFxuICAgICAgICBhZGRUb1dpc2hsaXN0OiBhZGRUb1dpc2hsaXN0LFxuICAgICAgICBkZWxldGVGcm9tV2lzaGxpc3Q6IGRlbGV0ZUZyb21XaXNobGlzdFxuICAgIH1cbn07IiwidmFyIEFkbWluQ29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxue1xuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xuICAgIFxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihnZXRQYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYWdlKClcbiAgICB7XG4gICAgICAgIE1vZGVsLmdldFBhZ2Uoc2V0Vmlldyk7IC8vXCJcIiwgZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VmlldyhkYXRhKSBcbiAgICB7XG4gICAgICAgIFZpZXdIZWxwZXIuc2V0VmlldyhkYXRhKTtcbiAgICB9XG5cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFpbjogbWFpblxuICAgIH1cbn07IiwidmFyIEFkbWluVXNlckNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcbntcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcbiAgICBcbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcbiAgICBmdW5jdGlvbiBtYWluKClcbiAgICB7XG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoZ2V0UGFnZSk7XG4gICAgICAgIHZpZXdIZWxwZXIuc2V0U2F2ZUxpc3RlbmVyKHNhdmVVc2VySW5mbyk7XG4gICAgICAgIHZpZXdIZWxwZXIuc2V0RGVsZXRlTGlzdGVuZXIoZGVsZXRlVXNlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFnZSgpXG4gICAge1xuICAgICAgICBNb2RlbC5nZXRQYWdlKHNldFZpZXcpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBzZXRWaWV3KGRhdGEpIFxuICAgIHtcbiAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhdmVVc2VySW5mbyhldmVudClcbiAgICB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHZhciBmb3JtRGF0YSA9ICQodGhpcykuc2VyaWFsaXplT2JqZWN0KCk7XG5cbiAgICAgICAgTW9kZWwuc2F2ZVVzZXJJbmZvKGZvcm1EYXRhLCBmdW5jdGlvbihmb3JtRGF0YSlcbiAgICAgICAge1xuICAgICAgICAgICAgYWxlcnQoXCJHZWJydWlrZXIgc3VjY2Vzdm9sIGdlw7xwZGF0ZS5cIik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZVVzZXIodXNlcl9pZClcbiAgICB7XG4gICAgICAgIE1vZGVsLmRlbGV0ZVVzZXIodXNlcl9pZCwgZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICBhbGVydChcIkdlYnJ1aWtlciBzdWNjZXN2b2wgZ2VkZWxldGUuXCIpO1xuICAgICAgICAgICAgUm91dGVyLnJvdXRlKFwiL2FkbWluXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICB9XG59OyIsInZhciBDYXJ0Q29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxue1xuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgY2FydCBpdGVtcyBhbmQgcGFzcyB0aGUgaXRlbXMgdG8gdGhlIFZpZXdIZWxwZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDYXJ0KClcbiAgICB7XG4gICAgICAgIE1vZGVsLmdldENhcnQoZnVuY3Rpb24gKGRhdGEpIHsgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpOyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBpdGVtIHRvIHRoZSBjYXJ0IGFuZCBwYXNzIGl0IHRvIHRoZSB2aWV3SGVscGVyXG4gICAgICogXG4gICAgICogQHBhcmFtIHtpbnR9IGlkICBJdGVtIGlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUHJvZHVjdChpZClcbiAgICB7XG4gICAgICAgIE1vZGVsLmFkZFByb2R1Y3QoaWQsIGZ1bmN0aW9uIChkYXRhKSB7IFZpZXdIZWxwZXIuYWRkSXRlbShkYXRhKTsgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJvZHVjdCBhbmQgY2FsbCB0aGUgdmlld0hlbHBlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVByb2R1Y3QoaWQpXG4gICAge1xuICAgICAgICBNb2RlbC5yZW1vdmVQcm9kdWN0KGlkLCBmdW5jdGlvbiAoZGF0YSkgeyB9KTtcbiAgICB9XG5cbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydCBzdGFydHBvaW50IGZvciBhIHBhZ2VcbiAgICBmdW5jdGlvbiBtYWluKClcbiAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWN0aW9uTGlzdGVuZXIoZ2V0Q2FydCk7XG4gICAgICAgIFZpZXdIZWxwZXIuc2V0QWRkUHJvZHVjdExpc3RlbmVyKGFkZFByb2R1Y3QpO1xuICAgICAgICBWaWV3SGVscGVyLnNldFJlbW92ZUxpc3RlbmVyKHJlbW92ZVByb2R1Y3QpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFpbjogbWFpblxuICAgIH1cbn07IiwidmFyIERlbGV0ZUNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcbntcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcblxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxufSIsInZhciBFcnJvckNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyKVxue1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcblxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgLy8gc2V0IHZpZXcgdG8gbG9naW4gZm9ybVxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICB9XG59OyIsInZhciBMb2dpbkNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcbntcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKGV2ZW50KVxuICAgIHtcbiAgICAgICAgLy8gUHJldmVudCBzZW5kaW5nIHRoZSBmb3JtXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIC8vIExvb3AgdHJvdWdoIHRoZSBmb3JtIGRhdGEgYW5kIGdldCBhbGwgZmllbGRzXG4gICAgICAgIHZhciBmb3JtRGF0YSA9IHt9O1xuICAgICAgICAkLmVhY2goJCh0aGlzKS5zZXJpYWxpemVBcnJheSgpLCBmdW5jdGlvbiAoaSwgZmllbGQpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGxldCBtb2RlbCBzZW5kIGVtYWlsIGFuZCBwYXNzd29yZCB0byBBUElcbiAgICAgICAgTW9kZWwubG9naW4oZm9ybURhdGEuZW1haWwsIGZvcm1EYXRhLnBhc3N3b3JkLCBmdW5jdGlvbiBvblN1Y2Nlc3MoZGF0YSkge1xuICAgICAgICAgICAgLy8gc2hvdyB1aXRsb2dnZW4gYnV0dG9uXG4gICAgICAgICAgICAkKFwiI2lubG9nZ2VuX3RleHRcIikuaGlkZSgpO1xuICAgICAgICAgICAgJChcIiN1aXRsb2dnZW5fdGV4dFwiKS5zaG93KCk7XG5cbiAgICAgICAgICAgIC8vIFdlZXJnZWVmIGVlbiBhbmRlcmUgcGFnaW5hIGdlYmFzc2VlcmQgb3AgJ2FkbWluJyBvZiAncmVnaXN0ZXJlZCB1c2VyJ1xuICAgICAgICAgICAgbmV3IFBhZ2VDb250cm9sbGVyKG5ldyBQYWdlVmlld0hlbHBlcigpLCBuZXcgUGFnZU1vZGVsKCkpLm1haW4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXG4gICAgZnVuY3Rpb24gbWFpbigpXG4gICAge1xuICAgICAgICAvLyBzZXQgdmlldyB0byBsb2dpbiBmb3JtXG4gICAgICAgIFZpZXdIZWxwZXIuc2V0VmlldygpO1xuXG4gICAgICAgIC8vIHVzZXIgZmlsbHMgaW4gZW1haWwgYW5kIHBhc3N3b3JkOyBjbGlja3MgJ2xvZ2luJzogVklFVyBub3RpY2VzIHRoaXMgYW5kIHJlYWN0c1xuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGFjdGlvblBlcmZvcm1lZCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWluOiBtYWluXG4gICAgfVxufTsiLCJ2YXIgTG9nb3V0Q29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxue1xuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xuICAgIFxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoZXZlbnQpXG4gICAge1xuICAgICAgICBNb2RlbC5sb2dvdXQoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIHNob3cgdWl0bG9nZ2VuIGJ1dHRvblxuICAgICAgICAgICAgJChcIiNpbmxvZ2dlbl90ZXh0XCIpLnNob3coKTtcbiAgICAgICAgICAgICQoXCIjdWl0bG9nZ2VuX3RleHRcIikuaGlkZSgpO1xuXG4gICAgICAgICAgICAvLyBzZXQgdmlldyB0byBsb2dpbiBmb3JtXG4gICAgICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXG4gICAgZnVuY3Rpb24gbWFpbigpXG4gICAge1xuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIGVtYWlsIGFuZCBwYXNzd29yZDsgY2xpY2tzICdsb2dpbic6IFZJRVcgbm90aWNlcyB0aGlzIGFuZCByZWFjdHNcbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb25QZXJmb3JtZWQpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFpbjogbWFpblxuICAgIH1cbn07IiwidmFyIFBhZ2VDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXG57XG4gICAgdmFyIE1vZGVsID0gbW9kZWw7XG4gICAgdmFyIFZpZXcgID0gdmlld0hlbHBlcjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKGV2ZW50KVxuICAgIHtcbiAgICAgICAgTW9kZWwuZ2V0UGFnZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgVmlldy5zZXRWaWV3KGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBNYWluIGZ1bmN0aW9uLCBhbHNvIHRoZSBzdGFydHBvaW50IGZvciBhIHBhZ2VcbiAgICBmdW5jdGlvbiBtYWluKClcbiAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIFZpZXcuc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uUGVyZm9ybWVkKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICB9XG59OyIsInZhciBQcm9kdWN0c0NvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcbntcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gZ2V0UGFnZSgpXG4gICAge1xuICAgICAgICBNb2RlbC5nZXRQYWdlKFwiXCIsIGZ1bmN0aW9uIChkYXRhKSB7IFZpZXdIZWxwZXIuc2V0VmlldyhkYXRhKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyUHJvZHVjdHMoZXZlbnQpXG4gICAge1xuICAgICAgICAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIGZvcm0gKHBhZ2UgcmVsb2FkKVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHZhciBmaWx0ZXJzID0gJCh0aGlzKS5zZXJpYWxpemUoKTtcbiAgICAgICAgTW9kZWwuZ2V0UGFnZShmaWx0ZXJzLCBmdW5jdGlvbiAoZGF0YSkgeyBWaWV3SGVscGVyLmxvYWRQcm9kdWN0cyhkYXRhKTsgfSk7XG4gICAgfVxuXG4gICAgLy8gTWFpbiBmdW5jdGlvbiwgYWxzbyB0aGUgc3RhcnQgc3RhcnRwb2ludCBmb3IgYSBwYWdlXG4gICAgZnVuY3Rpb24gbWFpbigpXG4gICAge1xuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGdldFBhZ2UpO1xuICAgICAgICBWaWV3SGVscGVyLnNldEZpbHRlckxpc3RlbmVyKGZpbHRlclByb2R1Y3RzKTtcbiAgICAgICAgLy8gbmV3IGFjdGlvbiB3YW5uZXIgZXIgb3AgZmlsdGVyIHdvcmR0IGdlZHJ1a3RcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICB9XG59OyIsInZhciBSZWdpc3RlckNvbnRyb2xsZXIgPSBmdW5jdGlvbih2aWV3SGVscGVyLCBtb2RlbClcbntcbiAgICB2YXIgTW9kZWwgICAgICA9IG1vZGVsO1xuICAgIHZhciBWaWV3SGVscGVyID0gdmlld0hlbHBlcjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGEgYWN0aW9uIGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gYWN0aW9uUGVyZm9ybWVkKClcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaW4gYWN0aW9uUGVyZm9ybWVkXCIpOyAvL3Rlc3RcblxuICAgICAgICAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIGZvcm1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyByZXNldCBlcnJvciBtZXNzYWdlc1xuICAgICAgICAkKFwiI3JlZ2lfYXBpX2Vycm9yX21lc3NhZ2VcIikuaGlkZSgpO1xuICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLmhpZGUoKTtcblxuICAgICAgICAvLyBwdXQgZm9ybSBmaWVsZHMgaW4gamF2YXNjcmlwdCBPYmplY3RcbiAgICAgICAgdmFyIGZvcm1EYXRhID0ge307XG5cbiAgICAgICAgJC5lYWNoKCQodGhpcykuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKGksIGZpZWxkKSB7XG4gICAgICAgICAgICBmb3JtRGF0YVtmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmaXggZGF0ZSBvZiBiaXJ0aCAoQVBJIGV4cGVjdHMgY2VydGFpbiBmb3JtYXQpXG4gICAgICAgIGZvcm1EYXRhW1wiYmlydGhfZGF0ZVwiXSA9IGZvcm1EYXRhLmphYXIgKyBcIi1cIiArIGZvcm1EYXRhLm1hYW5kICsgXCItXCIgKyBmb3JtRGF0YS5kYWc7XG5cbiAgICAgICAgY29uc29sZS5sb2coZm9ybURhdGEpO1xuXG4gICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgYW55IG1hbmRhdG9yeSBmaWVsZCBpcyBsZWZ0IGVtcHR5IGJ5IHVzZXIgYW5kXG4gICAgICAgIC8vIGlmIHNvLCBhYm9ydCBmdW5jdGlvblxuICAgICAgICB2YXIgbWFuZGF0b3J5RmllbGRNaXNzZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIG1hbmRhdG9yeUZpZWxkcyA9IFtcInZvb3JuYWFtXCIsIFwiYWNodGVybmFhbVwiLCBcInBvc3Rjb2RlXCIsIFwiaHVpc251bW1lclwiLCBcImVfbWFpbGFkcmVzXCIsIFwid2FjaHR3b29yZFwiLCBcIndhY2h0d29vcmQyXCIsIFwic2VjdXJpdHlfYW5zd2VyXCJdOyAvL2Ryb3Bkb3ducyAobGlrZSBnZW5kZXIpIGFyZSBhbHdheXMgZmlsbGVkIGluLCBzbyBkb24ndCBwdXQgaW4gdGhpcyBsaXN0XG5cbiAgICAgICAgLy8gKHJlc2V0IGFsbCBmaWVsZHMgdG8gJ3ZhbGlkJyBiZWNhdXNlIHVzZXIgbWF5IGhhdmUgZmlsbGVkIGluIGZpZWxkcyBzaW5jZVxuICAgICAgICAvLyB0aGUgcHJldmlvdXMgdGltZSB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWQpXG4gICAgICAgICQuZWFjaChtYW5kYXRvcnlGaWVsZHMsIGZ1bmN0aW9uIChpLCBtYW5GaWVsZCkge1xuICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5yZW1vdmVDbGFzcyhcImludmFsaWRcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgJC5lYWNoKG1hbmRhdG9yeUZpZWxkcywgZnVuY3Rpb24gKGksIG1hbkZpZWxkKSB7XG4gICAgICAgICAgICBpZiAoZm9ybURhdGFbbWFuRmllbGRdID09IFwiXCIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5hZGRDbGFzcyhcImludmFsaWRcIik7XG5cbiAgICAgICAgICAgICAgICBtYW5kYXRvcnlGaWVsZE1pc3NlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgXG4gICAgICAgIC8vIGlmIGEgbWFuZGF0b3J5IGZpZWxkIGlzIGVtcHR5LCBzaG93IGVycm9yIG1lc3NhZ2UgdG8gdXNlciBhbmQgYWJvcnQgZnVuY3Rpb25cbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzKVxuICAgICAgICB7IFxuICAgICAgICAgICAgLy8gc2Nyb2xsIHRvIHRvcCBvZiBwYWdlIHNvIHRoYXQgdXNlcnMgc2VlIG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgICAvLyBzaG93IG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXG4gICAgICAgICAgICAkKFwiI3JlZ2lzdGVyX2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwYXNzd29yZHNOb3RJZGVudGljYWwgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZm9ybURhdGEud2FjaHR3b29yZCAhPSBmb3JtRGF0YS53YWNodHdvb3JkMikgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBhc3N3b3Jkc05vdElkZW50aWNhbCA9IHRydWU7XG4gICAgICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcbiAgICAgICAgICAgICQoXCIjd2FjaHR3b29yZFwiKS5hZGRDbGFzcyhcImludmFsaWRcIik7XG4gICAgICAgICAgICAkKFwiI3dhY2h0d29vcmQyXCIpLmFkZENsYXNzKFwiaW52YWxpZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFib3J0IGZ1bmN0aW9uIGlmIG1hbmRhdG9yeSBmaWVsZCBtaXNzZXMgb3IgcGFzc3dvcmRzIG5vdCBpZGVudGljYWxcbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzIHx8IHBhc3N3b3Jkc05vdElkZW50aWNhbClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29udGludWVkXCIpXG4gICAgICAgIC8vIGxldCBtb2RlbCBzZW5kIHVzZXIgaW5mbyB0byBBUElcbiAgICAgICAgTW9kZWwucmVnaXN0ZXIoZm9ybURhdGEsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoJy92aWV3cy9yZWdpc3Rlci9hZnRlcl9yZWdpc3Rlci5odG1sJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgLy8gc2V0IHZpZXcgdG8gcmVnaXN0ZXIgZm9ybVxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoJy92aWV3cy9yZWdpc3Rlci9yZWdpc3Rlci5odG1sJyk7XG5cbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiByZWdpc3RlciBpbmZvOyBjbGlja3MgJ3JlZ2lzdGVyJzogdmlldyBub3RpY2VzIHRoaXMgYW5kIHJlYWN0c1xuICAgICAgICBWaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGFjdGlvblBlcmZvcm1lZCk7XG5cbiAgICAgICAgLy8gZW1haWwgYW5kIHBhc3N3b3JkIGFyZSBzZW5kIHRvIEFQSTsgQVBJIGNoZWNrcyBpZiBlbWFpbCBhbHJlYWR5IGV4aXN0cyAoYW5kIHdoZXRoZXIgcGFzc3dvcmQgaXMgY29ycmVjdD8pIFxuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFpbjogbWFpblxuICAgIH1cbn07IiwidmFyIFJlc2V0UGFzc3dvcmRDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXG57XG4gICAgdmFyIE1vZGVsICAgICAgPSBtb2RlbDtcbiAgICB2YXIgVmlld0hlbHBlciA9IHZpZXdIZWxwZXI7XG4gICAgXG4gICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoKVxuICAgIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJpbiBhY3Rpb25QZXJmb3JtZWRcIik7IC8vdGVzdFxuXG4gICAgICAgIC8vIFByZXZlbnQgc2VuZGluZyB0aGUgZm9ybVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIHJlc2V0IGVycm9yIG1lc3NhZ2VzXG4gICAgICAgICQoXCIjcmVzZXRfcGFzc3dvcmRfYXBpX2Vycm9yX21lc3NhZ2VcIikuaGlkZSgpO1xuICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLmhpZGUoKTtcblxuICAgICAgICAvLyBwdXQgZm9ybSBmaWVsZHMgaW4gamF2YXNjcmlwdCBPYmplY3RcbiAgICAgICAgdmFyIGZvcm1EYXRhID0ge307XG5cbiAgICAgICAgJC5lYWNoKCQodGhpcykuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKGksIGZpZWxkKSB7XG4gICAgICAgICAgICBmb3JtRGF0YVtmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGVjayB3aGV0aGVyIGFueSBtYW5kYXRvcnkgZmllbGQgaXMgbGVmdCBlbXB0eSBieSB1c2VyIGFuZFxuICAgICAgICAvLyBpZiBzbywgYWJvcnQgZnVuY3Rpb25cbiAgICAgICAgdmFyIG1hbmRhdG9yeUZpZWxkTWlzc2VzID0gZmFsc2U7XG4gICAgICAgIHZhciBtYW5kYXRvcnlGaWVsZHMgPSBbXCJ3YWNodHdvb3JkXCIsIFwid2FjaHR3b29yZDJcIiwgXCJlX21haWxhZHJlc1wiLFwic2VjdXJpdHlfYW5zd2VyXCJdOyAvL2Ryb3Bkb3ducyAobGlrZSBzZWN1cml0eV9xdWVzdGlvbl9hbnN3ZXIpIGFyZSBhbHdheXMgZmlsbGVkIGluLCBzbyBkb24ndCBwdXQgaW4gdGhpcyBsaXN0XG5cbiAgICAgICAgLy8gKHJlc2V0IGFsbCBmaWVsZHMgdG8gJ3ZhbGlkJyBiZWNhdXNlIHVzZXIgbWF5IGhhdmUgZmlsbGVkIGluIGZpZWxkcyBzaW5jZVxuICAgICAgICAvLyB0aGUgcHJldmlvdXMgdGltZSB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWQpXG4gICAgICAgICQuZWFjaChtYW5kYXRvcnlGaWVsZHMsIGZ1bmN0aW9uIChpLCBtYW5GaWVsZCkge1xuICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5yZW1vdmVDbGFzcyhcImludmFsaWRcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgJC5lYWNoKG1hbmRhdG9yeUZpZWxkcywgZnVuY3Rpb24gKGksIG1hbkZpZWxkKSB7XG4gICAgICAgICAgICBpZiAoZm9ybURhdGFbbWFuRmllbGRdID09IFwiXCIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJChcIiNcIiArIG1hbkZpZWxkKS5hZGRDbGFzcyhcImludmFsaWRcIik7XG5cbiAgICAgICAgICAgICAgICBtYW5kYXRvcnlGaWVsZE1pc3NlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgXG4gICAgICAgIC8vIGlmIGEgbWFuZGF0b3J5IGZpZWxkIGlzIGVtcHR5LCBzaG93IGVycm9yIG1lc3NhZ2UgdG8gdXNlciBhbmQgYWJvcnQgZnVuY3Rpb25cbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzKVxuICAgICAgICB7IFxuICAgICAgICAgICAgLy8gc2Nyb2xsIHRvIHRvcCBvZiBwYWdlIHNvIHRoYXQgdXNlcnMgc2VlIG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgICAvLyBzaG93IG1lc3NhZ2UgXCJzb21ldGhpbmcgaXMgbm90IGZpbGxlZCBpblwiXG4gICAgICAgICAgICAkKFwiI3Jlc2V0X2Vycm9yX21lc3NhZ2VcIikuc2hvdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwYXNzd29yZHNOb3RJZGVudGljYWwgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZm9ybURhdGEud2FjaHR3b29yZCAhPSBmb3JtRGF0YS53YWNodHdvb3JkMikgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBhc3N3b3Jkc05vdElkZW50aWNhbCA9IHRydWU7XG4gICAgICAgICAgICAkKFwiI3d3Ml9lcnJvcl9tZXNzYWdlXCIpLnNob3coKTtcbiAgICAgICAgICAgICQoXCIjd2FjaHR3b29yZFwiKS5hZGRDbGFzcyhcImludmFsaWRcIik7XG4gICAgICAgICAgICAkKFwiI3dhY2h0d29vcmQyXCIpLmFkZENsYXNzKFwiaW52YWxpZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFib3J0IGZ1bmN0aW9uIGlmIG1hbmRhdG9yeSBmaWVsZCBtaXNzZXMgb3IgcGFzc3dvcmRzIG5vdCBpZGVudGljYWxcbiAgICAgICAgaWYgKG1hbmRhdG9yeUZpZWxkTWlzc2VzIHx8IHBhc3N3b3Jkc05vdElkZW50aWNhbClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29udGludWVkXCIpXG4gICAgICAgIC8vIGxldCBtb2RlbCBzZW5kIHVzZXIgaW5mbyB0byBBUElcbiAgICAgICAgTW9kZWwucmVzZXRwYXNzd29yZChmb3JtRGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIFZpZXdIZWxwZXIuc2V0Vmlldygndmlld3MvcmVzZXRwYXNzd29yZC9hZnRlcl9yZXNldC5odG1sJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHsgICAgICBcbiAgICAgICAgLy8gc2V0IHZpZXcgdG8gcmVzZXQgcGFzc3dvcmQgZm9ybVxuICAgICAgICBWaWV3SGVscGVyLnNldFZpZXcoJ3ZpZXdzL3Jlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZC5odG1sJyk7XG5cbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb25QZXJmb3JtZWQpO1xuICAgICAgICAvLyBuZXcgYWN0aW9uIHdhbm5lciBlciBvcCBmaWx0ZXIgd29yZHQgZ2VkcnVrdFxuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFpbjogbWFpblxuICAgIH1cbn07XG5cblxuXG5cbiIsInZhciBQcm9kdWN0Q29udHJvbGxlciA9IGZ1bmN0aW9uKHZpZXdIZWxwZXIsIG1vZGVsKVxue1xuICAgIHZhciBNb2RlbCAgICAgID0gbW9kZWw7XG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xuICAgIFxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gYSBhY3Rpb24gbGlzdGVuZXJcbiAgICBmdW5jdGlvbiBhY3Rpb25QZXJmb3JtZWQoZXZlbnQpXG4gICAge1xuICAgICAgICAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIGZvcm1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXG5cblxuXG5cbiAgICAgICAgLy8gTG9vcCB0cm91Z2ggdGhlIGZvcm0gZGF0YSBhbmQgZ2V0IGFsbCBmaWVsZHNcbiAgICAgICAgdmFyIGZvcm1EYXRhID0ge307XG4gICAgICAgICQuZWFjaCgkKHRoaXMpLnNlcmlhbGl6ZUFycmF5KCksIGZ1bmN0aW9uIChpLCBmaWVsZCkge1xuICAgICAgICAgICAgZm9ybURhdGFbZmllbGQubmFtZV0gPSBmaWVsZC52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbGV0IG1vZGVsIHNlbmQgZW1haWwgYW5kIHBhc3N3b3JkIHRvIEFQSVxuICAgICAgICBNb2RlbC5sb2dpbihmb3JtRGF0YS5lbWFpbCwgZm9ybURhdGEucGFzc3dvcmQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAvLyBzaG93IHVpdGxvZ2dlbiBidXR0b25cbiAgICAgICAgICAgICQoXCIjaW5sb2dnZW5fdGV4dFwiKS5oaWRlKCk7XG4gICAgICAgICAgICAkKFwiI3VpdGxvZ2dlbl90ZXh0XCIpLnNob3coKTtcblxuICAgICAgICAgICAgLy8gV2VlcmdlZWYgZWVuIGFuZGVyZSBwYWdpbmEgZ2ViYXNzZWVyZCBvcCAnYWRtaW4nIG9mICdyZWdpc3RlcmVkIHVzZXInXG4gICAgICAgICAgICBuZXcgUGFnZUNvbnRyb2xsZXIobmV3IFBhZ2VWaWV3SGVscGVyKCksIG5ldyBQYWdlTW9kZWwoKSkubWFpbigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBsZXQgdmlldyBzaG93IHZpZXcgd2l0aCBkYXRhIGZyb20gZGF0YWJhc2VcbiAgICBmdW5jdGlvbiBzaG93VmlldyhkYXRhKVxuICAgIHtcbiAgICAgICAgdmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xuICAgIH1cblxuICAgIC8vIE1haW4gZnVuY3Rpb24sIGFsc28gdGhlIHN0YXJ0IHN0YXJ0cG9pbnQgZm9yIGEgcGFnZVxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgLy8gd2hhdCBoYXBwZW5zOlxuICAgICAgICAvLyAxKSB1c2VyIGNsaWNrcyBvbiBhIHByb2R1Y3QgXG4gICAgICAgIC8vIDIpIG1vZGVsIGdldHMgaW5mbyBvZiB0aGUgcHJvZHVjdFxuICAgICAgICAvLyAzKSBzeXN0ZW0gcHV0cyBpbmZvIGluIGh0bWxcbiAgICAgICAgLy8gNCkgdmlldyBzaG93cyBpbmZvXG5cbiAgICAgICAgLy8gMikgbW9kZWwgZ2V0cyBpbmZvIG9mIHRoZSBwcm9kdWN0XG4gICAgICAgIC8vIDMpIHN5c3RlbSBwdXRzIGluZm8gaW4gaHRtbFxuICAgICAgICBtb2RlbC5HZXRQcm9kdWN0SW5mbyhzaG93Vmlldyk7XG5cblxuXG4gICAgICAgIC8vIHNldCB2aWV3IHRvIGxvZ2luIGZvcm1cbiAgICAgICAgLy9WaWV3SGVscGVyLnNldFZpZXcoKTtcblxuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIGVtYWlsIGFuZCBwYXNzd29yZDsgY2xpY2tzICdsb2dpbic6IFZJRVcgbm90aWNlcyB0aGlzIGFuZCByZWFjdHNcbiAgICAgICAgLy9WaWV3SGVscGVyLnNldEFjdGlvbkxpc3RlbmVyKGFjdGlvblBlcmZvcm1lZCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICBzaG93VmlldyA6IHNob3dWaWV3XG4gICAgfVxufTsiLCJ2YXIgV2lzaGxpc3RDb250cm9sbGVyID0gZnVuY3Rpb24odmlld0hlbHBlciwgbW9kZWwpXG57XG4gICAgdmFyIE1vZGVsID0gbW9kZWw7XG4gICAgdmFyIFZpZXdIZWxwZXIgPSB2aWV3SGVscGVyO1xuICAgIHZhciB2aWV3RGF0YSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0V2lzaGxpc3QoKVxuICAgIHtcbiAgICAgICAgTW9kZWwuZ2V0V2lzaGxpc3Qoc2V0Vmlldyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmlldyhkYXRhKVxuICAgIHtcbiAgICAgICAgVmlld0hlbHBlci5zZXRWaWV3KGRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oKVxuICAgIHtcbiAgICAgICAgVmlld0hlbHBlci5zZXRBY3Rpb25MaXN0ZW5lcihnZXRXaXNobGlzdCk7XG4gICAgICAgIFZpZXdIZWxwZXIuc2V0RGVsZXRlTGlzdGVuZXIoZGVsZXRlRnJvbVdpc2hsaXN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVGcm9tV2lzaGxpc3QoZWFuLCBkaXZfdG9faGlkZSlcbiAgICB7XG4gICAgICAgIE1vZGVsLmRlbGV0ZUZyb21XaXNobGlzdChlYW4sIGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgVmlld0hlbHBlci5oaWRlSXRlbShkaXZfdG9faGlkZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICB9XG59OyIsInZhciBBZG1pblZpZXdIZWxwZXIgPSBmdW5jdGlvbiAoKVxue1xuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcbiAgICB7XG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7IC8vIGlmICdkb2N1bWVudCByZWFkeScgcGVyZm9ybSBcImFjdGlvblwiXG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXG4gICAgIGZ1bmN0aW9uIHNldFZpZXcoZGF0YSlcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID1cIkFkbWluIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvYWRtaW4vYWRtaW4uaHRtbCcsIGZ1bmN0aW9uICgpIHsgLy8gd2FhciBpZCA9ICdjb21wb25lbnQnIGRvZSAubG9hZC4uLi4uLlxuICAgICAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDbG9uZSBwcm9kdWN0XG4gICAgICAgICAgICAgICAgdmFyIHVzZXIgPSAkKCcjc2luZ2xlX3VzZXInKS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFkZCBwcm9kdWN0IGluZm9cbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fZmlyc3RuYW1lXCIpLmh0bWwodmFsdWUuZmlyc3RfbmFtZSk7XG4gICAgICAgICAgICAgICAgJCh1c2VyKS5maW5kKFwiLnVzZXJfX2ZpcnN0bmFtZVwiKS5hdHRyKCdocmVmJywgJy9hZG1pbl91c2VyLycgKyB2YWx1ZS51c2VyX2lkKTtcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9faW5zZXJ0aW9uXCIpLmh0bWwodmFsdWUuaW5zZXJ0aW9uKTtcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fbGFzdG5hbWVcIikuaHRtbCh2YWx1ZS5zdXJuYW1lKTtcbiAgICAgICAgICAgICAgICAkKHVzZXIpLmZpbmQoXCIudXNlcl9fZW1haWxcIikuaHRtbCh2YWx1ZS5lbWFpbCk7XG4gICAgICAgICAgICAgICAgJCh1c2VyKS5maW5kKFwiLnVzZXJfX3Bob25lbnVtYmVyXCIpLmh0bWwodmFsdWUucGhvbmVfbnVtYmVyKTtcblxuICAgICAgICAgICAgICAgICQoXCIjdXNlcnNfYm9keVwiKS5hcHBlbmQodXNlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBsaXN0IGl0ZW0sIGJlY2F1c2UgdGhpcyBpdGVtIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAgICAgJChcIiNzaW5nbGVfdXNlclwiKS5maXJzdCgpLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXIsXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgfVxufVxuXG4gICAgLy9kYXQgaGllcm9uZGVyIHphdCBhYXJkaWcgd2F0IHdlcmsgaW4uLi4gRG9uYWxkIHdpbCBub2cgZmYgaG91ZGVuXG5cbiAgICAvLyBmdW5jdGlvbiBzaG93VXNlcnMoZGF0YSlcbiAgICAvLyB7XG4gICAgLy8gICAgIGRvY3VtZW50LnRpdGxlID1cIkFkbWluIC0gQVogR2FtZXNcIjtcblxuICAgIC8vICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvYWRtaW4vYWRtaW4uaHRtbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgICAgIHZhciB0YWJsZSA9ICQoXCI8dGFibGUgaWQ9J3VzZXJzX3RhYmxlJz48L3RhYmxlPlwiKTtcblxuICAgIC8vICAgICAgICAgLy8gdGFibGUgaGVhZGVyXG4gICAgLy8gICAgICAgICB2YXIgcm93ID0gJCgnPHRyPjwvdHI+Jyk7XG4gICAgLy8gICAgICAgICByb3cuYXBwZW5kKCc8dGQ+Vm9vcm5hYW08L3RkPjx0ZD5UdXNzZW52PC90ZD48dGQ+QWNodGVybmFhbTwvdGQ+PHRkPkdlYnJ1aWtlcnNuYWFtPC90ZD48dGQ+ZW1haWw8L3RkPjx0ZD50eXBlPC90ZD4nKTtcblxuICAgIC8vICAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKG51bWJlcnIsIHVzZXIpIFxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgIHZhciByb3cgPSAkKCc8dHI+PC90cj4nKTtcbiAgICAvLyAgICAgICAgICAgICAkLmVhY2godXNlciwgZnVuY3Rpb24oa2V5LCB2YWx1ZSlcbiAgICAvLyAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpXG4gICAgLy8gICAgICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoICQoXCI8dGQgY2xhc3M9J3RkX3VzZXInPjwvdGQ+XCIpLmh0bWwoU3RyaW5nKHZhbHVlKSkgKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoICQoXCI8dGQgY2xhc3M9J3RkX3VzZXInPjwvdGQ+XCIpICk7XG4gICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgICB9KVxuICAgIC8vICAgICAgICAgICAgIHRhYmxlLmFwcGVuZChyb3cpO1xuICAgIC8vICAgICAgICAgICAgIC8vIC8vZm9yIGFkZGl0aW9uYWwgdXNlciBpbmZvIGlmIGNsaWNrZWRcbiAgICAvLyAgICAgICAgICAgICAvLyByb3cgPSAkKCc8ZGl2IGNsYXNzPVwidG9iZXRhYmxlXCI+PC9kaXY+Jyk7XG4gICAgLy8gICAgICAgICAgICAgLy8gdGFibGUuYXBwZW5kKHJvdyk7XG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgICQoJyN1c2VycycpLmFwcGVuZCh0YWJsZSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vIH1cblxuICAgIC8vIGZ1bmN0aW9uIHB1dEluZm9Jbkh0bWwoY2xpY2tlZCwgZGF0YSlcbiAgICAvLyB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdpbiBwdXRJbmZvSW5IdG1sKCknKTtcbiAgICAvLyAgICAgLy8gc2hvdyBpbmZvIG9mIHRoZSByaWdodCB1c2VyIChpZiBub3QgYWxyZWFkeSBzaG93aW5nIGl0KVxuICAgIC8vICAgICAvLyBpbnNlcnQgcm93IGFzIHRhYmxlIGhlYWRlclxuICAgIC8vICAgICB2YXIgaGVhZGVycm93ID0gJCgnPHRyPjwvdHI+JykuYXBwZW5kKCc8dGQ+d3c8L3RkPjx0ZD5nZWJsb2trZWVyZDwvdGQ+PHRkPmlkPC90ZD48dGQ+Z2VuZGVyPC90ZD48dGQ+Z2Vib29ydGVkYXR1bTwvdGQ+PHRkPnZyYWFnPC90ZD48dGQ+YW50d29vcmQ8L3RkPicpO1xuXG4gICAgLy8gICAgIC8vIGluc2VydCByb3cgd2l0aCB0ZSB1c2VyaW5mb1xuICAgIC8vICAgICB2YXIgaW5mb3JvdyA9ICQoJzx0cj48L3RyPicpO1xuXG4gICAgLy8gICAgIHZhciBjb3VudCA9IDA7XG4gICAgLy8gICAgICQuZWFjaChkYXRhWzBdLCBmdW5jdGlvbihrZXksIHZhbHVlKVxuICAgIC8vICAgICB7XG4gICAgLy8gICAgICAgICBpZiAoY291bnQgPT0gMSkgeyAvLyBnZWJsb2trZWVyZFxuICAgIC8vICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAxKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHZhbHVlID0gJ25lZSc7XG4gICAgLy8gICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSAwKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHZhbHVlID0gJ2phJ1xuICAgIC8vICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHZhbHVlID0gJ2RiIGZvdXQ/J1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIH1cblxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coY291bnQpO1xuICAgIC8vICAgICAgICAgdmFyIHRkID0gJCgnPHRkPjwvdGQ+JykuYXBwZW5kKHZhbHVlKTtcblxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ2tleSwgdmFsdWU6ICcgKyBrZXksIHZhbHVlKTtcblxuICAgIC8vICAgICAgICAgaW5mb3Jvdy5hcHBlbmQodGQpO1xuXG4gICAgLy8gICAgICAgICBjb3VudCArPSAxO1xuICAgIC8vICAgICB9KVxuXG4gICAgLy8gICAgIGluZm9yb3cuaW5zZXJ0QWZ0ZXIoICQoY2xpY2tlZCkuY2xvc2VzdCgndHInKSApO1xuICAgIC8vICAgICBoZWFkZXJyb3cuaW5zZXJ0QWZ0ZXIoJChjbGlja2VkKS5jbG9zZXN0KCd0cicpKTtcbiAgICAvLyB9XG5cbiIsInZhciBBZG1pblVzZXJWaWV3SGVscGVyID0gZnVuY3Rpb24gKClcbntcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXG4gICAge1xuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pOyAvLyBpZiAnZG9jdW1lbnQgcmVhZHknIHBlcmZvcm0gXCJhY3Rpb25cIlxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZpZXcoZGF0YSlcbiAgICB7XG4gICAgICAgIC8vcHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCgnL3ZpZXdzL2FkbWludXNlci9hZG1pbnVzZXIuaHRtbCcsIGZ1bmN0aW9uICgpXG4gICAgICAgIHtcbiAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbihrZXksIHZhbHVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICQoXCIjZGVsZXRlX2J0blwiKS5hdHRyKFwiZGF0YS1pZFwiLCB2YWx1ZS51c2VyX2lkKSAgIFxuICAgICAgICAgICAgICAgICQoXCIjZmlyc3RfbmFtZVwiKS52YWwodmFsdWUuZmlyc3RfbmFtZSk7XG4gICAgICAgICAgICAgICAgJChcIiNpbnNlcnRpb25cIikudmFsKHZhbHVlLmluc2VydGlvbik7XG4gICAgICAgICAgICAgICAgJChcIiNzdXJuYW1lXCIpLnZhbCh2YWx1ZS5zdXJuYW1lKTtcbiAgICAgICAgICAgICAgICAkKFwiI3VzZXJfdHlwZVwiKS52YWwodmFsdWUudXNlcl90eXBlKTtcbiAgICAgICAgICAgICAgICAkKFwiI2VtYWlsXCIpLnZhbCh2YWx1ZS5lbWFpbCk7XG4gICAgICAgICAgICAgICAgJChcIiNwYXNzd29yZFwiKS5hdHRyKCdwbGFjZWhvbGRlcicsICdWdWwgaGllciBpZXRzIGluIG9tIGhldCB3YWNodHdvb3JkIHRlIHZlcmFuZGVyZW4nKTtcbiAgICAgICAgICAgICAgICAkKFwiI2dlbmRlclwiKS52YWwodmFsdWUuZ2VuZGVyKTtcbiAgICAgICAgICAgICAgICAkKFwiI2RhdGVfb2ZfYmlydGhcIikudmFsKHZhbHVlLmRhdGVfb2ZfYmlydGgpO1xuICAgICAgICAgICAgICAgICQoXCIjcGhvbmVfbnVtYmVyXCIpLnZhbCh2YWx1ZS5waG9uZV9udW1iZXIpO1xuICAgICAgICAgICAgICAgICQoXCIjaXNfYWN0aXZlXCIpLnZhbCh2YWx1ZS5pc19hY3RpdmUpO1xuICAgICAgICAgICAgICAgICQoXCIjdXNlcl9pZFwiKS52YWwodmFsdWUudXNlcl9pZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNhdmVMaXN0ZW5lcihhY3Rpb24pXG4gICAge1xuICAgICAgICAkKGRvY3VtZW50KS5vbignc3VibWl0JywgJyN1c2VyZm9ybScsIGFjdGlvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RGVsZXRlTGlzdGVuZXIoYWN0aW9uKVxuICAgIHtcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikub2ZmKCkub24oXCJjbGlja1wiLCAnI2RlbGV0ZV9idG4nLCBmdW5jdGlvbiAoZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYWN0aW9uKCQodGhpcykuZGF0YShcImlkXCIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxuICAgICAgICBzZXRTYXZlTGlzdGVuZXI6IHNldFNhdmVMaXN0ZW5lcixcbiAgICAgICAgc2V0RGVsZXRlTGlzdGVuZXI6IHNldERlbGV0ZUxpc3RlbmVyXG4gICAgfVxufSIsInZhciBDYXJ0Vmlld0hlbHBlciA9IGZ1bmN0aW9uKClcbntcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxuICAgIHtcbiAgICAgICAgaWYgKHZpZXdEYXRhICE9IFwiXCIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZpZXdEYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgYWRkSXRlbShpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB0b3RhbCBwcmljZSAgb2YgdGhlIGNhcnRcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge2ludH0gdG90YWxQcmljZSAgVG90YWwgcHJpY2Ugb2YgdGhlIGNhcnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVUb3RhbFByaWNlKG5ld1ByaWNlKVxuICAgIHtcbiAgICAgICAgbmV3UHJpY2UgPSBwYXJzZUZsb2F0KG5ld1ByaWNlKSArIHBhcnNlRmxvYXQoJChcIi5jYXJ0X190b3RhbCAucHJpY2VcIikuaHRtbCgpLnN1YnN0cigxKSk7XG4gICAgICAgICQoXCIuY2FydF9fdG90YWwgLnByaWNlXCIpLmh0bWwoXCLigqxcIiArIHBhcnNlRmxvYXQobmV3UHJpY2UpLnRvRml4ZWQoMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2UgbmV3IGNhcnQgaXRlbSB2aXNpYWJsZSBpbiB0aGUgRE9NXG4gICAgICogXG4gICAgICogQHBhcmFtICB7YXJyYXl9ICBpdGVtICBQcm9kdWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkSXRlbShpdGVtKVxuICAgIHtcbiAgICAgICAgdmFyIGNhcnRJdGVtID0gJCgnPGRpdj4nKS5odG1sKCQoJy5zaWRlYmFyX19jb250ZW50X190bXAnKS5odG1sKCkpO1xuXG4gICAgICAgIGNhcnRJdGVtLmZpbmQoXCIuY2FydF9faXRlbV9fdGl0bGVcIikuaHRtbChpdGVtLnRpdGxlKTtcbiAgICAgICAgY2FydEl0ZW0uZmluZChcIi5jYXJ0X19pdGVtX19wcmljZVwiKS5odG1sKFwi4oKsXCIgKyBpdGVtLnByaWNlKTtcbiAgICAgICAgY2FydEl0ZW0uZmluZChcIi5jYXJ0X19pdGVtX19pbWFnZSBpbWdcIikuYXR0cihcInNyY1wiLCBpdGVtLmltYWdlKTtcbiAgICAgICAgY2FydEl0ZW0uZmluZChcIi5jYXJ0X19pdGVtXCIpLmF0dHIoXCJkYXRhLWlkXCIsIGl0ZW0uZWFuX251bWJlcilcblxuICAgICAgICAkKFwiLmNhcnRcIikuYXBwZW5kKGNhcnRJdGVtKTtcblxuICAgICAgICAvLyBDaGFuZ2UgYW1vdW50IG9mIGl0ZW1zXG4gICAgICAgIHZhciBhbW91bnQgPSAkKFwiLmNhcnRfYnV0dG9uIC5jb3VudFwiKS5odG1sKCk7XG4gICAgICAgICQoXCIuY2FydF9idXR0b24gLmNvdW50XCIpLmh0bWwocGFyc2VJbnQoYW1vdW50KSArIDEpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdG90YWwgcHJpY2VcbiAgICAgICAgdXBkYXRlVG90YWxQcmljZShpdGVtLnByaWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBjYXJ0IHdoZW4gdGhlIHBhZ2UgaXMgIHJlYXNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxuICAgIHtcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW5lciBmb3IgdGhlIEFkZCB0byBjYXJ0IGJ1dHRvblxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge2Z1bmN0aW9ufSBhZGR0b0NhcnQgIE1vZGVsIGNhbGxiYWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWRkUHJvZHVjdExpc3RlbmVyKGFkZFRvQ2FydClcbiAgICB7XG4gICAgICAgICQoXCJib2R5XCIpLm9uKFwiY2xpY2tcIiwgXCIuYWRkdG9jYXJ0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIHByb2R1Y3RfaWQgPSAkKHRoaXMpLmRhdGEoXCJpZFwiKTtcbiAgICAgICAgICAgIGFkZFRvQ2FydChwcm9kdWN0X2lkKTtcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdChcIiN0b19zaG9wX2NhcnRcIikuZmluZChcIiNzaG9wX2NhcnRcIikuZmFkZVRvKDAsIDEwMCkuZGVsYXkoMTAwMCkuZmFkZVRvKDYwMCwgMCk7Ly9ORVdcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW5lciBmb3IgcmVtb3ZlIGEgcHJvZHVjdCBmcm9tIHRoZSBET00gY2FydFxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlbW92ZVByb2R1Y3QgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSBwcm9kY3V0IGZyb20gdGhlIG1lbW9yeVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFJlbW92ZUxpc3RlbmVyKHJlbW92ZVByb2R1Y3QpIHtcbiAgICAgICAgJChcImJvZHlcIikub24oXCJjbGlja1wiLCBcIi5jYXJ0X19pdGVtX19yZW1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KXtcbiAgICAgICAgICAgIHZhciBjYXJ0aXRlbSAgID0gJCh0aGlzKS5wYXJlbnQoKTtcbiAgICAgICAgICAgIHZhciBwcm9kdWN0X2lkID0gJCh0aGlzKS5wYXJlbnQoKS5kYXRhKFwiaWRcIik7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9kdWN0IGZyb20gRE9NIGNhcnRcbiAgICAgICAgICAgICQoY2FydGl0ZW0pLmFkZENsYXNzKFwiY2FydF9faXRlbS0tcmVtb3ZlZFwiKTtcbiAgICAgICAgICAgICQoY2FydGl0ZW0pLm9uKFwiYW5pbWF0aW9uZW5kIHdlYmtpdEFuaW1hdGlvbkVuZCBvQW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRGVjcmVzZSBjb3VudFxuICAgICAgICAgICAgdmFyIGFtb3VudCA9ICQoXCIuY2FydF9idXR0b24gLmNvdW50XCIpLmh0bWwoKTtcbiAgICAgICAgICAgICQoXCIuY2FydF9idXR0b24gLmNvdW50XCIpLmh0bWwocGFyc2VJbnQoYW1vdW50KSAtIDEpO1xuXG4gICAgICAgICAgICByZW1vdmVQcm9kdWN0KHByb2R1Y3RfaWQpXG4gICAgICAgICAgICB1cGRhdGVUb3RhbFByaWNlKC0kKGNhcnRpdGVtKS5maW5kKFwiLmNhcnRfX2l0ZW1fX3ByaWNlXCIpLmh0bWwoKS5zdWJzdHIoMSkpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIGFkZEl0ZW06IGFkZEl0ZW0sXG4gICAgICAgIHVwZGF0ZVRvdGFsUHJpY2U6IHVwZGF0ZVRvdGFsUHJpY2UsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lcixcbiAgICAgICAgc2V0QWRkUHJvZHVjdExpc3RlbmVyOiBzZXRBZGRQcm9kdWN0TGlzdGVuZXIsXG4gICAgICAgIHNldFJlbW92ZUxpc3RlbmVyOiBzZXRSZW1vdmVMaXN0ZW5lclxuICAgIH1cbn07IiwidmFyIEVycm9yVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcbntcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcbiAgICBmdW5jdGlvbiBzZXRWaWV3KClcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJPZXBzIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvZXJyb3IvZXJyb3IuaHRtbCcpO1xuICAgIH1cblxuICAgIC8vIEFjdGlvbkxpc3RlbmVyIHRoYXQgZXhlY3V0ZXMgYWN0aW9ucyBvbiBzcGVjaWZpYyBldmVudHNcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihldmVudEhhbmRsZXIpXG4gICAge1xuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShldmVudEhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXG4gICAgfVxufTsiLCJ2YXIgTG9naW5WaWV3SGVscGVyID0gZnVuY3Rpb24oKVxue1xuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxuICAgIGZ1bmN0aW9uIHNldFZpZXcoKVxuICAgIHtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPVwiSW5sb2dnZW4gLSBBWiBHYW1lc1wiO1xuXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQoJy92aWV3cy9sb2dpbi9sb2dpbi5odG1sJyk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgZXZlbnQgd2hlbiAnc29tZXRoaW5nJyBoYXBwZW5zICh3aGVuIGEgYnV0dG9uIGlzIGNsaWNrZWQgZm9yIGV4YW1wbGUpXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxuICAgIHtcbiAgICAgICAgLy8gdXNlciBmaWxscyBpbiBsb2dpbiBmb3JtXG4gICAgICAgIC8vIHVzZXIgcHJlc3NlcyAnbG9naW4nXG5cbiAgICAgICAgLy8gaWYgdXNlciBwcmVzc2VzICdsb2dpbicsIHBlcmZvcm0gYWN0aW9uIChtYWtlIGNvbnRyb2xsZXIgc2VuZCBlbWFpbCBhbmQgcGFzc3dvcmQgdG8gQVBJKVxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vbihcInN1Ym1pdFwiLCBcIiNsb2dpbmZvcm1cIiwgYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxuICAgIH1cbn07IiwidmFyIExvZ291dFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXG57XG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXG4gICAgZnVuY3Rpb24gc2V0VmlldygpXG4gICAge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IFwiVWl0bG9nZ2VuIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvbG9nb3V0L2xvZ291dC5odG1sJyk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgZXZlbnQgd2hlbiAnc29tZXRoaW5nJyBoYXBwZW5zICh3aGVuIGEgYnV0dG9uIGlzIGNsaWNrZWQgZm9yIGV4YW1wbGUpXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoYWN0aW9uKVxuICAgIHtcbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxuICAgIH1cbn07IiwidmFyIFBhZ2VWaWV3SGVscGVyID0gZnVuY3Rpb24oKVxue1xuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxuICAgIGZ1bmN0aW9uIHNldFZpZXcodmlld0RhdGEpXG4gICAge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IFwiV2Vsa29tIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKCcvdmlld3MvcGFnZS9wYWdlLmh0bWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodmlld0RhdGFbMF0udXNlcl90eXBlID09IFwiY3VzdG9tZXJcIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkKFwiI3VzZXItYmxvY2tcIikuYXBwZW5kKFwiPGgxPkplIGxlZXMgZGl0IGFsbGVlbiBhbHMgamUgZWVuIGN1c3RvbWVyPC9oMT5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlld0RhdGFbMF0udXNlcl90eXBlID09IFwiYWRtaW5cIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkKFwiI3VzZXItYmxvY2tcIikuYXBwZW5kKFwiPGgxPkplIGxlZXMgZGl0IGFsbGVlbiBhbHMgamUgZWVuIGFkbWluaXN0cmF0b3I8L2gxPlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWN0aW9uTGlzdGVuZXIgdGhhdCBleGVjdXRlcyBhY3Rpb25zIG9uIHNwZWNpZmljIGV2ZW50c1xuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGV2ZW50SGFuZGxlcilcbiAgICB7XG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGV2ZW50SGFuZGxlcik7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgb3RoZXIgcHJvZ3JhbXMgKHRoZSBjb250cm9sbGVyIGluIHRoaXMgY2FzZSlcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxuICAgICAgICBzZXRBY3Rpb25MaXN0ZW5lcjogc2V0QWN0aW9uTGlzdGVuZXJcbiAgICB9XG59OyIsInZhciBQcm9kdWN0c1ZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXG57XG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3RGF0YSlcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJQcm9kdWN0ZW4gLSBBWiBHYW1lc1wiO1xuXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmh0bWwoJzxkaXYgY2xhc3M9XCJjb2wtMTJcIj48ZGl2IGNsYXNzPVwiY29sLTNcIiBpZD1cImZpbHRlcnNcIj48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLTlcIiBpZD1cInByb2R1Y3RzXCI+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAgIC8vIGxvYWQgZmlsdGVyc1xuICAgICAgICAkKFwiI2ZpbHRlcnNcIikubG9hZCgnL3ZpZXdzL3Byb2R1Y3RzL2ZpbHRlcnMuaHRtbCcpO1xuXG4gICAgICAgIC8vIGxvYWQgcHJvZHVjdHNcbiAgICAgICAgbG9hZFByb2R1Y3RzKHZpZXdEYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkUHJvZHVjdHModmlld0RhdGEpXG4gICAge1xuICAgICAgICAkKFwiI3Byb2R1Y3RzXCIpLmxvYWQoJy92aWV3cy9wcm9kdWN0cy9wcm9kdWN0cy5odG1sJywgZnVuY3Rpb24gKCkgeyAvLyB3YWFyIGlkID0gJ2NvbXBvbmVudCcgZG9lIC5sb2FkLi4uLi4uXG4gICAgICAgICAgICAkLmVhY2godmlld0RhdGEsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDbG9uZSBwcm9kdWN0XG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSAkKCc8ZGl2PicpLmFwcGVuZCgkKCcjcHJvZHVjdF9fbGlzdF9faXRlbScpLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFkZCBwcm9kdWN0IGluZm9cbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XG4gICAgICAgICAgICAgICAgJChwcm9kdWN0KS5maW5kKFwiLnByb2R1Y3RfX3N1YnRpdGxlXCIpLmFwcGVuZCh2YWx1ZS5nZW5yZSArKFwiIHwgUEVHSSBcIikgKyB2YWx1ZS5wZWdpX2FnZSArKFwiIHwgXCIpKyBQbGF0Zm9ybUxvZ28odmFsdWUucGxhdGZvcm0pKTtcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fZGVzY3JpcHRpb25cIikuaHRtbChDdXRTdHJpbmcodmFsdWUuZGVzY3JpcHRpb24pKTtcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIucHJvZHVjdF9fcHJpY2VcIikuYXBwZW5kKChcIuKCrCBcIikrdmFsdWUucHJpY2UudG9GaXhlZCgyKSk7XG4gICAgICAgICAgICAgICAgJChwcm9kdWN0KS5maW5kKFwiI2J1dHRvbnNfX2luZm8sIC5wcm9kdWN0X19pbWFnZSBhLCAucHJvZHVjdF9fdGl0bGVcIikuYXR0cihcImhyZWZcIiwgXCJwcm9kdWN0L1wiICsgdmFsdWUuZWFuX251bWJlcik7XG4gICAgICAgICAgICAgICAgJChwcm9kdWN0KS5maW5kKFwiLnByb2R1Y3RfX2ltYWdlIGltZ1wiKS5hdHRyKFwic3JjXCIsIHZhbHVlLmltYWdlKTtcbiAgICAgICAgICAgICAgICAkKHByb2R1Y3QpLmZpbmQoXCIuYWRkdG9jYXJ0XCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgJChcIiNwcm9kdWN0X19saXN0XCIpLmFwcGVuZChwcm9kdWN0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IGxpc3QgaXRlbSwgYmVjYXVzZSB0aGlzIGl0ZW0gaXMgYWx3YXlzIGVtcHR5XG4gICAgICAgICAgICAkKFwiI3Byb2R1Y3RfX2xpc3RfX2l0ZW1cIikuZmlyc3QoKS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy9TaG93IG1vcmUvbGVzc1xuICAgIGZ1bmN0aW9uIEN1dFN0cmluZyh0ZXh0KXtcbiAgICAgICAgdmFyIFNob3dBbW91bnQgPSA1MDtcbiAgICAgICAgdmFyIFdvcmRzQXJyYXkgPSB0ZXh0LnNwbGl0KFwiIFwiKTtcbiAgICAgICAgaWYoV29yZHNBcnJheS5sZW5ndGg+U2hvd0Ftb3VudCl7XG4gICAgICAgICAgICB2YXIgU2hvcnRTdHJpbmcgPSBcIlwiO1xuICAgICAgICAgICAgZm9yKGk9MDsgaTxTaG93QW1vdW50OyBpKyspe1xuICAgICAgICAgICAgICAgIFNob3J0U3RyaW5nICs9IFdvcmRzQXJyYXlbaV0gKyBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTaG9ydFN0cmluZytcIi4uLlwiO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgdGhlIGV2ZW50IHdoZW4gJ3NvbWV0aGluZycgaGFwcGVucyAod2hlbiBhIGJ1dHRvbiBpcyBjbGlja2VkIGZvciBleGFtcGxlKVxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcbiAgICB7XG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGFjdGlvbik7IC8vIGlmICdkb2N1bWVudCByZWFkeScgcGVyZm9ybSBcImFjdGlvblwiXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RmlsdGVyTGlzdGVuZXIoYWN0aW9uKVxuICAgIHtcbiAgICAgICAgIC8vIEhpZXIgaGV0IGZvcm11bGllciB2ZXJzdHVyZW4gYWxzIHdlIG9wIGVlbiBjaGVja2JveCBkcnVra2VuXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9mZigpLm9uKFwiY2hhbmdlXCIsIFwiaW5wdXRbdHlwZT1jaGVja2JveF1cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICQoXCIjcHJvZHVjdF9maWx0ZXJcIikuc3VibWl0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBkZSBwcm9kdWN0ZW5saWpzdCBhbHMgZWVuIHdhYXJkZSBpbiBkZSBzbGlkZXIgdmVyYW5kZXJkKGFsbGUgbWFuaWVyZW4pXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9uKFwiY2hhbmdlIGtleXVwXCIsIFwiaW5wdXRbbmFtZT1wcmljZS1tYXhdLCBpbnB1dFtuYW1lPXByaWNlLW1pbl1cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmKCQoXCIjcHJpY2VtaW5cIikudmFsKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICQoXCIjcHJpY2VtaW5cIikudmFsKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICQoXCIjcHJvZHVjdF9maWx0ZXJcIikuc3VibWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9uKFwic3VibWl0XCIsIFwiI3Byb2R1Y3RfZmlsdGVyXCIsIGFjdGlvbik7XG4gICAgfVxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcbiAgICAgICAgbG9hZFByb2R1Y3RzOiBsb2FkUHJvZHVjdHMsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lcixcbiAgICAgICAgc2V0RmlsdGVyTGlzdGVuZXI6IHNldEZpbHRlckxpc3RlbmVyXG4gICAgfVxufTsiLCJ2YXIgUmVzZXRQYXNzd29yZFZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXG57XG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3VG9TaG93KVxuICAgIHtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIklubG9nZ2VuIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5sb2FkKHZpZXdUb1Nob3cpO1xuICAgIH1cblxuICAgIC8vIEFjdGlvbkxpc3RlbmVyIHRoYXQgZXhlY3V0ZXMgYWN0aW9ucyBvbiBzcGVjaWZpYyBldmVudHNcbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihldmVudEhhbmRsZXIpXG4gICAge1xuICAgICAgICAvLyQoZG9jdW1lbnQpLnJlYWR5KGV2ZW50SGFuZGxlcik7XG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLm9uKFwic3VibWl0XCIsIFwiI3Jlc2V0Zm9ybVwiLCBldmVudEhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IG90aGVyIHByb2dyYW1zICh0aGUgY29udHJvbGxlciBpbiB0aGlzIGNhc2UpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0Vmlldzogc2V0VmlldyxcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyXG4gICAgfVxufTtcblxuLypcbnZhciBSZXNldFBhc3N3b3JkVmlld0hlbHBlciA9IGZ1bmN0aW9uKClcbntcbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcgb2YgdGhlIHBhZ2VcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxuICAgIHtcbiAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCgndmlld3MvcmVzZXRwYXNzd29yZC9yZXNldHBhc3N3b3JkLmh0bWwnKTtcbiAgICB9XG5cbiAgICAvLyBBY3Rpb25MaXN0ZW5lciB0aGF0IGV4ZWN1dGVzIGFjdGlvbnMgb24gc3BlY2lmaWMgZXZlbnRzXG4gICAgZnVuY3Rpb24gc2V0QWN0aW9uTGlzdGVuZXIoZXZlbnRIYW5kbGVyKVxuICAgIHtcbiAgICAgICAgLy8kKGRvY3VtZW50KS5yZWFkeShldmVudEhhbmRsZXIpO1xuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vbihcInN1Ym1pdFwiLCBcIiNyZXNldGZvcm1cIiwgZXZlbnRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxuICAgIH1cbn07XG4qLyIsInZhciBSZWdpc3RlclZpZXdIZWxwZXIgPSBmdW5jdGlvbigpXG57XG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3IG9mIHRoZSBwYWdlXG4gICAgZnVuY3Rpb24gc2V0Vmlldyh2aWV3VG9TaG93KVxuICAgIHtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIlJlZ2lzdHJlcmVuIC0gQVogR2FtZXNcIjtcbiAgICAgICAgXG4gICAgICAgICQoXCIjY29tcG9uZW50XCIpLmxvYWQodmlld1RvU2hvdywgZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IDMyOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJChcIiNkYWdcIikuYXBwZW5kKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBpICsgXCInPlwiICsgaSArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSAxOTAwOyBpIDwgZGF0ZS5nZXRGdWxsWWVhcigpICsgMTsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChpID09IDIwMDApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAkKFwiI2phYXJcIikuYXBwZW5kKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBpICsgXCInIHNlbGVjdGVkPSdzZWxlY3RlZCc+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQoXCIjamFhclwiKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIGkgKyBcIic+XCIgKyBpICsgXCI8L29wdGlvbj5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGUgdGhlIGV2ZW50IHdoZW4gJ3NvbWV0aGluZycgaGFwcGVucyAod2hlbiBhIGJ1dHRvbiBpcyBjbGlja2VkIGZvciBleGFtcGxlKVxuICAgIGZ1bmN0aW9uIHNldEFjdGlvbkxpc3RlbmVyKGFjdGlvbilcbiAgICB7XG4gICAgICAgIC8vIHVzZXIgZmlsbHMgaW4gcmVnaXN0ZXIgZm9ybVxuICAgICAgICAvLyB1c2VyIHByZXNzZXMgJ3JlZ2lzdGVyJ1xuXG4gICAgICAgIC8vIGlmIHVzZXIgcHJlc3NlcyAncmVnaXN0ZXInLCBwZXJmb3JtIGFjdGlvblxuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vbihcInN1Ym1pdFwiLCBcIiNyZWdpc3RlcmZvcm1cIiwgYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxuICAgIH1cbn07IiwidmFyIFByb2R1Y3RWaWV3SGVscGVyID0gZnVuY3Rpb24oKVxue1xuICAgIC8vIENoYW5nZSB0aGUgdmlldyBvZiB0aGUgcGFnZVxuICAgIGZ1bmN0aW9uIHNldFZpZXcocHJvZHVjdClcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gcHJvZHVjdC50aXRsZSArIFwiIC0gQVogR2FtZXNcIjtcblxuICAgICAgICAgJChcIiNjb21wb25lbnRcIikubG9hZCgnL3ZpZXdzL3NpbmdsZV9wcm9kdWN0L3NpbmdsZV9wcm9kdWN0Lmh0bWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19pbWFnZSBpbWdcIikuYXR0cihcInNyY1wiLCBwcm9kdWN0LmltYWdlKTtcbiAgICAgICAgICAgICAgICAkKFwiLnNpbmdsZXByb2R1Y3RfX3RpdGxlXCIpLmh0bWwocHJvZHVjdC50aXRsZSk7XG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19wcmljZVwiKS5odG1sKFwi4oKsIFwiICsgcHJvZHVjdC5wcmljZS50b0ZpeGVkKDIpKTtcblxuICAgICAgICAgICAgICAgICQoXCIuc2luZ2xlcHJvZHVjdF9fZWFuXCIpLmFwcGVuZChwcm9kdWN0LmVhbl9udW1iZXIpO1xuICAgICAgICAgICAgICAgICQoXCIuc2luZ2xlcHJvZHVjdF9fcGxhdGZvcm1cIikuYXBwZW5kKFBsYXRmb3JtTG9nbyhwcm9kdWN0LnBsYXRmb3JtKSk7IC8vIGZ1bmN0aWUgdm9vciBsb2dvXG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19wdWJsaXNoZXJcIikuYXBwZW5kKFBsYXRmb3JtTG9nbyhwcm9kdWN0LnB1Ymxpc2hlcikpOyAvLyBmdW5jdGllIHZvb3IgbG9nb1xuICAgICAgICAgICAgICAgICQoXCIuc2luZ2xlcHJvZHVjdF9fcGVnaVwiKS5hcHBlbmQocHJvZHVjdC5wZWdpX2FnZSk7XG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19nZW5yZVwiKS5hcHBlbmQocHJvZHVjdC5nZW5yZSk7XG4gICAgICAgICAgICAgICAgJChcIi5zaW5nbGVwcm9kdWN0X19kZXNjclwiKS5odG1sKHByb2R1Y3QuZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAgICAgJChcIi5hZGR0b2NhcnRcIikuYXR0cihcImRhdGEtaWRcIiwgcHJvZHVjdC5lYW5fbnVtYmVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChVc2VySGVscGVyLmlzTG9nZWRJbigpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJChcIi5hZGRUb1dpc2hsaXN0QnV0dG9uXCIpLmF0dHIoXCJvbmNsaWNrXCIsIFwiV2lzaGxpc3RIZWxwZXIuYWRkSXRlbShcIiArIHByb2R1Y3QuZWFuX251bWJlciArIFwiKTtcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIuYWRkVG9XaXNobGlzdEJ1dHRvblwiKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShwcm9kdWN0LnJlbGVhc2VfZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9udGhzID0gW1wiamFudWFyaVwiLCBcImZlYnJ1YXJpXCIsIFwibWFhcnRcIiwgXCJhcHJpbFwiLCBcIm1laVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYXVndXN0dXNcIiwgXCJzZXB0ZW1iZXJcIiwgXCJva3RvYmVyXCIsIFwibm92ZW1iZXJcIiwgXCJkZWNlbWJlclwiXTtcblxuICAgICAgICAgICAgICAgICQoXCIuc2luZ2xlcHJvZHVjdF9fcmVsZWFzZWRhdGVcIikuYXBwZW5kKGQuZ2V0RGF5KCkgKyBcIiBcIiArIG1vbnRoc1tkLmdldE1vbnRoKCldICsgXCIgXCIgKyBkLmdldEZ1bGxZZWFyKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXG4gICAge1xuICAgICAgICAvLyB1c2VyIGZpbGxzIGluIHJlZ2lzdGVyIGZvcm1cbiAgICAgICAgLy8gdXNlciBwcmVzc2VzICdyZWdpc3RlcidcblxuICAgICAgICAvLyBpZiB1c2VyIHByZXNzZXMgJ3JlZ2lzdGVyJywgcGVyZm9ybSBhY3Rpb25cbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBieSBvdGhlciBwcm9ncmFtcyAodGhlIGNvbnRyb2xsZXIgaW4gdGhpcyBjYXNlKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFZpZXc6IHNldFZpZXcsXG4gICAgICAgIHNldEFjdGlvbkxpc3RlbmVyOiBzZXRBY3Rpb25MaXN0ZW5lclxuICAgIH1cbn07IiwidmFyIFdpc2hsaXN0Vmlld0hlbHBlciA9IGZ1bmN0aW9uKClcbntcbiAgICAvL2NoYW5nZSB2aWV3IG9mIHBhZ2VcbiAgICBmdW5jdGlvbiBzZXRWaWV3KHZpZXdEYXRhKVxuICAgIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIldMIFZJRVc6IEluc2lkZSBzZXRWaWV3XCIpO1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IFwiV2lzaGxpc3QgLSBBWiBHYW1lc1wiO1xuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5odG1sKCc8ZGl2IGNsYXNzPVwiY29sLTEyXCI+PGRpdiBjbGFzcz1cImNvbC0xMlwiIGlkPVwid2lzaGxpc3RcIj48L2Rpdj48L2Rpdj4nKTtcblxuICAgICAgICBsb2FkV2lzaGxpc3Qodmlld0RhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRXaXNobGlzdCh2aWV3RGF0YSlcbiAgICB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJXTCBWSUVXOiBJbnNpZGUgbG9hZFdpc2hMaXN0XCIpO1xuICAgICAgICAkKFwiI3dpc2hsaXN0XCIpLmxvYWQoJy92aWV3cy93aXNobGlzdC93aXNobGlzdC5odG1sJywgZnVuY3Rpb24gKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgYWxsIHdpc2hsaXN0IGl0ZW1zIHRvIGh0bWxcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IDBcbiAgICAgICAgICAgICAgICAkLmVhY2godmlld0RhdGEsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xvbmUgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICB2YXIgd2lzaF9fbGlzdF9faXRlbSA9ICQoJzxkaXY+JykuYXBwZW5kKCQoJyN3aXNoX19saXN0X19pdGVtJykuY2xvbmUoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHByb2R1Y3QgaW5mb1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudCArMVxuICAgICAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9faWRcIikuYXBwZW5kKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9faW1hZ2UgaW1nXCIpLmF0dHIoXCJzcmNcIiwgdmFsdWUuaW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIud2lzaF9fbGlzdF9fdGl0bGVcIikuaHRtbCh2YWx1ZS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19wcmljZVwiKS5hcHBlbmQoKFwi4oKsIFwiKSt2YWx1ZS5wcmljZSk7XG4gICAgICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19wbGF0Zm9ybVwiKS5hcHBlbmQoUGxhdGZvcm1Mb2dvKHZhbHVlLnBsYXRmb3JtKSk7XG4gICAgICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19hdmFpbGFiaWxpdHlcIikuYXBwZW5kKEJlc2NoaWtiYWFyaGVpZEtsZXVyKHZhbHVlLnN0b2NrKSk7XG4gICAgICAgICAgICAgICAgICAgICQod2lzaF9fbGlzdF9faXRlbSkuZmluZChcIi53aXNoX19saXN0X19saWtlYnV0dG9uXCIpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAkKHdpc2hfX2xpc3RfX2l0ZW0pLmZpbmQoXCIjZGVsZXRlX2J0blwiKS5hdHRyKFwiZGF0YS1pZFwiLCB2YWx1ZS5lYW5fbnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgJCh3aXNoX19saXN0X19pdGVtKS5maW5kKFwiI2NhcnRfYnRuXCIpLmF0dHIoXCJkYXRhLWlkXCIsIHZhbHVlLmVhbl9udW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICQoXCIjd2lzaF9fbGlzdFwiKS5hcHBlbmQod2lzaF9fbGlzdF9faXRlbSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBsaXN0IGl0ZW0sIGJlY2F1c2UgdGhpcyBpdGVtIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAgICAgJChcIiN3aXNoX19saXN0X19pdGVtXCIpLmZpcnN0KCkucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRBY3Rpb25MaXN0ZW5lcihhY3Rpb24pXG4gICAge1xuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhY3Rpb24pOyAvLyBpZiAnZG9jdW1lbnQgcmVhZHknIHBlcmZvcm0gXCJhY3Rpb25cIiAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREZWxldGVMaXN0ZW5lcihhY3Rpb24pXG4gICAge1xuICAgICAgICAkKFwiI2NvbXBvbmVudFwiKS5vZmYoKS5vbihcImNsaWNrXCIsIFwiI2RlbGV0ZV9idG5cIiwgZnVuY3Rpb24oZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIGVhbiA9ICQodGhpcykuZGF0YShcImlkXCIpO1xuICAgICAgICAgICAgdmFyIGRpdl90b19oaWRlID0gJCh0aGlzKS5jbG9zZXN0KFwiLnJvd1wiKTtcbiAgICAgICAgICAgIGFjdGlvbihlYW4sIGRpdl90b19oaWRlKTtcbiAgICAgICAgfSApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoaWRlSXRlbShkaXZfdG9faGlkZSlcbiAgICB7XG4gICAgICAgIGRpdl90b19oaWRlLmZhZGVUbygyMDAsIDApLnNsaWRlVXAoMjAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRWaWV3OiBzZXRWaWV3LFxuICAgICAgICBsb2FkV2lzaGxpc3Q6IGxvYWRXaXNobGlzdCxcbiAgICAgICAgc2V0QWN0aW9uTGlzdGVuZXI6IHNldEFjdGlvbkxpc3RlbmVyLFxuICAgICAgICBzZXREZWxldGVMaXN0ZW5lcjogc2V0RGVsZXRlTGlzdGVuZXIsXG4gICAgICAgIGhpZGVJdGVtOiBoaWRlSXRlbVxuICAgIH1cbn0iXX0=
